extension = ".md"

[pages]

[pages.triggers]
functions = [
  "all_finished",
  "manual_only",
  "all_successful",
  "all_failed",
  "any_successful",
  "any_failed",
  "not_all_skipped",
  "some_failed",
  "some_successful",
]
module = "prefect.triggers"
title = "Triggers"

[pages.backend.flow]
classes = ["FlowView"]
experimental = true
module = "prefect.backend.flow"
title = "Flow"

[pages.backend.flow_run]
classes = ["FlowRunView"]
experimental = true
functions = ["watch_flow_run"]
module = "prefect.backend.flow_run"
title = "Flow Run"

[pages.backend.task_run]
classes = ["TaskRunView"]
experimental = true
module = "prefect.backend.task_run"
title = "Task Run"

[pages.backend.tenant]
classes = ["TenantView"]
experimental = true
module = "prefect.backend.tenant"
title = "Tenant"

[pages.backend.kv_store]
functions = ["set_key_value", "get_key_value", "delete_key", "list_keys"]
module = "prefect.backend.kv_store"
title = "KV Store"

[pages.client.client]
classes = ["Client"]
module = "prefect.client"
title = "Client"

[pages.client.secrets]
classes = ["Secret"]
module = "prefect.client.secrets"
title = "Secrets"

[pages.cli.agent]
commands = ["local", "docker", "kubernetes", "ecs"]
module = "prefect.cli.agent"
title = "agent"

[pages.cli.auth]
commands = ["login", "logout", "list_tenants", "switch_tenants", "create_key", "list_keys", "revoke_key", "status"]
module = "prefect.cli.auth"
title = "auth"

[pages.cli.create]
commands = ["project"]
module = "prefect.cli.create"
title = "create"

[pages.cli.delete]
commands = ["project"]
module = "prefect.cli.delete"
title = "delete"

[pages.cli.describe]
commands = ["flows", "tasks", "flow_runs"]
module = "prefect.cli.describe"
title = "describe"

[pages.cli.get]
commands = ["flows", "tasks", "projects", "flow_runs", "logs"]
module = "prefect.cli.get"
title = "get"

[pages.cli.register]
commands = ["register"]
module = "prefect.cli.build_register"
title = "register"

[pages.cli.build]
commands = ["build"]
module = "prefect.cli.build_register"
title = "build"

[pages.cli.kv_store]
commands = ["set_command", "get_command", "delete_command", "list_command"]
module = "prefect.cli.kv_store"
title = "kv_store"

[pages.cli.run]
commands = ["run", "run_flow"]
module = "prefect.cli.run"
title = "run"

[pages.cli.server]
commands = ["start", "create_tenant", "stop", "config_cmd"]
module = "prefect.cli.server"
title = "server"

[pages.schedules.schedules]
classes = [
  "Schedule",
]
functions = [
  "IntervalSchedule",
  "CronSchedule",
]
module = "prefect.schedules.schedules"
title = "Schedules"

[pages.schedules.clocks]
classes = [
  "Clock",
  "IntervalClock",
  "CronClock",
  "DatesClock",
]
module = "prefect.schedules.clocks"
title = "Clocks"

[pages.schedules.filters]
functions = [
  "at_time",
  "between_datetimes",
  "between_dates",
  "between_times",
  "is_weekday",
  "is_weekend",
  "is_day_of_week",
  "is_month_end",
  "is_month_start",
]
module = "prefect.schedules.filters"
title = "Filters"

[pages.schedules.adjustments]
functions = [
  "add",
  "next_weekday",
]
module = "prefect.schedules.adjustments"
title = "Adjustments"

[pages.core.edge]
classes = ["Edge"]
module = "prefect.core.edge"
title = "Edge"

[pages.core.flow]
classes = ["Flow"]
module = "prefect.core.flow"
title = "Flow"

[pages.core.task]
classes = ["Task"]
module = "prefect.core.task"
title = "Task"

[pages.core.parameters]
classes = ["Parameter", "DateTimeParameter"]
module = "prefect.core.parameter"
title = "Parameter"

[pages.engine.cache_validators]
functions = ["never_use", "duration_only", "all_inputs", "all_parameters", "partial_parameters_only", "partial_inputs_only"]
module = "prefect.engine.cache_validators"
title = "Cache Validators"

[pages.engine.state]
classes = [
  "State",
  "Pending",
  "Paused",
  "Scheduled",
  "Resume",
  "Retrying",
  "Submitted",
  "Queued",
  "ClientFailed",
  "Running",
  "Cancelling",
  "Finished",
  "Success",
  "Cached",
  "Looped",
  "Mapped",
  "Skipped",
  "Failed",
  "Cancelled",
  "TriggerFailed",
  "ValidationFailed",
  "TimedOut",
]
module = "prefect.engine.state"
title = "State"

[pages.engine.signals]
classes = [
  "ENDRUN",
  "FAIL",
  "LOOP",
  "TRIGGERFAIL",
  "VALIDATIONFAIL",
  "SUCCESS",
  "RETRY",
  "SKIP",
  "PAUSE",
]
module = "prefect.engine.signals"
title = "Signals"

[pages.engine.flow_runner]
classes = ["FlowRunner"]
module = "prefect.engine.flow_runner"
title = "FlowRunner"

[pages.engine.task_runner]
classes = ["TaskRunner"]
module = "prefect.engine.task_runner"
title = "TaskRunner"

[pages.engine.result]
classes = ["Result"]
module = "prefect.engine.result"
title = "Results"

[pages.engine.results]
classes = ["PrefectResult", "GCSResult", "LocalResult", "S3Result", "AzureResult", "SecretResult", "ConstantResult"]
module = "prefect.engine.results"
title = "Result Subclasses"

[pages.engine.serializers]
classes = ["Serializer", "PickleSerializer", "JSONSerializer", "DateTimeSerializer", "PandasSerializer", "CompressedSerializer"]
module = "prefect.engine.serializers"
title = "Result Serializers"

[pages.engine.cloud]
classes = ["CloudFlowRunner", "CloudTaskRunner"]
module = "prefect.engine.cloud"
title = "Cloud"

[pages.executors]
classes = {Executor = [], LocalExecutor = [], LocalDaskExecutor = [], DaskExecutor = []}
module = "prefect.executors"
title = "Executors"

[pages.run_configs]
classes = ["RunConfig", "UniversalRun", "LocalRun", "DockerRun", "KubernetesRun", "ECSRun", "VertexRun"]
module = "prefect.run_configs"
title = "Run Configuration"

[pages.storage]
classes = {"Storage" = ["add_flow", "build"], "Azure" = [], "Bitbucket" = [], "CodeCommit" = [], "Docker" = [], "GCS" = [], "Git" = [], "GitHub" = [], "GitLab" = [], "Local" = [], "Module" = [], "S3" = [], "Webhook" = []}
module = "prefect.storage"
title = "Storage"

[pages.exceptions]
classes = [
  "PrefectSignal",
  "VersionLockMismatchSignal",
  "TaskTimeoutSignal",
  "PrefectException",
  "ClientError",
  "AuthorizationError",
  "FlowStorageError",
]
module = "prefect.exceptions"
title = "Exceptions"

[pages.tasks.control_flow]
classes = ["FilterTask", "case"]
functions = ["switch", "ifelse", "merge"]
module = "prefect.tasks.control_flow"
title = "Control Flow Tasks"

[pages.tasks.airtable]
classes = ["WriteAirtableRow", "ReadAirtableRow"]
module = "prefect.tasks.airtable"
title = "Airtable Tasks"

[pages.tasks.aws]
classes = [
  "S3Download",
  "S3Upload",
  "S3List",
  "LambdaCreate",
  "LambdaDelete",
  "LambdaInvoke",
  "LambdaList",
  "StepActivate",
  "AWSSecretsManager",
  "BatchSubmit",
  "AWSClientWait",
]
module = "prefect.tasks.aws"
title = "AWS Tasks"

[pages.tasks.azure]
classes = [
  "BlobStorageDownload",
  "BlobStorageUpload",
  "CosmosDBCreateItem",
  "CosmosDBReadItems",
  "CosmosDBQueryItems",
]
module = "prefect.tasks.azure"
title = "Azure Tasks"

[pages.tasks.azureml]
classes = [
  "DatasetCreateFromDelimitedFiles",
  "DatasetCreateFromParquetFiles",
  "DatasetCreateFromFiles",
  "DatastoreRegisterBlobContainer",
  "DatastoreList",
  "DatastoreGet",
  "DatastoreUpload",
]
module = "prefect.tasks.azureml"
title = "Azure ML Service Tasks"

[pages.tasks.fivetran]
classes = ["FivetranSyncTask"]
module = "prefect.tasks.fivetran"
title = "Fivetran Tasks"

[pages.tasks.prefect]
classes = [
  "StartFlowRun",
  "RenameFlowRun",
  "CancelFlowRun",
  "create_flow_run",
  "get_task_run_result",
  "wait_for_flow_run",
]
module = "prefect.tasks.prefect"
title = "Prefect Tasks"

[pages.tasks.github]
classes = ["CreateGitHubPR", "OpenGitHubIssue", "CreateIssueComment", "GetRepoInfo", "CreateBranch"]
module = "prefect.tasks.github"
title = "GitHub Tasks"

[pages.tasks.kubernetes]
classes = [
  "CreateNamespacedDeployment",
  "DeleteNamespacedDeployment",
  "ListNamespacedDeployment",
  "PatchNamespacedDeployment",
  "ReadNamespacedDeployment",
  "ReplaceNamespacedDeployment",
  "CreateNamespacedJob",
  "DeleteNamespacedJob",
  "ListNamespacedJob",
  "PatchNamespacedJob",
  "ReadNamespacedJob",
  "ReplaceNamespacedJob",
  "RunNamespacedJob",
  "ConnectGetNamespacedPodExec",
  "CreateNamespacedPod",
  "DeleteNamespacedPod",
  "ListNamespacedPod",
  "PatchNamespacedPod",
  "ReadNamespacedPod",
  "ReadNamespacedPodLogs",
  "ReplaceNamespacedPod",
  "CreateNamespacedService",
  "DeleteNamespacedService",
  "ListNamespacedService",
  "PatchNamespacedService",
  "ReadNamespacedService",
  "ReplaceNamespacedService",
  "KubernetesSecret",
]
module = "prefect.tasks.kubernetes"
title = "Kubernetes Tasks"

[pages.tasks.dbt]
classes = ["DbtShellTask"]
module = "prefect.tasks.dbt"
title = "DBT Tasks"

[pages.tasks.asana]
classes = ["OpenAsanaToDo"]
module = "prefect.tasks.asana"
title = "Asana Tasks"

[pages.tasks.docker]
classes = [
  "BuildImage",
  "ListImages",
  "PullImage",
  "PushImage",
  "RemoveImage",
  "TagImage",
  "CreateContainer",
  "GetContainerLogs",
  "ListContainers",
  "StartContainer",
  "StopContainer",
  "RemoveContainer",
  "WaitOnContainer",
]
module = "prefect.tasks.docker"
title = "Docker Tasks"

[pages.tasks.dropbox]
classes = ["DropboxDownload"]
module = "prefect.tasks.dropbox"
title = "Dropbox Tasks"

[pages.tasks.exasol]
classes = [
  "ExasolFetch",
  "ExasolExecute",
  "ExasolImportFromIterable",
  "ExasolExportToFile",
]
module = "prefect.tasks.exasol"
title = "Exasol Tasks"

[pages.tasks.files]
classes = [
  "Copy",
  "Move",
  "Remove",
  "Unzip",
  "Zip",
]
module = "prefect.tasks.files"
title = "File and Filesystem Tasks"

[pages.tasks.gcp]
classes = [
  "GCPSecret",
  "GCSDownload",
  "GCSUpload",
  "GCSCopy",
  "GCSBlobExists",
  "BigQueryTask",
  "BigQueryStreamingInsert",
  "CreateBigQueryTable",
  "BigQueryLoadGoogleCloudStorage",
  "BigQueryLoadFile",
]
module = "prefect.tasks.gcp"
title = "Google Cloud Tasks"

[pages.tasks.great_expectations]
classes = ["RunGreatExpectationsValidation"]
module = "prefect.tasks.great_expectations"
title = "Great Expectations Task"

[pages.tasks.gsheets]
classes = [
  "WriteGsheetRow",
  "ReadGsheetRow",
]
module = "prefect.tasks.gsheets"
title = "Google Sheets Tasks"

[pages.tasks.jira]
classes = ["JiraTask", "JiraServiceDeskTask"]
module = "prefect.tasks.jira"
title = "Jira Tasks"

[pages.tasks.jupyter]
classes = ["ExecuteNotebook"]
module = "prefect.tasks.jupyter"
title = "Jupyter Tasks"

[pages.tasks.monday]
classes = ["CreateItem"]
module = "prefect.tasks.monday"
title = "Monday Tasks"

[pages.tasks.trello]
classes = ["CreateCard"]
module = "prefect.tasks.trello"
title = "Trello Tasks"

[pages.tasks.mysql]
classes = ["MySQLExecute", "MySQLFetch"]
module = "prefect.tasks.mysql"
title = "MySQL Tasks"

[pages.tasks.notifications]
classes = ["EmailTask", "SlackTask", "PushbulletTask"]
module = "prefect.tasks.notifications"
title = "Notification Tasks"

[pages.tasks.postgres]
classes = ["PostgresExecute", "PostgresExecuteMany", "PostgresFetch"]
module = "prefect.tasks.postgres"
title = "Postgres Tasks"

[pages.tasks.prometheus]
classes = ["PushGaugeToGateway", "PushAddGaugeToGateway"]
module = "prefect.tasks.prometheus"
title = "prometheus Tasks"

[pages.tasks.sql_server]
classes = ["SqlServerExecute", "SqlServerExecuteMany", "SqlServerFetch"]
module = "prefect.tasks.sql_server"
title = "SQL Server Tasks"

[pages.tasks.redis]
classes = ["RedisSet", "RedisGet", "RedisExecute"]
module = "prefect.tasks.redis"
title = "Redis Tasks"

[pages.tasks.rss]
classes = ["ParseRSSFeed"]
module = "prefect.tasks.rss"
title = "RSS Tasks"

[pages.tasks.secrets]
classes = ["SecretBase", "PrefectSecret", "EnvVarSecret"]
module = "prefect.tasks.secrets"
title = "Secret Tasks"

[pages.tasks.snowflake]
classes = ["SnowflakeQuery"]
module = "prefect.tasks.snowflake"
title = "Snowflake Tasks"

[pages.tasks.sodasql]
classes = ["SodaSQLScan"]
module = "prefect.tasks.sodasql"
title = "SodaSQL Tasks"

[pages.tasks.databricks]
classes = ["DatabricksSubmitRun", "DatabricksRunNow"]
module = "prefect.tasks.databricks"
title = "Databricks Tasks"

[pages.tasks.spacy]
classes = ["SpacyNLP", "SpacyTagger", "SpacyParser", "SpacyNER", "SpacyComponent"]
module = "prefect.tasks.spacy"
title = "spaCy Tasks"

[pages.tasks.sqlite]
classes = ["SQLiteQuery", "SQLiteScript"]
module = "prefect.tasks.database"
title = "SQLite Tasks"

[pages.tasks.function]
classes = ["FunctionTask"]
module = "prefect.tasks.core.function"
title = "Function Tasks"

[pages.tasks.collections]
classes = ["List", "Tuple", "Set", "Dict"]
module = "prefect.tasks.core.collections"
title = "Collection Tasks"

[pages.tasks.operators]
classes = [
  "GetItem",
  "GetAttr",
  "Add",
  "Sub",
  "Mul",
  "Div",
  "FloorDiv",
  "Pow",
  "Mod",
  "And",
  "Or",
  "Not",
  "Equal",
  "NotEqual",
  "GreaterThanOrEqual",
  "GreaterThan",
  "LessThanOrEqual",
  "LessThan",
]
module = "prefect.tasks.core.operators"
title = "Operator Tasks"
[pages.tasks.constants]
classes = ["Constant"]
module = "prefect.tasks.core.constants"
title = "Constant Tasks"

[pages.tasks.resources]
classes = ["ResourceManager"]
functions = ["resource_manager"]
module = "prefect.tasks.core.resource_manager"
title = "ResourceManager Tasks"

[pages.tasks.shell]
classes = ["ShellTask"]
module = "prefect.tasks.shell"
title = "Shell Tasks"

[pages.tasks.strings]
classes = ["StringFormatter", "JinjaTemplate"]
module = "prefect.tasks.templates"
title = "String Templating Tasks"

[pages.tasks.twitter]
classes = ["LoadTweetReplies"]
module = "prefect.tasks.twitter"
title = "Twitter Tasks"

[pages.agent.agent]
classes = {Agent = ["start"]}
module = "prefect.agent"
title = "Agent"

[pages.agent.local]
classes = {LocalAgent = ["start"]}
module = "prefect.agent.local"
title = "Local Agent"

[pages.agent.docker]
classes = {DockerAgent = ["start"]}
module = "prefect.agent.docker"
title = "Docker Agent"

[pages.agent.kubernetes]
classes = {KubernetesAgent = ["start"]}
module = "prefect.agent.kubernetes"
title = "Kubernetes Agent"

[pages.agent.ecs]
classes = {ECSAgent = ["start"]}
module = "prefect.agent.ecs"
title = "ECS Agent"

[pages.agent.vertex]
classes = {VertexAgent = ["start"]}
module = "prefect.agent.vertex"
title = "Vertex Agent"

[pages.artifacts.artifacts]
experimental = true
functions = [
  "create_link",
  "update_link",
  "create_markdown",
  "update_markdown",
  "delete_artifact",
]
module = "prefect.artifacts"
title = "Artifacts"

[pages.utilities.collections]
classes = ["DotDict"]
functions = ["merge_dicts", "as_nested_dict", "dict_to_flatdict", "flatdict_to_dict"]
module = "prefect.utilities.collections"
title = "Collections"

[pages.utilities.configuration]
functions = ["set_temporary_config"]
module = "prefect.utilities.configuration"
title = "Configuration"

[pages.utilities.context]
classes = ["Context"]
module = "prefect.utilities.context"
title = "Context"

[pages.utilities.debug]
functions = ["is_serializable", "raise_on_exception"]
module = "prefect.utilities.debug"
title = "Debugging Tools"

[pages.utilities.diagnostics]
functions = ["diagnostic_info", "flow_information", "system_information", "config_overrides", "environment_variables"]
module = "prefect.utilities.diagnostics"
title = "Diagnostics"

[pages.utilities.executors]
functions = ["run_task_with_timeout"]
module = "prefect.utilities.executors"
title = "Executors"

[pages.utilities.gcp]
functions = ["get_storage_client", "get_bigquery_client"]
module = "prefect.utilities.gcp"
title = "Google Utilities"

[pages.utilities.graphql]
classes = ["EnumValue"]
functions = ["parse_graphql", "parse_graphql_arguments", "with_args", "compress", "decompress"]
module = "prefect.utilities.graphql"
title = "GraphQL"

[pages.utilities.logging]
functions = ["configure_logging", "get_logger"]
module = "prefect.utilities.logging"
title = "Logging"

[pages.utilities.notifications]
functions = ["callback_factory", "slack_notifier", "gmail_notifier", "jira_notification.jira_notifier"]
module = "prefect.utilities.notifications"
title = "Notifications and Callback Tools"

[pages.utilities.serialization]
classes = ["JSONCompatible", "Nested", "Bytes", "UUID", "FunctionReference"]
functions = ["to_qualified_name", "from_qualified_name"]
module = "prefect.utilities.serialization"
title = "Serialization"

[pages.utilities.tasks]
classes = []
functions = ["tags", "as_task", "pause_task", "task", "defaults_from_attrs", "apply_map"]
module = "prefect.utilities.tasks"
title = "Task Utilities"

[pages.utilities.edges]
classes = ["unmapped", "mapped", "flatten"]
functions = []
module = "prefect.utilities.edges"
title = "Edge Utilities"

[pages.tasks.dremio]
classes = ["DremioFetch"]
module = "prefect.tasks.dremio"
title = "Dremio Tasks"

[pages.tasks.sendgrid]
classes = ["SendEmail"]
module = "prefect.tasks.sendgrid"
title = "SendGrid Tasks"

[pages.tasks.census]
classes = ["CensusSyncTask"]
module = "prefect.tasks.census"
title = "Census Tasks"
