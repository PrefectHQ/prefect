extension = ".md"

[pages]

[pages.triggers]
title = "Triggers"
module = "prefect.triggers"
functions = [
    "all_finished",
    "manual_only",
    "always_run",
    "all_successful",
    "all_failed",
    "any_successful",
    "any_failed",
    "not_all_skipped",
    "some_failed",
    "some_successful",
]

[pages.client.client]
title = "Client"
module = "prefect.client"
classes = ["Client"]

[pages.client.secrets]
title = "Secrets"
module = "prefect.client.secrets"
classes = ["Secret"]

[pages.schedules.schedules]
title = "Schedules"
module = "prefect.schedules.schedules"
classes = [
    "Schedule",
]
functions = [
    "IntervalSchedule",
    "CronSchedule",
]

[pages.schedules.clocks]
title = "Clocks"
module = "prefect.schedules.clocks"
classes = [
    "Clock",
    "IntervalClock",
    "CronClock",
    "DatesClock",
]

[pages.schedules.filters]
title = "Filters"
module = "prefect.schedules.filters"
functions = [
    "at_time",
    "between_datetimes",
    "between_dates",
    "between_times",
    "is_weekday",
    "is_weekend",
    "is_month_end"
]

[pages.schedules.adjustments]
title = "Adjustments"
module = "prefect.schedules.adjustments"
functions = [
    "add",
    "next_weekday",
]

[pages.core.edge]
title = "Edge"
module = "prefect.core.edge"
classes = ["Edge"]

[pages.core.flow]
title = "Flow"
module = "prefect.core.flow"
classes = ["Flow"]

[pages.core.task]
title = "Task"
module = "prefect.core.task"
classes = ["Task"]

[pages.core.parameters]
title = "Parameter"
module = "prefect.core.parameter"
classes = ["Parameter"]

[pages.engine.cache_validators]
title = "Cache Validators"
module = "prefect.engine.cache_validators"
functions = ["never_use", "duration_only", "all_inputs", "all_parameters", "partial_parameters_only", "partial_inputs_only"]

[pages.engine.state]
title = "State"
module = "prefect.engine.state"
classes = [
            "State",
            "Pending",
            "Paused",
            "Scheduled",
            "Resume",
            "Retrying",
            "Submitted",
            "Queued",
            "ClientFailed",
            "Running",
            "Finished",
            "Success",
            "Cached",
            "Looped",
            "Mapped",
            "Skipped",
            "Failed",
            "Cancelled",
            "TriggerFailed",
            "ValidationFailed",
            "TimedOut",
        ]

[pages.engine.signals]
module = "prefect.engine.signals"
title = "Signals"
classes = [
            "ENDRUN",
            "FAIL",
            "LOOP",
            "TRIGGERFAIL",
            "VALIDATIONFAIL",
            "SUCCESS",
            "RETRY",
            "SKIP",
            "PAUSE",
        ]

[pages.engine.flow_runner]
title = "FlowRunner"
module = "prefect.engine.flow_runner"
classes = ["FlowRunner"]

[pages.engine.task_runner]
title = "TaskRunner"
module = "prefect.engine.task_runner"
classes = ["TaskRunner"]

[pages.engine.executors]
title = "Executors"
module = "prefect.engine.executors"
classes = [
            "Executor",
            "DaskExecutor",
            "LocalDaskExecutor",
            "LocalExecutor"]

[pages.engine.result]
title = "Results"
module = "prefect.engine.result"
classes = ["Result", "SafeResult", "NoResultType"]

[pages.engine.results]
title = "Result Subclasses"
module = "prefect.engine.results"
classes = ["PrefectResult", "GCSResult", "LocalResult", "S3Result", "AzureResult", "SecretResult", "ConstantResult"]

[pages.engine.result_handlers]
title = "Result Handlers"
module = "prefect.engine.result_handlers"
classes = ["JSONResultHandler", "GCSResultHandler", "LocalResultHandler", "S3ResultHandler", "AzureResultHandler", "SecretResultHandler"]

[pages.engine.cloud]
title = "Cloud"
module = "prefect.engine.cloud"
classes = ["CloudFlowRunner", "CloudTaskRunner"]

[pages.environments.storage]
title = "Storage"
module = "prefect.environments.storage"
classes = ["Docker", "Local", "S3", "GCS", "Azure"]

[pages.environments.execution]
title = "Execution Environments"
module = "prefect.environments.execution"
classes = ["DaskKubernetesEnvironment", "DaskCloudProviderEnvironment", "FargateTaskEnvironment", "KubernetesJobEnvironment", "LocalEnvironment"]

[pages.tasks.control_flow]
title = "Control Flow Tasks"
module = "prefect.tasks.control_flow"
classes = ["FilterTask", "case"]
functions = ["switch", "ifelse", "merge"]

[pages.tasks.airtable]
title = "Airtable Tasks"
module = "prefect.tasks.airtable"
classes = ["WriteAirtableRow"]

[pages.tasks.aws]
title = "AWS Tasks"
module = "prefect.tasks.aws"
classes = ["S3Download", "S3Upload", "LambdaCreate", "LambdaDelete" , "LambdaInvoke", "LambdaList", "StepActivate"]

[pages.tasks.azure]
title = "Azure Tasks"
module = "prefect.tasks.azure"
classes = ["BlobStorageDownload",
           "BlobStorageUpload",
           "CosmosDBCreateItem",
           "CosmosDBReadItems",
           "CosmosDBQueryItems"]

[pages.tasks.azureml]
title = "Azure ML Service Tasks"
module = "prefect.tasks.azureml"
classes = ["DatasetCreateFromDelimitedFiles",
           "DatasetCreateFromParquetFiles",
           "DatasetCreateFromFiles",
           "DatastoreRegisterBlobContainer",
           "DatastoreList",
           "DatastoreGet",
           "DatastoreUpload"]

[pages.tasks.prefect]
title = "Prefect Tasks"
module = "prefect.tasks.prefect"
classes = ["FlowRunTask"]

[pages.tasks.github]
title = "GitHub Tasks"
module = "prefect.tasks.github"
classes = ["CreateGitHubPR", "OpenGitHubIssue", "GetRepoInfo", "CreateBranch"]

[pages.tasks.kubernetes]
title = "Kubernetes Tasks"
module = "prefect.tasks.kubernetes"
classes = [
        "CreateNamespacedDeployment",
        "DeleteNamespacedDeployment",
        "ListNamespacedDeployment",
        "PatchNamespacedDeployment",
        "ReadNamespacedDeployment",
        "ReplaceNamespacedDeployment",
        "CreateNamespacedJob",
        "DeleteNamespacedJob",
        "ListNamespacedJob",
        "PatchNamespacedJob",
        "ReadNamespacedJob",
        "ReplaceNamespacedJob",
        "CreateNamespacedPod",
        "DeleteNamespacedPod",
        "ListNamespacedPod",
        "PatchNamespacedPod",
        "ReadNamespacedPod",
        "ReplaceNamespacedPod",
        "CreateNamespacedService",
        "DeleteNamespacedService",
        "ListNamespacedService",
        "PatchNamespacedService",
        "ReadNamespacedService",
        "ReplaceNamespacedService"
        ]

[pages.tasks.dbt]
title = "DBT Tasks"
module = "prefect.tasks.dbt"
classes = ["DbtShellTask"]

[pages.tasks.docker]
title = "Docker Tasks"
module = "prefect.tasks.docker"
classes = [
        "BuildImage",
        "ListImages",
        "PullImage",
        "PushImage",
        "RemoveImage",
        "TagImage",
        "CreateContainer",
        "GetContainerLogs",
        "ListContainers",
        "StartContainer",
        "StopContainer",
        "RemoveContainer",
        "WaitOnContainer"
        ]

[pages.tasks.dropbox]
title = "Dropbox Tasks"
module = "prefect.tasks.dropbox"
classes = ["DropboxDownload"]

[pages.tasks.gcp]
title = "Google Cloud Tasks"
module = "prefect.tasks.gcp"
classes = [
        "GCSDownload",
        "GCSUpload",
        "GCSCopy",
        "BigQueryTask",
        "BigQueryLoadGoogleCloudStorage",
        "BigQueryStreamingInsert",
        "CreateBigQueryTable"
        ]
 
[pages.tasks.great_expectations]
title = "Great Expectations Task"
module = "prefect.tasks.great_expectations"
classes = [
        "RunGreatExpectationsCheckpoint",
        ]

[pages.tasks.gsheets]
title = "Google Sheets Tasks"
module = "prefect.tasks.gsheets"
classes = [
        "WriteGsheetRow",
        "ReadGsheetRow",
        ]

[pages.tasks.jira]
title = "Jira Tasks"
module = "prefect.tasks.jira"
classes = ["JiraTask", "JiraServiceDeskTask"]

[pages.tasks.notifications]
title = "Notification Tasks"
module = "prefect.tasks.notifications"
classes = ["EmailTask", "SlackTask", "PushbulletTask"]

[pages.tasks.postgres]
title = "Postgres Tasks"
module = "prefect.tasks.postgres"
classes = ["PostgresExecute", "PostgresFetch"]

[pages.tasks.redis]
title = "Redis Tasks"
module = "prefect.tasks.redis"
classes = ["RedisSet", "RedisGet", "RedisExecute"]

[pages.tasks.rss]
title = "RSS Tasks"
module = "prefect.tasks.rss"
classes = ["ParseRSSFeed"]

[pages.tasks.secrets]
title = "Secret Tasks"
module = "prefect.tasks.secrets"
classes = ["SecretBase", "PrefectSecret", "EnvVarSecret"]

[pages.tasks.snowflake]
title = "Snowflake Tasks"
module = "prefect.tasks.snowflake"
classes = ["SnowflakeQuery"]

[pages.tasks.spacy]
title = "spaCy Tasks"
module = "prefect.tasks.spacy"
classes = ["SpacyNLP", "SpacyTagger", "SpacyParser", "SpacyNER", "SpacyComponent"]

[pages.tasks.sqlite]
title = "SQLite Tasks"
module = "prefect.tasks.database"
classes = ["SQLiteQuery", "SQLiteScript"]

[pages.tasks.function]
title = "Function Tasks"
module = "prefect.tasks.core.function"
classes = ["FunctionTask"]

[pages.tasks.collections]
title = "Collection Tasks"
module = "prefect.tasks.core.collections"
classes = ["List", "Tuple", "Set", "Dict"]

[pages.tasks.operators]
title = "Operator Tasks"
module = "prefect.tasks.core.operators"
classes = [
    "GetItem",
    "Add",
    "Sub",
    "Mul",
    "Div",
    "FloorDiv",
    "Pow",
    "Mod",
    "And",
    "Or",
    "Not",
    "Equal",
    "NotEqual",
    "GreaterThanOrEqual",
    "GreaterThan",
    "LessThanOrEqual",
    "LessThan"
    ]
[pages.tasks.constants]
title = "Constant Tasks"
module = "prefect.tasks.core.constants"
classes = ["Constant"]

[pages.tasks.shell]
title = "Shell Tasks"
module = "prefect.tasks.shell"
classes = ["ShellTask"]

[pages.tasks.strings]
title = "String Templating Tasks"
module = "prefect.tasks.templates"
classes = ["StringFormatter", "JinjaTemplate"]

[pages.tasks.twitter]
title = "Twitter Tasks"
module = "prefect.tasks.twitter"
classes = ["LoadTweetReplies"]

[pages.agent.agent]
title = "Agent"
module = "prefect.agent"
classes = ["Agent"]

[pages.agent.local]
title = "Local Agent"
module = "prefect.agent.local"
classes = ["LocalAgent"]

[pages.agent.docker]
title = "Docker Agent"
module = "prefect.agent.docker"
classes = ["DockerAgent"]

[pages.agent.kubernetes]
title = "Kubernetes Agent"
module = "prefect.agent.kubernetes"
classes = ["KubernetesAgent"]

[pages.agent.fargate]
title = "Fargate Agent"
module = "prefect.agent.fargate"
classes = ["FargateAgent"]

[pages.utilities.collections]
title = "Collections"
module = "prefect.utilities.collections"
classes = ["DotDict"]
functions = ["merge_dicts", "as_nested_dict", "dict_to_flatdict", "flatdict_to_dict"]

[pages.utilities.configuration]
title = "Configuration"
module = "prefect.utilities.configuration"
functions = ["set_temporary_config"]

[pages.utilities.context]
title = "Context"
module = "prefect.utilities.context"
classes = ["Context"]

[pages.utilities.debug]
title = "Debugging Tools"
module = "prefect.utilities.debug"
functions = ["is_serializable", "raise_on_exception"]

[pages.utilities.diagnostics]
title = "Diagnostics"
module = "prefect.utilities.diagnostics"
functions = ["diagnostic_info", "flow_information", "system_information", "config_overrides", "environment_variables"]

[pages.utilities.executors]
title = "Executors"
module = "prefect.utilities.executors"
functions = ["timeout_handler"]

[pages.utilities.gcp]
title = "Google Utilities"
module = "prefect.utilities.gcp"
functions = ["get_storage_client", "get_bigquery_client"]

[pages.utilities.graphql]
title = "GraphQL"
module = "prefect.utilities.graphql"
classes = ["EnumValue"]
functions = ["parse_graphql", "parse_graphql_arguments", "with_args", "compress", "decompress"]

[pages.utilities.logging]
title = "Logging"
module = "prefect.utilities.logging"
functions = ["configure_logging", "get_logger"]

[pages.utilities.notifications]
title = "Notifications and Callback Tools"
module = "prefect.utilities.notifications"
functions = ["callback_factory", "slack_notifier", "gmail_notifier", "jira_notification.jira_notifier"]

[pages.utilities.serialization]
title = "Serialization"
module = "prefect.utilities.serialization"
classes = ["JSONCompatible", "Nested", "Bytes", "UUID", "FunctionReference"]
functions = ["to_qualified_name", "from_qualified_name"]

[pages.utilities.tasks]
title = "Task Utilities"
module = "prefect.utilities.tasks"
classes = ["unmapped"]
functions = ["tags", "as_task", "pause_task", "task", "defaults_from_attrs"]
