/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as VariablesRouteImport } from './routes/variables'
import { Route as SettingsRouteImport } from './routes/settings'
import { Route as EventsRouteImport } from './routes/events'
import { Route as DashboardRouteImport } from './routes/dashboard'
import { Route as IndexRouteImport } from './routes/index'
import { Route as WorkPoolsIndexRouteImport } from './routes/work-pools/index'
import { Route as RunsIndexRouteImport } from './routes/runs/index'
import { Route as FlowsIndexRouteImport } from './routes/flows/index'
import { Route as DeploymentsIndexRouteImport } from './routes/deployments/index'
import { Route as ConcurrencyLimitsIndexRouteImport } from './routes/concurrency-limits/index'
import { Route as BlocksIndexRouteImport } from './routes/blocks/index'
import { Route as AutomationsIndexRouteImport } from './routes/automations/index'
import { Route as ArtifactsIndexRouteImport } from './routes/artifacts/index'
import { Route as WorkPoolsCreateRouteImport } from './routes/work-pools/create'
import { Route as BlocksCatalogRouteImport } from './routes/blocks/catalog'
import { Route as AutomationsCreateRouteImport } from './routes/automations/create'
import { Route as WorkPoolsWorkPoolWorkPoolNameRouteImport } from './routes/work-pools/work-pool.$workPoolName'
import { Route as RunsTaskRunIdRouteImport } from './routes/runs/task-run.$id'
import { Route as RunsFlowRunIdRouteImport } from './routes/runs/flow-run.$id'
import { Route as FlowsFlowIdRouteImport } from './routes/flows/flow.$id'
import { Route as DeploymentsDeploymentIdRouteImport } from './routes/deployments/deployment.$id'
import { Route as ConcurrencyLimitsConcurrencyLimitIdRouteImport } from './routes/concurrency-limits/concurrency-limit.$id'
import { Route as BlocksCatalogSlugRouteImport } from './routes/blocks/catalog_.$slug'
import { Route as BlocksBlockIdRouteImport } from './routes/blocks/block.$id'
import { Route as AutomationsAutomationIdRouteImport } from './routes/automations/automation.$id'
import { Route as ArtifactsKeyKeyRouteImport } from './routes/artifacts/key.$key'
import { Route as ArtifactsArtifactIdRouteImport } from './routes/artifacts/artifact.$id'
import { Route as WorkPoolsWorkPoolWorkPoolNameEditRouteImport } from './routes/work-pools/work-pool_.$workPoolName.edit'
import { Route as DeploymentsDeploymentIdRunRouteImport } from './routes/deployments/deployment_.$id.run'
import { Route as DeploymentsDeploymentIdEditRouteImport } from './routes/deployments/deployment_.$id.edit'
import { Route as DeploymentsDeploymentIdDuplicateRouteImport } from './routes/deployments/deployment_.$id.duplicate'
import { Route as BlocksCatalogSlugCreateRouteImport } from './routes/blocks/catalog_.$slug_.create'
import { Route as BlocksBlockIdEditRouteImport } from './routes/blocks/block_.$id.edit'
import { Route as AutomationsAutomationIdEditRouteImport } from './routes/automations/automation.$id.edit'
import { Route as WorkPoolsWorkPoolWorkPoolNameQueueWorkQueueNameRouteImport } from './routes/work-pools/work-pool.$workPoolName.queue.$workQueueName'

const VariablesRoute = VariablesRouteImport.update({
  id: '/variables',
  path: '/variables',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsRoute = SettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRouteImport,
} as any)
const EventsRoute = EventsRouteImport.update({
  id: '/events',
  path: '/events',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const WorkPoolsIndexRoute = WorkPoolsIndexRouteImport.update({
  id: '/work-pools/',
  path: '/work-pools/',
  getParentRoute: () => rootRouteImport,
} as any)
const RunsIndexRoute = RunsIndexRouteImport.update({
  id: '/runs/',
  path: '/runs/',
  getParentRoute: () => rootRouteImport,
} as any)
const FlowsIndexRoute = FlowsIndexRouteImport.update({
  id: '/flows/',
  path: '/flows/',
  getParentRoute: () => rootRouteImport,
} as any)
const DeploymentsIndexRoute = DeploymentsIndexRouteImport.update({
  id: '/deployments/',
  path: '/deployments/',
  getParentRoute: () => rootRouteImport,
} as any)
const ConcurrencyLimitsIndexRoute = ConcurrencyLimitsIndexRouteImport.update({
  id: '/concurrency-limits/',
  path: '/concurrency-limits/',
  getParentRoute: () => rootRouteImport,
} as any)
const BlocksIndexRoute = BlocksIndexRouteImport.update({
  id: '/blocks/',
  path: '/blocks/',
  getParentRoute: () => rootRouteImport,
} as any)
const AutomationsIndexRoute = AutomationsIndexRouteImport.update({
  id: '/automations/',
  path: '/automations/',
  getParentRoute: () => rootRouteImport,
} as any)
const ArtifactsIndexRoute = ArtifactsIndexRouteImport.update({
  id: '/artifacts/',
  path: '/artifacts/',
  getParentRoute: () => rootRouteImport,
} as any)
const WorkPoolsCreateRoute = WorkPoolsCreateRouteImport.update({
  id: '/work-pools/create',
  path: '/work-pools/create',
  getParentRoute: () => rootRouteImport,
} as any)
const BlocksCatalogRoute = BlocksCatalogRouteImport.update({
  id: '/blocks/catalog',
  path: '/blocks/catalog',
  getParentRoute: () => rootRouteImport,
} as any)
const AutomationsCreateRoute = AutomationsCreateRouteImport.update({
  id: '/automations/create',
  path: '/automations/create',
  getParentRoute: () => rootRouteImport,
} as any)
const WorkPoolsWorkPoolWorkPoolNameRoute =
  WorkPoolsWorkPoolWorkPoolNameRouteImport.update({
    id: '/work-pools/work-pool/$workPoolName',
    path: '/work-pools/work-pool/$workPoolName',
    getParentRoute: () => rootRouteImport,
  } as any)
const RunsTaskRunIdRoute = RunsTaskRunIdRouteImport.update({
  id: '/runs/task-run/$id',
  path: '/runs/task-run/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const RunsFlowRunIdRoute = RunsFlowRunIdRouteImport.update({
  id: '/runs/flow-run/$id',
  path: '/runs/flow-run/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const FlowsFlowIdRoute = FlowsFlowIdRouteImport.update({
  id: '/flows/flow/$id',
  path: '/flows/flow/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const DeploymentsDeploymentIdRoute = DeploymentsDeploymentIdRouteImport.update({
  id: '/deployments/deployment/$id',
  path: '/deployments/deployment/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const ConcurrencyLimitsConcurrencyLimitIdRoute =
  ConcurrencyLimitsConcurrencyLimitIdRouteImport.update({
    id: '/concurrency-limits/concurrency-limit/$id',
    path: '/concurrency-limits/concurrency-limit/$id',
    getParentRoute: () => rootRouteImport,
  } as any)
const BlocksCatalogSlugRoute = BlocksCatalogSlugRouteImport.update({
  id: '/blocks/catalog_/$slug',
  path: '/blocks/catalog/$slug',
  getParentRoute: () => rootRouteImport,
} as any)
const BlocksBlockIdRoute = BlocksBlockIdRouteImport.update({
  id: '/blocks/block/$id',
  path: '/blocks/block/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const AutomationsAutomationIdRoute = AutomationsAutomationIdRouteImport.update({
  id: '/automations/automation/$id',
  path: '/automations/automation/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const ArtifactsKeyKeyRoute = ArtifactsKeyKeyRouteImport.update({
  id: '/artifacts/key/$key',
  path: '/artifacts/key/$key',
  getParentRoute: () => rootRouteImport,
} as any)
const ArtifactsArtifactIdRoute = ArtifactsArtifactIdRouteImport.update({
  id: '/artifacts/artifact/$id',
  path: '/artifacts/artifact/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const WorkPoolsWorkPoolWorkPoolNameEditRoute =
  WorkPoolsWorkPoolWorkPoolNameEditRouteImport.update({
    id: '/work-pools/work-pool_/$workPoolName/edit',
    path: '/work-pools/work-pool/$workPoolName/edit',
    getParentRoute: () => rootRouteImport,
  } as any)
const DeploymentsDeploymentIdRunRoute =
  DeploymentsDeploymentIdRunRouteImport.update({
    id: '/deployments/deployment_/$id/run',
    path: '/deployments/deployment/$id/run',
    getParentRoute: () => rootRouteImport,
  } as any)
const DeploymentsDeploymentIdEditRoute =
  DeploymentsDeploymentIdEditRouteImport.update({
    id: '/deployments/deployment_/$id/edit',
    path: '/deployments/deployment/$id/edit',
    getParentRoute: () => rootRouteImport,
  } as any)
const DeploymentsDeploymentIdDuplicateRoute =
  DeploymentsDeploymentIdDuplicateRouteImport.update({
    id: '/deployments/deployment_/$id/duplicate',
    path: '/deployments/deployment/$id/duplicate',
    getParentRoute: () => rootRouteImport,
  } as any)
const BlocksCatalogSlugCreateRoute = BlocksCatalogSlugCreateRouteImport.update({
  id: '/blocks/catalog_/$slug_/create',
  path: '/blocks/catalog/$slug/create',
  getParentRoute: () => rootRouteImport,
} as any)
const BlocksBlockIdEditRoute = BlocksBlockIdEditRouteImport.update({
  id: '/blocks/block_/$id/edit',
  path: '/blocks/block/$id/edit',
  getParentRoute: () => rootRouteImport,
} as any)
const AutomationsAutomationIdEditRoute =
  AutomationsAutomationIdEditRouteImport.update({
    id: '/edit',
    path: '/edit',
    getParentRoute: () => AutomationsAutomationIdRoute,
  } as any)
const WorkPoolsWorkPoolWorkPoolNameQueueWorkQueueNameRoute =
  WorkPoolsWorkPoolWorkPoolNameQueueWorkQueueNameRouteImport.update({
    id: '/queue/$workQueueName',
    path: '/queue/$workQueueName',
    getParentRoute: () => WorkPoolsWorkPoolWorkPoolNameRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/events': typeof EventsRoute
  '/settings': typeof SettingsRoute
  '/variables': typeof VariablesRoute
  '/automations/create': typeof AutomationsCreateRoute
  '/blocks/catalog': typeof BlocksCatalogRoute
  '/work-pools/create': typeof WorkPoolsCreateRoute
  '/artifacts': typeof ArtifactsIndexRoute
  '/automations': typeof AutomationsIndexRoute
  '/blocks': typeof BlocksIndexRoute
  '/concurrency-limits': typeof ConcurrencyLimitsIndexRoute
  '/deployments': typeof DeploymentsIndexRoute
  '/flows': typeof FlowsIndexRoute
  '/runs': typeof RunsIndexRoute
  '/work-pools': typeof WorkPoolsIndexRoute
  '/artifacts/artifact/$id': typeof ArtifactsArtifactIdRoute
  '/artifacts/key/$key': typeof ArtifactsKeyKeyRoute
  '/automations/automation/$id': typeof AutomationsAutomationIdRouteWithChildren
  '/blocks/block/$id': typeof BlocksBlockIdRoute
  '/blocks/catalog/$slug': typeof BlocksCatalogSlugRoute
  '/concurrency-limits/concurrency-limit/$id': typeof ConcurrencyLimitsConcurrencyLimitIdRoute
  '/deployments/deployment/$id': typeof DeploymentsDeploymentIdRoute
  '/flows/flow/$id': typeof FlowsFlowIdRoute
  '/runs/flow-run/$id': typeof RunsFlowRunIdRoute
  '/runs/task-run/$id': typeof RunsTaskRunIdRoute
  '/work-pools/work-pool/$workPoolName': typeof WorkPoolsWorkPoolWorkPoolNameRouteWithChildren
  '/automations/automation/$id/edit': typeof AutomationsAutomationIdEditRoute
  '/blocks/block/$id/edit': typeof BlocksBlockIdEditRoute
  '/blocks/catalog/$slug/create': typeof BlocksCatalogSlugCreateRoute
  '/deployments/deployment/$id/duplicate': typeof DeploymentsDeploymentIdDuplicateRoute
  '/deployments/deployment/$id/edit': typeof DeploymentsDeploymentIdEditRoute
  '/deployments/deployment/$id/run': typeof DeploymentsDeploymentIdRunRoute
  '/work-pools/work-pool/$workPoolName/edit': typeof WorkPoolsWorkPoolWorkPoolNameEditRoute
  '/work-pools/work-pool/$workPoolName/queue/$workQueueName': typeof WorkPoolsWorkPoolWorkPoolNameQueueWorkQueueNameRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/events': typeof EventsRoute
  '/settings': typeof SettingsRoute
  '/variables': typeof VariablesRoute
  '/automations/create': typeof AutomationsCreateRoute
  '/blocks/catalog': typeof BlocksCatalogRoute
  '/work-pools/create': typeof WorkPoolsCreateRoute
  '/artifacts': typeof ArtifactsIndexRoute
  '/automations': typeof AutomationsIndexRoute
  '/blocks': typeof BlocksIndexRoute
  '/concurrency-limits': typeof ConcurrencyLimitsIndexRoute
  '/deployments': typeof DeploymentsIndexRoute
  '/flows': typeof FlowsIndexRoute
  '/runs': typeof RunsIndexRoute
  '/work-pools': typeof WorkPoolsIndexRoute
  '/artifacts/artifact/$id': typeof ArtifactsArtifactIdRoute
  '/artifacts/key/$key': typeof ArtifactsKeyKeyRoute
  '/automations/automation/$id': typeof AutomationsAutomationIdRouteWithChildren
  '/blocks/block/$id': typeof BlocksBlockIdRoute
  '/blocks/catalog/$slug': typeof BlocksCatalogSlugRoute
  '/concurrency-limits/concurrency-limit/$id': typeof ConcurrencyLimitsConcurrencyLimitIdRoute
  '/deployments/deployment/$id': typeof DeploymentsDeploymentIdRoute
  '/flows/flow/$id': typeof FlowsFlowIdRoute
  '/runs/flow-run/$id': typeof RunsFlowRunIdRoute
  '/runs/task-run/$id': typeof RunsTaskRunIdRoute
  '/work-pools/work-pool/$workPoolName': typeof WorkPoolsWorkPoolWorkPoolNameRouteWithChildren
  '/automations/automation/$id/edit': typeof AutomationsAutomationIdEditRoute
  '/blocks/block/$id/edit': typeof BlocksBlockIdEditRoute
  '/blocks/catalog/$slug/create': typeof BlocksCatalogSlugCreateRoute
  '/deployments/deployment/$id/duplicate': typeof DeploymentsDeploymentIdDuplicateRoute
  '/deployments/deployment/$id/edit': typeof DeploymentsDeploymentIdEditRoute
  '/deployments/deployment/$id/run': typeof DeploymentsDeploymentIdRunRoute
  '/work-pools/work-pool/$workPoolName/edit': typeof WorkPoolsWorkPoolWorkPoolNameEditRoute
  '/work-pools/work-pool/$workPoolName/queue/$workQueueName': typeof WorkPoolsWorkPoolWorkPoolNameQueueWorkQueueNameRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/events': typeof EventsRoute
  '/settings': typeof SettingsRoute
  '/variables': typeof VariablesRoute
  '/automations/create': typeof AutomationsCreateRoute
  '/blocks/catalog': typeof BlocksCatalogRoute
  '/work-pools/create': typeof WorkPoolsCreateRoute
  '/artifacts/': typeof ArtifactsIndexRoute
  '/automations/': typeof AutomationsIndexRoute
  '/blocks/': typeof BlocksIndexRoute
  '/concurrency-limits/': typeof ConcurrencyLimitsIndexRoute
  '/deployments/': typeof DeploymentsIndexRoute
  '/flows/': typeof FlowsIndexRoute
  '/runs/': typeof RunsIndexRoute
  '/work-pools/': typeof WorkPoolsIndexRoute
  '/artifacts/artifact/$id': typeof ArtifactsArtifactIdRoute
  '/artifacts/key/$key': typeof ArtifactsKeyKeyRoute
  '/automations/automation/$id': typeof AutomationsAutomationIdRouteWithChildren
  '/blocks/block/$id': typeof BlocksBlockIdRoute
  '/blocks/catalog_/$slug': typeof BlocksCatalogSlugRoute
  '/concurrency-limits/concurrency-limit/$id': typeof ConcurrencyLimitsConcurrencyLimitIdRoute
  '/deployments/deployment/$id': typeof DeploymentsDeploymentIdRoute
  '/flows/flow/$id': typeof FlowsFlowIdRoute
  '/runs/flow-run/$id': typeof RunsFlowRunIdRoute
  '/runs/task-run/$id': typeof RunsTaskRunIdRoute
  '/work-pools/work-pool/$workPoolName': typeof WorkPoolsWorkPoolWorkPoolNameRouteWithChildren
  '/automations/automation/$id/edit': typeof AutomationsAutomationIdEditRoute
  '/blocks/block_/$id/edit': typeof BlocksBlockIdEditRoute
  '/blocks/catalog_/$slug_/create': typeof BlocksCatalogSlugCreateRoute
  '/deployments/deployment_/$id/duplicate': typeof DeploymentsDeploymentIdDuplicateRoute
  '/deployments/deployment_/$id/edit': typeof DeploymentsDeploymentIdEditRoute
  '/deployments/deployment_/$id/run': typeof DeploymentsDeploymentIdRunRoute
  '/work-pools/work-pool_/$workPoolName/edit': typeof WorkPoolsWorkPoolWorkPoolNameEditRoute
  '/work-pools/work-pool/$workPoolName/queue/$workQueueName': typeof WorkPoolsWorkPoolWorkPoolNameQueueWorkQueueNameRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/events'
    | '/settings'
    | '/variables'
    | '/automations/create'
    | '/blocks/catalog'
    | '/work-pools/create'
    | '/artifacts'
    | '/automations'
    | '/blocks'
    | '/concurrency-limits'
    | '/deployments'
    | '/flows'
    | '/runs'
    | '/work-pools'
    | '/artifacts/artifact/$id'
    | '/artifacts/key/$key'
    | '/automations/automation/$id'
    | '/blocks/block/$id'
    | '/blocks/catalog/$slug'
    | '/concurrency-limits/concurrency-limit/$id'
    | '/deployments/deployment/$id'
    | '/flows/flow/$id'
    | '/runs/flow-run/$id'
    | '/runs/task-run/$id'
    | '/work-pools/work-pool/$workPoolName'
    | '/automations/automation/$id/edit'
    | '/blocks/block/$id/edit'
    | '/blocks/catalog/$slug/create'
    | '/deployments/deployment/$id/duplicate'
    | '/deployments/deployment/$id/edit'
    | '/deployments/deployment/$id/run'
    | '/work-pools/work-pool/$workPoolName/edit'
    | '/work-pools/work-pool/$workPoolName/queue/$workQueueName'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/dashboard'
    | '/events'
    | '/settings'
    | '/variables'
    | '/automations/create'
    | '/blocks/catalog'
    | '/work-pools/create'
    | '/artifacts'
    | '/automations'
    | '/blocks'
    | '/concurrency-limits'
    | '/deployments'
    | '/flows'
    | '/runs'
    | '/work-pools'
    | '/artifacts/artifact/$id'
    | '/artifacts/key/$key'
    | '/automations/automation/$id'
    | '/blocks/block/$id'
    | '/blocks/catalog/$slug'
    | '/concurrency-limits/concurrency-limit/$id'
    | '/deployments/deployment/$id'
    | '/flows/flow/$id'
    | '/runs/flow-run/$id'
    | '/runs/task-run/$id'
    | '/work-pools/work-pool/$workPoolName'
    | '/automations/automation/$id/edit'
    | '/blocks/block/$id/edit'
    | '/blocks/catalog/$slug/create'
    | '/deployments/deployment/$id/duplicate'
    | '/deployments/deployment/$id/edit'
    | '/deployments/deployment/$id/run'
    | '/work-pools/work-pool/$workPoolName/edit'
    | '/work-pools/work-pool/$workPoolName/queue/$workQueueName'
  id:
    | '__root__'
    | '/'
    | '/dashboard'
    | '/events'
    | '/settings'
    | '/variables'
    | '/automations/create'
    | '/blocks/catalog'
    | '/work-pools/create'
    | '/artifacts/'
    | '/automations/'
    | '/blocks/'
    | '/concurrency-limits/'
    | '/deployments/'
    | '/flows/'
    | '/runs/'
    | '/work-pools/'
    | '/artifacts/artifact/$id'
    | '/artifacts/key/$key'
    | '/automations/automation/$id'
    | '/blocks/block/$id'
    | '/blocks/catalog_/$slug'
    | '/concurrency-limits/concurrency-limit/$id'
    | '/deployments/deployment/$id'
    | '/flows/flow/$id'
    | '/runs/flow-run/$id'
    | '/runs/task-run/$id'
    | '/work-pools/work-pool/$workPoolName'
    | '/automations/automation/$id/edit'
    | '/blocks/block_/$id/edit'
    | '/blocks/catalog_/$slug_/create'
    | '/deployments/deployment_/$id/duplicate'
    | '/deployments/deployment_/$id/edit'
    | '/deployments/deployment_/$id/run'
    | '/work-pools/work-pool_/$workPoolName/edit'
    | '/work-pools/work-pool/$workPoolName/queue/$workQueueName'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DashboardRoute: typeof DashboardRoute
  EventsRoute: typeof EventsRoute
  SettingsRoute: typeof SettingsRoute
  VariablesRoute: typeof VariablesRoute
  AutomationsCreateRoute: typeof AutomationsCreateRoute
  BlocksCatalogRoute: typeof BlocksCatalogRoute
  WorkPoolsCreateRoute: typeof WorkPoolsCreateRoute
  ArtifactsIndexRoute: typeof ArtifactsIndexRoute
  AutomationsIndexRoute: typeof AutomationsIndexRoute
  BlocksIndexRoute: typeof BlocksIndexRoute
  ConcurrencyLimitsIndexRoute: typeof ConcurrencyLimitsIndexRoute
  DeploymentsIndexRoute: typeof DeploymentsIndexRoute
  FlowsIndexRoute: typeof FlowsIndexRoute
  RunsIndexRoute: typeof RunsIndexRoute
  WorkPoolsIndexRoute: typeof WorkPoolsIndexRoute
  ArtifactsArtifactIdRoute: typeof ArtifactsArtifactIdRoute
  ArtifactsKeyKeyRoute: typeof ArtifactsKeyKeyRoute
  AutomationsAutomationIdRoute: typeof AutomationsAutomationIdRouteWithChildren
  BlocksBlockIdRoute: typeof BlocksBlockIdRoute
  BlocksCatalogSlugRoute: typeof BlocksCatalogSlugRoute
  ConcurrencyLimitsConcurrencyLimitIdRoute: typeof ConcurrencyLimitsConcurrencyLimitIdRoute
  DeploymentsDeploymentIdRoute: typeof DeploymentsDeploymentIdRoute
  FlowsFlowIdRoute: typeof FlowsFlowIdRoute
  RunsFlowRunIdRoute: typeof RunsFlowRunIdRoute
  RunsTaskRunIdRoute: typeof RunsTaskRunIdRoute
  WorkPoolsWorkPoolWorkPoolNameRoute: typeof WorkPoolsWorkPoolWorkPoolNameRouteWithChildren
  BlocksBlockIdEditRoute: typeof BlocksBlockIdEditRoute
  BlocksCatalogSlugCreateRoute: typeof BlocksCatalogSlugCreateRoute
  DeploymentsDeploymentIdDuplicateRoute: typeof DeploymentsDeploymentIdDuplicateRoute
  DeploymentsDeploymentIdEditRoute: typeof DeploymentsDeploymentIdEditRoute
  DeploymentsDeploymentIdRunRoute: typeof DeploymentsDeploymentIdRunRoute
  WorkPoolsWorkPoolWorkPoolNameEditRoute: typeof WorkPoolsWorkPoolWorkPoolNameEditRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/variables': {
      id: '/variables'
      path: '/variables'
      fullPath: '/variables'
      preLoaderRoute: typeof VariablesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/events': {
      id: '/events'
      path: '/events'
      fullPath: '/events'
      preLoaderRoute: typeof EventsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/work-pools/': {
      id: '/work-pools/'
      path: '/work-pools'
      fullPath: '/work-pools'
      preLoaderRoute: typeof WorkPoolsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/runs/': {
      id: '/runs/'
      path: '/runs'
      fullPath: '/runs'
      preLoaderRoute: typeof RunsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/flows/': {
      id: '/flows/'
      path: '/flows'
      fullPath: '/flows'
      preLoaderRoute: typeof FlowsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/deployments/': {
      id: '/deployments/'
      path: '/deployments'
      fullPath: '/deployments'
      preLoaderRoute: typeof DeploymentsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/concurrency-limits/': {
      id: '/concurrency-limits/'
      path: '/concurrency-limits'
      fullPath: '/concurrency-limits'
      preLoaderRoute: typeof ConcurrencyLimitsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/blocks/': {
      id: '/blocks/'
      path: '/blocks'
      fullPath: '/blocks'
      preLoaderRoute: typeof BlocksIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/automations/': {
      id: '/automations/'
      path: '/automations'
      fullPath: '/automations'
      preLoaderRoute: typeof AutomationsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/artifacts/': {
      id: '/artifacts/'
      path: '/artifacts'
      fullPath: '/artifacts'
      preLoaderRoute: typeof ArtifactsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/work-pools/create': {
      id: '/work-pools/create'
      path: '/work-pools/create'
      fullPath: '/work-pools/create'
      preLoaderRoute: typeof WorkPoolsCreateRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/blocks/catalog': {
      id: '/blocks/catalog'
      path: '/blocks/catalog'
      fullPath: '/blocks/catalog'
      preLoaderRoute: typeof BlocksCatalogRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/automations/create': {
      id: '/automations/create'
      path: '/automations/create'
      fullPath: '/automations/create'
      preLoaderRoute: typeof AutomationsCreateRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/work-pools/work-pool/$workPoolName': {
      id: '/work-pools/work-pool/$workPoolName'
      path: '/work-pools/work-pool/$workPoolName'
      fullPath: '/work-pools/work-pool/$workPoolName'
      preLoaderRoute: typeof WorkPoolsWorkPoolWorkPoolNameRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/runs/task-run/$id': {
      id: '/runs/task-run/$id'
      path: '/runs/task-run/$id'
      fullPath: '/runs/task-run/$id'
      preLoaderRoute: typeof RunsTaskRunIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/runs/flow-run/$id': {
      id: '/runs/flow-run/$id'
      path: '/runs/flow-run/$id'
      fullPath: '/runs/flow-run/$id'
      preLoaderRoute: typeof RunsFlowRunIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/flows/flow/$id': {
      id: '/flows/flow/$id'
      path: '/flows/flow/$id'
      fullPath: '/flows/flow/$id'
      preLoaderRoute: typeof FlowsFlowIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/deployments/deployment/$id': {
      id: '/deployments/deployment/$id'
      path: '/deployments/deployment/$id'
      fullPath: '/deployments/deployment/$id'
      preLoaderRoute: typeof DeploymentsDeploymentIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/concurrency-limits/concurrency-limit/$id': {
      id: '/concurrency-limits/concurrency-limit/$id'
      path: '/concurrency-limits/concurrency-limit/$id'
      fullPath: '/concurrency-limits/concurrency-limit/$id'
      preLoaderRoute: typeof ConcurrencyLimitsConcurrencyLimitIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/blocks/catalog_/$slug': {
      id: '/blocks/catalog_/$slug'
      path: '/blocks/catalog/$slug'
      fullPath: '/blocks/catalog/$slug'
      preLoaderRoute: typeof BlocksCatalogSlugRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/blocks/block/$id': {
      id: '/blocks/block/$id'
      path: '/blocks/block/$id'
      fullPath: '/blocks/block/$id'
      preLoaderRoute: typeof BlocksBlockIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/automations/automation/$id': {
      id: '/automations/automation/$id'
      path: '/automations/automation/$id'
      fullPath: '/automations/automation/$id'
      preLoaderRoute: typeof AutomationsAutomationIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/artifacts/key/$key': {
      id: '/artifacts/key/$key'
      path: '/artifacts/key/$key'
      fullPath: '/artifacts/key/$key'
      preLoaderRoute: typeof ArtifactsKeyKeyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/artifacts/artifact/$id': {
      id: '/artifacts/artifact/$id'
      path: '/artifacts/artifact/$id'
      fullPath: '/artifacts/artifact/$id'
      preLoaderRoute: typeof ArtifactsArtifactIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/work-pools/work-pool_/$workPoolName/edit': {
      id: '/work-pools/work-pool_/$workPoolName/edit'
      path: '/work-pools/work-pool/$workPoolName/edit'
      fullPath: '/work-pools/work-pool/$workPoolName/edit'
      preLoaderRoute: typeof WorkPoolsWorkPoolWorkPoolNameEditRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/deployments/deployment_/$id/run': {
      id: '/deployments/deployment_/$id/run'
      path: '/deployments/deployment/$id/run'
      fullPath: '/deployments/deployment/$id/run'
      preLoaderRoute: typeof DeploymentsDeploymentIdRunRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/deployments/deployment_/$id/edit': {
      id: '/deployments/deployment_/$id/edit'
      path: '/deployments/deployment/$id/edit'
      fullPath: '/deployments/deployment/$id/edit'
      preLoaderRoute: typeof DeploymentsDeploymentIdEditRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/deployments/deployment_/$id/duplicate': {
      id: '/deployments/deployment_/$id/duplicate'
      path: '/deployments/deployment/$id/duplicate'
      fullPath: '/deployments/deployment/$id/duplicate'
      preLoaderRoute: typeof DeploymentsDeploymentIdDuplicateRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/blocks/catalog_/$slug_/create': {
      id: '/blocks/catalog_/$slug_/create'
      path: '/blocks/catalog/$slug/create'
      fullPath: '/blocks/catalog/$slug/create'
      preLoaderRoute: typeof BlocksCatalogSlugCreateRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/blocks/block_/$id/edit': {
      id: '/blocks/block_/$id/edit'
      path: '/blocks/block/$id/edit'
      fullPath: '/blocks/block/$id/edit'
      preLoaderRoute: typeof BlocksBlockIdEditRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/automations/automation/$id/edit': {
      id: '/automations/automation/$id/edit'
      path: '/edit'
      fullPath: '/automations/automation/$id/edit'
      preLoaderRoute: typeof AutomationsAutomationIdEditRouteImport
      parentRoute: typeof AutomationsAutomationIdRoute
    }
    '/work-pools/work-pool/$workPoolName/queue/$workQueueName': {
      id: '/work-pools/work-pool/$workPoolName/queue/$workQueueName'
      path: '/queue/$workQueueName'
      fullPath: '/work-pools/work-pool/$workPoolName/queue/$workQueueName'
      preLoaderRoute: typeof WorkPoolsWorkPoolWorkPoolNameQueueWorkQueueNameRouteImport
      parentRoute: typeof WorkPoolsWorkPoolWorkPoolNameRoute
    }
  }
}

interface AutomationsAutomationIdRouteChildren {
  AutomationsAutomationIdEditRoute: typeof AutomationsAutomationIdEditRoute
}

const AutomationsAutomationIdRouteChildren: AutomationsAutomationIdRouteChildren =
  {
    AutomationsAutomationIdEditRoute: AutomationsAutomationIdEditRoute,
  }

const AutomationsAutomationIdRouteWithChildren =
  AutomationsAutomationIdRoute._addFileChildren(
    AutomationsAutomationIdRouteChildren,
  )

interface WorkPoolsWorkPoolWorkPoolNameRouteChildren {
  WorkPoolsWorkPoolWorkPoolNameQueueWorkQueueNameRoute: typeof WorkPoolsWorkPoolWorkPoolNameQueueWorkQueueNameRoute
}

const WorkPoolsWorkPoolWorkPoolNameRouteChildren: WorkPoolsWorkPoolWorkPoolNameRouteChildren =
  {
    WorkPoolsWorkPoolWorkPoolNameQueueWorkQueueNameRoute:
      WorkPoolsWorkPoolWorkPoolNameQueueWorkQueueNameRoute,
  }

const WorkPoolsWorkPoolWorkPoolNameRouteWithChildren =
  WorkPoolsWorkPoolWorkPoolNameRoute._addFileChildren(
    WorkPoolsWorkPoolWorkPoolNameRouteChildren,
  )

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DashboardRoute: DashboardRoute,
  EventsRoute: EventsRoute,
  SettingsRoute: SettingsRoute,
  VariablesRoute: VariablesRoute,
  AutomationsCreateRoute: AutomationsCreateRoute,
  BlocksCatalogRoute: BlocksCatalogRoute,
  WorkPoolsCreateRoute: WorkPoolsCreateRoute,
  ArtifactsIndexRoute: ArtifactsIndexRoute,
  AutomationsIndexRoute: AutomationsIndexRoute,
  BlocksIndexRoute: BlocksIndexRoute,
  ConcurrencyLimitsIndexRoute: ConcurrencyLimitsIndexRoute,
  DeploymentsIndexRoute: DeploymentsIndexRoute,
  FlowsIndexRoute: FlowsIndexRoute,
  RunsIndexRoute: RunsIndexRoute,
  WorkPoolsIndexRoute: WorkPoolsIndexRoute,
  ArtifactsArtifactIdRoute: ArtifactsArtifactIdRoute,
  ArtifactsKeyKeyRoute: ArtifactsKeyKeyRoute,
  AutomationsAutomationIdRoute: AutomationsAutomationIdRouteWithChildren,
  BlocksBlockIdRoute: BlocksBlockIdRoute,
  BlocksCatalogSlugRoute: BlocksCatalogSlugRoute,
  ConcurrencyLimitsConcurrencyLimitIdRoute:
    ConcurrencyLimitsConcurrencyLimitIdRoute,
  DeploymentsDeploymentIdRoute: DeploymentsDeploymentIdRoute,
  FlowsFlowIdRoute: FlowsFlowIdRoute,
  RunsFlowRunIdRoute: RunsFlowRunIdRoute,
  RunsTaskRunIdRoute: RunsTaskRunIdRoute,
  WorkPoolsWorkPoolWorkPoolNameRoute:
    WorkPoolsWorkPoolWorkPoolNameRouteWithChildren,
  BlocksBlockIdEditRoute: BlocksBlockIdEditRoute,
  BlocksCatalogSlugCreateRoute: BlocksCatalogSlugCreateRoute,
  DeploymentsDeploymentIdDuplicateRoute: DeploymentsDeploymentIdDuplicateRoute,
  DeploymentsDeploymentIdEditRoute: DeploymentsDeploymentIdEditRoute,
  DeploymentsDeploymentIdRunRoute: DeploymentsDeploymentIdRunRoute,
  WorkPoolsWorkPoolWorkPoolNameEditRoute:
    WorkPoolsWorkPoolWorkPoolNameEditRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
