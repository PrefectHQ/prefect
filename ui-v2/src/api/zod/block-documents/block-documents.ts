/**
 * Generated by orval v7.6.0 🍺
 * Do not edit manually.
 * Prefect Prefect REST API
 * OpenAPI spec version: 0.1.0
 */
import { z as zod } from "zod";

/**
 * Create a new block document.

For more information, see https://docs.prefect.io/v3/develop/blocks.
 * @summary Create Block Document
 */
export const createBlockDocumentBlockDocumentsPostHeader = zod.object({
	"x-prefect-api-version": zod.string().optional(),
});

export const createBlockDocumentBlockDocumentsPostBodyIsAnonymousDefault = false;

export const createBlockDocumentBlockDocumentsPostBody = zod.object({
	name: zod.string().or(zod.null()).optional(),
	data: zod.object({}).optional(),
	block_schema_id: zod.string().uuid(),
	block_type_id: zod.string().uuid(),
	is_anonymous: zod.boolean().optional(),
});

/**
 * Query for block documents.
 * @summary Read Block Documents
 */
export const readBlockDocumentsBlockDocumentsFilterPostHeader = zod.object({
	"x-prefect-api-version": zod.string().optional(),
});

export const readBlockDocumentsBlockDocumentsFilterPostBodyBlockDocumentsIsAnonymousDefault =
	{ eq_: false };
export const readBlockDocumentsBlockDocumentsFilterPostBodyIncludeSecretsDefault = false;
export const readBlockDocumentsBlockDocumentsFilterPostBodySortDefault =
	"NAME_ASC";
export const readBlockDocumentsBlockDocumentsFilterPostBodyOffsetDefault = 0;
export const readBlockDocumentsBlockDocumentsFilterPostBodyOffsetMin = 0;

export const readBlockDocumentsBlockDocumentsFilterPostBody = zod.object({
	block_documents: zod
		.object({
			operator: zod.enum(["and_", "or_"]).optional(),
			id: zod
				.object({
					any_: zod.array(zod.string().uuid()).or(zod.null()).optional(),
				})
				.or(zod.null())
				.optional(),
			is_anonymous: zod
				.object({
					eq_: zod.boolean().or(zod.null()).optional(),
				})
				.or(zod.null())
				.default(
					readBlockDocumentsBlockDocumentsFilterPostBodyBlockDocumentsIsAnonymousDefault,
				),
			block_type_id: zod
				.object({
					any_: zod.array(zod.string().uuid()).or(zod.null()).optional(),
				})
				.or(zod.null())
				.optional(),
			name: zod
				.object({
					any_: zod.array(zod.string()).or(zod.null()).optional(),
					like_: zod.string().or(zod.null()).optional(),
				})
				.or(zod.null())
				.optional(),
		})
		.or(zod.null())
		.optional(),
	block_types: zod
		.object({
			name: zod
				.object({
					like_: zod.string().or(zod.null()).optional(),
				})
				.or(zod.null())
				.optional(),
			slug: zod
				.object({
					any_: zod.array(zod.string()).or(zod.null()).optional(),
				})
				.or(zod.null())
				.optional(),
		})
		.or(zod.null())
		.optional(),
	block_schemas: zod
		.object({
			operator: zod.enum(["and_", "or_"]).optional(),
			block_type_id: zod
				.object({
					any_: zod.array(zod.string().uuid()).or(zod.null()).optional(),
				})
				.or(zod.null())
				.optional(),
			block_capabilities: zod
				.object({
					all_: zod.array(zod.string()).or(zod.null()).optional(),
				})
				.or(zod.null())
				.optional(),
			id: zod
				.object({
					any_: zod.array(zod.string().uuid()).or(zod.null()).optional(),
				})
				.or(zod.null())
				.optional(),
			version: zod
				.object({
					any_: zod.array(zod.string()).or(zod.null()).optional(),
				})
				.or(zod.null())
				.optional(),
		})
		.or(zod.null())
		.optional(),
	include_secrets: zod.boolean().optional(),
	sort: zod
		.enum(["NAME_DESC", "NAME_ASC", "BLOCK_TYPE_AND_NAME_ASC"])
		.or(zod.null())
		.default(readBlockDocumentsBlockDocumentsFilterPostBodySortDefault),
	offset: zod
		.number()
		.min(readBlockDocumentsBlockDocumentsFilterPostBodyOffsetMin)
		.optional(),
	limit: zod.number().optional(),
});

export const readBlockDocumentsBlockDocumentsFilterPostResponseNameRegExpOne =
	new RegExp("^[^/%&><]+$");
export const readBlockDocumentsBlockDocumentsFilterPostResponseBlockSchemaBlockTypeNameRegExp =
	new RegExp("^[^/%&><]+$");
export const readBlockDocumentsBlockDocumentsFilterPostResponseBlockSchemaBlockTypeIsProtectedDefault = false;
export const readBlockDocumentsBlockDocumentsFilterPostResponseBlockSchemaVersionDefault =
	"non-versioned";
export const readBlockDocumentsBlockDocumentsFilterPostResponseBlockTypeNameRegExpThree =
	new RegExp("^[^/%&><]+$");
export const readBlockDocumentsBlockDocumentsFilterPostResponseBlockTypeIsProtectedDefault = false;
export const readBlockDocumentsBlockDocumentsFilterPostResponseIsAnonymousDefault = false;

export const readBlockDocumentsBlockDocumentsFilterPostResponseItem =
	zod.object({
		id: zod.string().uuid(),
		created: zod.string().datetime().or(zod.null()),
		updated: zod.string().datetime().or(zod.null()),
		name: zod
			.string()
			.regex(readBlockDocumentsBlockDocumentsFilterPostResponseNameRegExpOne)
			.or(zod.null())
			.optional(),
		data: zod.object({}).optional(),
		block_schema_id: zod.string().uuid(),
		block_schema: zod
			.object({
				id: zod.string().uuid(),
				created: zod.string().datetime().or(zod.null()),
				updated: zod.string().datetime().or(zod.null()),
				checksum: zod.string(),
				fields: zod.record(zod.string(), zod.any()).optional(),
				block_type_id: zod.string().uuid().or(zod.null()),
				block_type: zod
					.object({
						id: zod.string().uuid(),
						created: zod.string().datetime().or(zod.null()),
						updated: zod.string().datetime().or(zod.null()),
						name: zod
							.string()
							.regex(
								readBlockDocumentsBlockDocumentsFilterPostResponseBlockSchemaBlockTypeNameRegExp,
							),
						slug: zod.string(),
						logo_url: zod.string().or(zod.null()).optional(),
						documentation_url: zod.string().or(zod.null()).optional(),
						description: zod.string().or(zod.null()).optional(),
						code_example: zod.string().or(zod.null()).optional(),
						is_protected: zod.boolean().optional(),
					})
					.or(zod.null())
					.optional(),
				capabilities: zod.array(zod.string()).optional(),
				version: zod
					.string()
					.default(
						readBlockDocumentsBlockDocumentsFilterPostResponseBlockSchemaVersionDefault,
					),
			})
			.or(zod.null())
			.optional(),
		block_type_id: zod.string().uuid(),
		block_type_name: zod.string().or(zod.null()).optional(),
		block_type: zod
			.object({
				id: zod.string().uuid(),
				created: zod.string().datetime().or(zod.null()),
				updated: zod.string().datetime().or(zod.null()),
				name: zod
					.string()
					.regex(
						readBlockDocumentsBlockDocumentsFilterPostResponseBlockTypeNameRegExpThree,
					),
				slug: zod.string(),
				logo_url: zod.string().or(zod.null()).optional(),
				documentation_url: zod.string().or(zod.null()).optional(),
				description: zod.string().or(zod.null()).optional(),
				code_example: zod.string().or(zod.null()).optional(),
				is_protected: zod.boolean().optional(),
			})
			.or(zod.null())
			.optional(),
		block_document_references: zod
			.record(zod.string(), zod.object({}))
			.optional(),
		is_anonymous: zod.boolean().optional(),
	});
export const readBlockDocumentsBlockDocumentsFilterPostResponse = zod.array(
	readBlockDocumentsBlockDocumentsFilterPostResponseItem,
);

/**
 * Count block documents.
 * @summary Count Block Documents
 */
export const countBlockDocumentsBlockDocumentsCountPostHeader = zod.object({
	"x-prefect-api-version": zod.string().optional(),
});

export const countBlockDocumentsBlockDocumentsCountPostBodyBlockDocumentsIsAnonymousDefault =
	{ eq_: false };

export const countBlockDocumentsBlockDocumentsCountPostBody = zod.object({
	block_documents: zod
		.object({
			operator: zod.enum(["and_", "or_"]).optional(),
			id: zod
				.object({
					any_: zod.array(zod.string().uuid()).or(zod.null()).optional(),
				})
				.or(zod.null())
				.optional(),
			is_anonymous: zod
				.object({
					eq_: zod.boolean().or(zod.null()).optional(),
				})
				.or(zod.null())
				.default(
					countBlockDocumentsBlockDocumentsCountPostBodyBlockDocumentsIsAnonymousDefault,
				),
			block_type_id: zod
				.object({
					any_: zod.array(zod.string().uuid()).or(zod.null()).optional(),
				})
				.or(zod.null())
				.optional(),
			name: zod
				.object({
					any_: zod.array(zod.string()).or(zod.null()).optional(),
					like_: zod.string().or(zod.null()).optional(),
				})
				.or(zod.null())
				.optional(),
		})
		.or(zod.null())
		.optional(),
	block_types: zod
		.object({
			name: zod
				.object({
					like_: zod.string().or(zod.null()).optional(),
				})
				.or(zod.null())
				.optional(),
			slug: zod
				.object({
					any_: zod.array(zod.string()).or(zod.null()).optional(),
				})
				.or(zod.null())
				.optional(),
		})
		.or(zod.null())
		.optional(),
	block_schemas: zod
		.object({
			operator: zod.enum(["and_", "or_"]).optional(),
			block_type_id: zod
				.object({
					any_: zod.array(zod.string().uuid()).or(zod.null()).optional(),
				})
				.or(zod.null())
				.optional(),
			block_capabilities: zod
				.object({
					all_: zod.array(zod.string()).or(zod.null()).optional(),
				})
				.or(zod.null())
				.optional(),
			id: zod
				.object({
					any_: zod.array(zod.string().uuid()).or(zod.null()).optional(),
				})
				.or(zod.null())
				.optional(),
			version: zod
				.object({
					any_: zod.array(zod.string()).or(zod.null()).optional(),
				})
				.or(zod.null())
				.optional(),
		})
		.or(zod.null())
		.optional(),
});

export const countBlockDocumentsBlockDocumentsCountPostResponse = zod.number();

/**
 * @summary Read Block Document By Id
 */
export const readBlockDocumentByIdBlockDocumentsIdGetParams = zod.object({
	id: zod.string().uuid(),
});

export const readBlockDocumentByIdBlockDocumentsIdGetQueryIncludeSecretsDefault = false;

export const readBlockDocumentByIdBlockDocumentsIdGetQueryParams = zod.object({
	include_secrets: zod.boolean().optional(),
});

export const readBlockDocumentByIdBlockDocumentsIdGetHeader = zod.object({
	"x-prefect-api-version": zod.string().optional(),
});

export const readBlockDocumentByIdBlockDocumentsIdGetResponseNameRegExpOne =
	new RegExp("^[^/%&><]+$");
export const readBlockDocumentByIdBlockDocumentsIdGetResponseBlockSchemaBlockTypeNameRegExp =
	new RegExp("^[^/%&><]+$");
export const readBlockDocumentByIdBlockDocumentsIdGetResponseBlockSchemaBlockTypeIsProtectedDefault = false;
export const readBlockDocumentByIdBlockDocumentsIdGetResponseBlockSchemaVersionDefault =
	"non-versioned";
export const readBlockDocumentByIdBlockDocumentsIdGetResponseBlockTypeNameRegExpThree =
	new RegExp("^[^/%&><]+$");
export const readBlockDocumentByIdBlockDocumentsIdGetResponseBlockTypeIsProtectedDefault = false;
export const readBlockDocumentByIdBlockDocumentsIdGetResponseIsAnonymousDefault = false;

export const readBlockDocumentByIdBlockDocumentsIdGetResponse = zod.object({
	id: zod.string().uuid(),
	created: zod.string().datetime().or(zod.null()),
	updated: zod.string().datetime().or(zod.null()),
	name: zod
		.string()
		.regex(readBlockDocumentByIdBlockDocumentsIdGetResponseNameRegExpOne)
		.or(zod.null())
		.optional(),
	data: zod.object({}).optional(),
	block_schema_id: zod.string().uuid(),
	block_schema: zod
		.object({
			id: zod.string().uuid(),
			created: zod.string().datetime().or(zod.null()),
			updated: zod.string().datetime().or(zod.null()),
			checksum: zod.string(),
			fields: zod.record(zod.string(), zod.any()).optional(),
			block_type_id: zod.string().uuid().or(zod.null()),
			block_type: zod
				.object({
					id: zod.string().uuid(),
					created: zod.string().datetime().or(zod.null()),
					updated: zod.string().datetime().or(zod.null()),
					name: zod
						.string()
						.regex(
							readBlockDocumentByIdBlockDocumentsIdGetResponseBlockSchemaBlockTypeNameRegExp,
						),
					slug: zod.string(),
					logo_url: zod.string().or(zod.null()).optional(),
					documentation_url: zod.string().or(zod.null()).optional(),
					description: zod.string().or(zod.null()).optional(),
					code_example: zod.string().or(zod.null()).optional(),
					is_protected: zod.boolean().optional(),
				})
				.or(zod.null())
				.optional(),
			capabilities: zod.array(zod.string()).optional(),
			version: zod
				.string()
				.default(
					readBlockDocumentByIdBlockDocumentsIdGetResponseBlockSchemaVersionDefault,
				),
		})
		.or(zod.null())
		.optional(),
	block_type_id: zod.string().uuid(),
	block_type_name: zod.string().or(zod.null()).optional(),
	block_type: zod
		.object({
			id: zod.string().uuid(),
			created: zod.string().datetime().or(zod.null()),
			updated: zod.string().datetime().or(zod.null()),
			name: zod
				.string()
				.regex(
					readBlockDocumentByIdBlockDocumentsIdGetResponseBlockTypeNameRegExpThree,
				),
			slug: zod.string(),
			logo_url: zod.string().or(zod.null()).optional(),
			documentation_url: zod.string().or(zod.null()).optional(),
			description: zod.string().or(zod.null()).optional(),
			code_example: zod.string().or(zod.null()).optional(),
			is_protected: zod.boolean().optional(),
		})
		.or(zod.null())
		.optional(),
	block_document_references: zod
		.record(zod.string(), zod.object({}))
		.optional(),
	is_anonymous: zod.boolean().optional(),
});

/**
 * @summary Delete Block Document
 */
export const deleteBlockDocumentBlockDocumentsIdDeleteParams = zod.object({
	id: zod.string().uuid(),
});

export const deleteBlockDocumentBlockDocumentsIdDeleteHeader = zod.object({
	"x-prefect-api-version": zod.string().optional(),
});

/**
 * @summary Update Block Document Data
 */
export const updateBlockDocumentDataBlockDocumentsIdPatchParams = zod.object({
	id: zod.string().uuid(),
});

export const updateBlockDocumentDataBlockDocumentsIdPatchHeader = zod.object({
	"x-prefect-api-version": zod.string().optional(),
});

export const updateBlockDocumentDataBlockDocumentsIdPatchBodyMergeExistingDataDefault = true;

export const updateBlockDocumentDataBlockDocumentsIdPatchBody = zod.object({
	block_schema_id: zod.string().uuid().or(zod.null()).optional(),
	data: zod.object({}).optional(),
	merge_existing_data: zod
		.boolean()
		.default(
			updateBlockDocumentDataBlockDocumentsIdPatchBodyMergeExistingDataDefault,
		),
});
