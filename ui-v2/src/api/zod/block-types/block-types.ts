/**
 * Generated by orval v7.6.0 🍺
 * Do not edit manually.
 * Prefect Prefect REST API
 * OpenAPI spec version: 0.1.0
 */
import { z as zod } from "zod";

/**
 * Create a new block type.

For more information, see https://docs.prefect.io/v3/develop/blocks.
 * @summary Create Block Type
 */
export const createBlockTypeBlockTypesPostHeader = zod.object({
	"x-prefect-api-version": zod.string().optional(),
});

export const createBlockTypeBlockTypesPostBodyNameRegExp = new RegExp(
	"^[^/%&><]+$",
);

export const createBlockTypeBlockTypesPostBody = zod.object({
	name: zod.string().regex(createBlockTypeBlockTypesPostBodyNameRegExp),
	slug: zod.string(),
	logo_url: zod.string().or(zod.null()).optional(),
	documentation_url: zod.string().or(zod.null()).optional(),
	description: zod.string().or(zod.null()).optional(),
	code_example: zod.string().or(zod.null()).optional(),
});

/**
 * Get a block type by ID.
 * @summary Read Block Type By Id
 */
export const readBlockTypeByIdBlockTypesIdGetParams = zod.object({
	id: zod.string().uuid(),
});

export const readBlockTypeByIdBlockTypesIdGetHeader = zod.object({
	"x-prefect-api-version": zod.string().optional(),
});

export const readBlockTypeByIdBlockTypesIdGetResponseNameRegExp = new RegExp(
	"^[^/%&><]+$",
);
export const readBlockTypeByIdBlockTypesIdGetResponseIsProtectedDefault = false;

export const readBlockTypeByIdBlockTypesIdGetResponse = zod.object({
	id: zod.string().uuid(),
	created: zod.string().datetime().or(zod.null()),
	updated: zod.string().datetime().or(zod.null()),
	name: zod.string().regex(readBlockTypeByIdBlockTypesIdGetResponseNameRegExp),
	slug: zod.string(),
	logo_url: zod.string().or(zod.null()).optional(),
	documentation_url: zod.string().or(zod.null()).optional(),
	description: zod.string().or(zod.null()).optional(),
	code_example: zod.string().or(zod.null()).optional(),
	is_protected: zod.boolean().optional(),
});

/**
 * Update a block type.
 * @summary Update Block Type
 */
export const updateBlockTypeBlockTypesIdPatchParams = zod.object({
	id: zod.string().uuid(),
});

export const updateBlockTypeBlockTypesIdPatchHeader = zod.object({
	"x-prefect-api-version": zod.string().optional(),
});

export const updateBlockTypeBlockTypesIdPatchBody = zod.object({
	logo_url: zod.string().or(zod.null()).optional(),
	documentation_url: zod.string().or(zod.null()).optional(),
	description: zod.string().or(zod.null()).optional(),
	code_example: zod.string().or(zod.null()).optional(),
});

/**
 * @summary Delete Block Type
 */
export const deleteBlockTypeBlockTypesIdDeleteParams = zod.object({
	id: zod.string().uuid(),
});

export const deleteBlockTypeBlockTypesIdDeleteHeader = zod.object({
	"x-prefect-api-version": zod.string().optional(),
});

/**
 * Get a block type by name.
 * @summary Read Block Type By Slug
 */
export const readBlockTypeBySlugBlockTypesSlugSlugGetParams = zod.object({
	slug: zod.string(),
});

export const readBlockTypeBySlugBlockTypesSlugSlugGetHeader = zod.object({
	"x-prefect-api-version": zod.string().optional(),
});

export const readBlockTypeBySlugBlockTypesSlugSlugGetResponseNameRegExp =
	new RegExp("^[^/%&><]+$");
export const readBlockTypeBySlugBlockTypesSlugSlugGetResponseIsProtectedDefault = false;

export const readBlockTypeBySlugBlockTypesSlugSlugGetResponse = zod.object({
	id: zod.string().uuid(),
	created: zod.string().datetime().or(zod.null()),
	updated: zod.string().datetime().or(zod.null()),
	name: zod
		.string()
		.regex(readBlockTypeBySlugBlockTypesSlugSlugGetResponseNameRegExp),
	slug: zod.string(),
	logo_url: zod.string().or(zod.null()).optional(),
	documentation_url: zod.string().or(zod.null()).optional(),
	description: zod.string().or(zod.null()).optional(),
	code_example: zod.string().or(zod.null()).optional(),
	is_protected: zod.boolean().optional(),
});

/**
 * Gets all block types. Optionally limit return with limit and offset.
 * @summary Read Block Types
 */
export const readBlockTypesBlockTypesFilterPostHeader = zod.object({
	"x-prefect-api-version": zod.string().optional(),
});

export const readBlockTypesBlockTypesFilterPostBodyOffsetDefault = 0;
export const readBlockTypesBlockTypesFilterPostBodyOffsetMin = 0;

export const readBlockTypesBlockTypesFilterPostBody = zod.object({
	block_types: zod
		.object({
			name: zod
				.object({
					like_: zod.string().or(zod.null()).optional(),
				})
				.or(zod.null())
				.optional(),
			slug: zod
				.object({
					any_: zod.array(zod.string()).or(zod.null()).optional(),
				})
				.or(zod.null())
				.optional(),
		})
		.or(zod.null())
		.optional(),
	block_schemas: zod
		.object({
			operator: zod.enum(["and_", "or_"]).optional(),
			block_type_id: zod
				.object({
					any_: zod.array(zod.string().uuid()).or(zod.null()).optional(),
				})
				.or(zod.null())
				.optional(),
			block_capabilities: zod
				.object({
					all_: zod.array(zod.string()).or(zod.null()).optional(),
				})
				.or(zod.null())
				.optional(),
			id: zod
				.object({
					any_: zod.array(zod.string().uuid()).or(zod.null()).optional(),
				})
				.or(zod.null())
				.optional(),
			version: zod
				.object({
					any_: zod.array(zod.string()).or(zod.null()).optional(),
				})
				.or(zod.null())
				.optional(),
		})
		.or(zod.null())
		.optional(),
	offset: zod
		.number()
		.min(readBlockTypesBlockTypesFilterPostBodyOffsetMin)
		.optional(),
	limit: zod.number().optional(),
});

export const readBlockTypesBlockTypesFilterPostResponseNameRegExp = new RegExp(
	"^[^/%&><]+$",
);
export const readBlockTypesBlockTypesFilterPostResponseIsProtectedDefault = false;

export const readBlockTypesBlockTypesFilterPostResponseItem = zod.object({
	id: zod.string().uuid(),
	created: zod.string().datetime().or(zod.null()),
	updated: zod.string().datetime().or(zod.null()),
	name: zod
		.string()
		.regex(readBlockTypesBlockTypesFilterPostResponseNameRegExp),
	slug: zod.string(),
	logo_url: zod.string().or(zod.null()).optional(),
	documentation_url: zod.string().or(zod.null()).optional(),
	description: zod.string().or(zod.null()).optional(),
	code_example: zod.string().or(zod.null()).optional(),
	is_protected: zod.boolean().optional(),
});
export const readBlockTypesBlockTypesFilterPostResponse = zod.array(
	readBlockTypesBlockTypesFilterPostResponseItem,
);

/**
 * @summary Read Block Documents For Block Type
 */
export const readBlockDocumentsForBlockTypeBlockTypesSlugSlugBlockDocumentsGetParams =
	zod.object({
		slug: zod.string(),
	});

export const readBlockDocumentsForBlockTypeBlockTypesSlugSlugBlockDocumentsGetQueryIncludeSecretsDefault = false;

export const readBlockDocumentsForBlockTypeBlockTypesSlugSlugBlockDocumentsGetQueryParams =
	zod.object({
		include_secrets: zod.boolean().optional(),
	});

export const readBlockDocumentsForBlockTypeBlockTypesSlugSlugBlockDocumentsGetHeader =
	zod.object({
		"x-prefect-api-version": zod.string().optional(),
	});

export const readBlockDocumentsForBlockTypeBlockTypesSlugSlugBlockDocumentsGetResponseNameRegExpOne =
	new RegExp("^[^/%&><]+$");
export const readBlockDocumentsForBlockTypeBlockTypesSlugSlugBlockDocumentsGetResponseBlockSchemaBlockTypeNameRegExp =
	new RegExp("^[^/%&><]+$");
export const readBlockDocumentsForBlockTypeBlockTypesSlugSlugBlockDocumentsGetResponseBlockSchemaBlockTypeIsProtectedDefault = false;
export const readBlockDocumentsForBlockTypeBlockTypesSlugSlugBlockDocumentsGetResponseBlockSchemaVersionDefault =
	"non-versioned";
export const readBlockDocumentsForBlockTypeBlockTypesSlugSlugBlockDocumentsGetResponseBlockTypeNameRegExpThree =
	new RegExp("^[^/%&><]+$");
export const readBlockDocumentsForBlockTypeBlockTypesSlugSlugBlockDocumentsGetResponseBlockTypeIsProtectedDefault = false;
export const readBlockDocumentsForBlockTypeBlockTypesSlugSlugBlockDocumentsGetResponseIsAnonymousDefault = false;

export const readBlockDocumentsForBlockTypeBlockTypesSlugSlugBlockDocumentsGetResponseItem =
	zod.object({
		id: zod.string().uuid(),
		created: zod.string().datetime().or(zod.null()),
		updated: zod.string().datetime().or(zod.null()),
		name: zod
			.string()
			.regex(
				readBlockDocumentsForBlockTypeBlockTypesSlugSlugBlockDocumentsGetResponseNameRegExpOne,
			)
			.or(zod.null())
			.optional(),
		data: zod.object({}).optional(),
		block_schema_id: zod.string().uuid(),
		block_schema: zod
			.object({
				id: zod.string().uuid(),
				created: zod.string().datetime().or(zod.null()),
				updated: zod.string().datetime().or(zod.null()),
				checksum: zod.string(),
				fields: zod.record(zod.string(), zod.any()).optional(),
				block_type_id: zod.string().uuid().or(zod.null()),
				block_type: zod
					.object({
						id: zod.string().uuid(),
						created: zod.string().datetime().or(zod.null()),
						updated: zod.string().datetime().or(zod.null()),
						name: zod
							.string()
							.regex(
								readBlockDocumentsForBlockTypeBlockTypesSlugSlugBlockDocumentsGetResponseBlockSchemaBlockTypeNameRegExp,
							),
						slug: zod.string(),
						logo_url: zod.string().or(zod.null()).optional(),
						documentation_url: zod.string().or(zod.null()).optional(),
						description: zod.string().or(zod.null()).optional(),
						code_example: zod.string().or(zod.null()).optional(),
						is_protected: zod.boolean().optional(),
					})
					.or(zod.null())
					.optional(),
				capabilities: zod.array(zod.string()).optional(),
				version: zod
					.string()
					.default(
						readBlockDocumentsForBlockTypeBlockTypesSlugSlugBlockDocumentsGetResponseBlockSchemaVersionDefault,
					),
			})
			.or(zod.null())
			.optional(),
		block_type_id: zod.string().uuid(),
		block_type_name: zod.string().or(zod.null()).optional(),
		block_type: zod
			.object({
				id: zod.string().uuid(),
				created: zod.string().datetime().or(zod.null()),
				updated: zod.string().datetime().or(zod.null()),
				name: zod
					.string()
					.regex(
						readBlockDocumentsForBlockTypeBlockTypesSlugSlugBlockDocumentsGetResponseBlockTypeNameRegExpThree,
					),
				slug: zod.string(),
				logo_url: zod.string().or(zod.null()).optional(),
				documentation_url: zod.string().or(zod.null()).optional(),
				description: zod.string().or(zod.null()).optional(),
				code_example: zod.string().or(zod.null()).optional(),
				is_protected: zod.boolean().optional(),
			})
			.or(zod.null())
			.optional(),
		block_document_references: zod
			.record(zod.string(), zod.object({}))
			.optional(),
		is_anonymous: zod.boolean().optional(),
	});
export const readBlockDocumentsForBlockTypeBlockTypesSlugSlugBlockDocumentsGetResponse =
	zod.array(
		readBlockDocumentsForBlockTypeBlockTypesSlugSlugBlockDocumentsGetResponseItem,
	);

/**
 * @summary Read Block Document By Name For Block Type
 */
export const readBlockDocumentByNameForBlockTypeBlockTypesSlugSlugBlockDocumentsNameBlockDocumentNameGetParams =
	zod.object({
		slug: zod.string(),
		block_document_name: zod.string(),
	});

export const readBlockDocumentByNameForBlockTypeBlockTypesSlugSlugBlockDocumentsNameBlockDocumentNameGetQueryIncludeSecretsDefault = false;

export const readBlockDocumentByNameForBlockTypeBlockTypesSlugSlugBlockDocumentsNameBlockDocumentNameGetQueryParams =
	zod.object({
		include_secrets: zod.boolean().optional(),
	});

export const readBlockDocumentByNameForBlockTypeBlockTypesSlugSlugBlockDocumentsNameBlockDocumentNameGetHeader =
	zod.object({
		"x-prefect-api-version": zod.string().optional(),
	});

export const readBlockDocumentByNameForBlockTypeBlockTypesSlugSlugBlockDocumentsNameBlockDocumentNameGetResponseNameRegExpOne =
	new RegExp("^[^/%&><]+$");
export const readBlockDocumentByNameForBlockTypeBlockTypesSlugSlugBlockDocumentsNameBlockDocumentNameGetResponseBlockSchemaBlockTypeNameRegExp =
	new RegExp("^[^/%&><]+$");
export const readBlockDocumentByNameForBlockTypeBlockTypesSlugSlugBlockDocumentsNameBlockDocumentNameGetResponseBlockSchemaBlockTypeIsProtectedDefault = false;
export const readBlockDocumentByNameForBlockTypeBlockTypesSlugSlugBlockDocumentsNameBlockDocumentNameGetResponseBlockSchemaVersionDefault =
	"non-versioned";
export const readBlockDocumentByNameForBlockTypeBlockTypesSlugSlugBlockDocumentsNameBlockDocumentNameGetResponseBlockTypeNameRegExpThree =
	new RegExp("^[^/%&><]+$");
export const readBlockDocumentByNameForBlockTypeBlockTypesSlugSlugBlockDocumentsNameBlockDocumentNameGetResponseBlockTypeIsProtectedDefault = false;
export const readBlockDocumentByNameForBlockTypeBlockTypesSlugSlugBlockDocumentsNameBlockDocumentNameGetResponseIsAnonymousDefault = false;

export const readBlockDocumentByNameForBlockTypeBlockTypesSlugSlugBlockDocumentsNameBlockDocumentNameGetResponse =
	zod.object({
		id: zod.string().uuid(),
		created: zod.string().datetime().or(zod.null()),
		updated: zod.string().datetime().or(zod.null()),
		name: zod
			.string()
			.regex(
				readBlockDocumentByNameForBlockTypeBlockTypesSlugSlugBlockDocumentsNameBlockDocumentNameGetResponseNameRegExpOne,
			)
			.or(zod.null())
			.optional(),
		data: zod.object({}).optional(),
		block_schema_id: zod.string().uuid(),
		block_schema: zod
			.object({
				id: zod.string().uuid(),
				created: zod.string().datetime().or(zod.null()),
				updated: zod.string().datetime().or(zod.null()),
				checksum: zod.string(),
				fields: zod.record(zod.string(), zod.any()).optional(),
				block_type_id: zod.string().uuid().or(zod.null()),
				block_type: zod
					.object({
						id: zod.string().uuid(),
						created: zod.string().datetime().or(zod.null()),
						updated: zod.string().datetime().or(zod.null()),
						name: zod
							.string()
							.regex(
								readBlockDocumentByNameForBlockTypeBlockTypesSlugSlugBlockDocumentsNameBlockDocumentNameGetResponseBlockSchemaBlockTypeNameRegExp,
							),
						slug: zod.string(),
						logo_url: zod.string().or(zod.null()).optional(),
						documentation_url: zod.string().or(zod.null()).optional(),
						description: zod.string().or(zod.null()).optional(),
						code_example: zod.string().or(zod.null()).optional(),
						is_protected: zod.boolean().optional(),
					})
					.or(zod.null())
					.optional(),
				capabilities: zod.array(zod.string()).optional(),
				version: zod
					.string()
					.default(
						readBlockDocumentByNameForBlockTypeBlockTypesSlugSlugBlockDocumentsNameBlockDocumentNameGetResponseBlockSchemaVersionDefault,
					),
			})
			.or(zod.null())
			.optional(),
		block_type_id: zod.string().uuid(),
		block_type_name: zod.string().or(zod.null()).optional(),
		block_type: zod
			.object({
				id: zod.string().uuid(),
				created: zod.string().datetime().or(zod.null()),
				updated: zod.string().datetime().or(zod.null()),
				name: zod
					.string()
					.regex(
						readBlockDocumentByNameForBlockTypeBlockTypesSlugSlugBlockDocumentsNameBlockDocumentNameGetResponseBlockTypeNameRegExpThree,
					),
				slug: zod.string(),
				logo_url: zod.string().or(zod.null()).optional(),
				documentation_url: zod.string().or(zod.null()).optional(),
				description: zod.string().or(zod.null()).optional(),
				code_example: zod.string().or(zod.null()).optional(),
				is_protected: zod.boolean().optional(),
			})
			.or(zod.null())
			.optional(),
		block_document_references: zod
			.record(zod.string(), zod.object({}))
			.optional(),
		is_anonymous: zod.boolean().optional(),
	});

/**
 * @summary Install System Block Types
 */
export const installSystemBlockTypesBlockTypesInstallSystemBlockTypesPostHeader =
	zod.object({
		"x-prefect-api-version": zod.string().optional(),
	});

export const installSystemBlockTypesBlockTypesInstallSystemBlockTypesPostResponse =
	zod.any();
