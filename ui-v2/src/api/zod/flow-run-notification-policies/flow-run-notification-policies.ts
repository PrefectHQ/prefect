/**
 * Generated by orval v7.6.0 üç∫
 * Do not edit manually.
 * Prefect Prefect REST API
 * OpenAPI spec version: 0.1.0
 */
import { z as zod } from "zod";

/**
 * Creates a new flow run notification policy.

For more information, see https://docs.prefect.io/v3/automate/events/automations-triggers#sending-notifications-with-automations.
 * @summary Create Flow Run Notification Policy
 */
export const createFlowRunNotificationPolicyFlowRunNotificationPoliciesPostHeader =
	zod.object({
		"x-prefect-api-version": zod.string().optional(),
	});

export const createFlowRunNotificationPolicyFlowRunNotificationPoliciesPostBodyIsActiveDefault = true;

export const createFlowRunNotificationPolicyFlowRunNotificationPoliciesPostBody =
	zod.object({
		is_active: zod
			.boolean()
			.default(
				createFlowRunNotificationPolicyFlowRunNotificationPoliciesPostBodyIsActiveDefault,
			),
		state_names: zod.array(zod.string()),
		tags: zod.array(zod.string()),
		block_document_id: zod.string().uuid(),
		message_template: zod.string().or(zod.null()).optional(),
	});

/**
 * Updates an existing flow run notification policy.
 * @summary Update Flow Run Notification Policy
 */
export const updateFlowRunNotificationPolicyFlowRunNotificationPoliciesIdPatchParams =
	zod.object({
		id: zod.string().uuid(),
	});

export const updateFlowRunNotificationPolicyFlowRunNotificationPoliciesIdPatchHeader =
	zod.object({
		"x-prefect-api-version": zod.string().optional(),
	});

export const updateFlowRunNotificationPolicyFlowRunNotificationPoliciesIdPatchBody =
	zod.object({
		is_active: zod.boolean().or(zod.null()).optional(),
		state_names: zod.array(zod.string()).or(zod.null()).optional(),
		tags: zod.array(zod.string()).or(zod.null()).optional(),
		block_document_id: zod.string().uuid().or(zod.null()).optional(),
		message_template: zod.string().or(zod.null()).optional(),
	});

/**
 * Get a flow run notification policy by id.
 * @summary Read Flow Run Notification Policy
 */
export const readFlowRunNotificationPolicyFlowRunNotificationPoliciesIdGetParams =
	zod.object({
		id: zod.string().uuid(),
	});

export const readFlowRunNotificationPolicyFlowRunNotificationPoliciesIdGetHeader =
	zod.object({
		"x-prefect-api-version": zod.string().optional(),
	});

export const readFlowRunNotificationPolicyFlowRunNotificationPoliciesIdGetResponseIsActiveDefault = true;

export const readFlowRunNotificationPolicyFlowRunNotificationPoliciesIdGetResponse =
	zod.object({
		id: zod.string().uuid(),
		created: zod.string().datetime().or(zod.null()),
		updated: zod.string().datetime().or(zod.null()),
		is_active: zod
			.boolean()
			.default(
				readFlowRunNotificationPolicyFlowRunNotificationPoliciesIdGetResponseIsActiveDefault,
			),
		state_names: zod.array(zod.string()),
		tags: zod.array(zod.string()),
		block_document_id: zod.string().uuid(),
		message_template: zod.string().or(zod.null()).optional(),
	});

/**
 * Delete a flow run notification policy by id.
 * @summary Delete Flow Run Notification Policy
 */
export const deleteFlowRunNotificationPolicyFlowRunNotificationPoliciesIdDeleteParams =
	zod.object({
		id: zod.string().uuid(),
	});

export const deleteFlowRunNotificationPolicyFlowRunNotificationPoliciesIdDeleteHeader =
	zod.object({
		"x-prefect-api-version": zod.string().optional(),
	});

/**
 * Query for flow run notification policies.
 * @summary Read Flow Run Notification Policies
 */
export const readFlowRunNotificationPoliciesFlowRunNotificationPoliciesFilterPostHeader =
	zod.object({
		"x-prefect-api-version": zod.string().optional(),
	});

export const readFlowRunNotificationPoliciesFlowRunNotificationPoliciesFilterPostBodyFlowRunNotificationPolicyFilterIsActiveDefault =
	{ eq_: false };
export const readFlowRunNotificationPoliciesFlowRunNotificationPoliciesFilterPostBodyOffsetDefault = 0;
export const readFlowRunNotificationPoliciesFlowRunNotificationPoliciesFilterPostBodyOffsetMin = 0;

export const readFlowRunNotificationPoliciesFlowRunNotificationPoliciesFilterPostBody =
	zod.object({
		flow_run_notification_policy_filter: zod
			.object({
				is_active: zod
					.object({
						eq_: zod.boolean().or(zod.null()).optional(),
					})
					.or(zod.null())
					.default(
						readFlowRunNotificationPoliciesFlowRunNotificationPoliciesFilterPostBodyFlowRunNotificationPolicyFilterIsActiveDefault,
					),
			})
			.optional(),
		offset: zod
			.number()
			.min(
				readFlowRunNotificationPoliciesFlowRunNotificationPoliciesFilterPostBodyOffsetMin,
			)
			.optional(),
		limit: zod.number().optional(),
	});

export const readFlowRunNotificationPoliciesFlowRunNotificationPoliciesFilterPostResponseIsActiveDefault = true;

export const readFlowRunNotificationPoliciesFlowRunNotificationPoliciesFilterPostResponseItem =
	zod.object({
		id: zod.string().uuid(),
		created: zod.string().datetime().or(zod.null()),
		updated: zod.string().datetime().or(zod.null()),
		is_active: zod
			.boolean()
			.default(
				readFlowRunNotificationPoliciesFlowRunNotificationPoliciesFilterPostResponseIsActiveDefault,
			),
		state_names: zod.array(zod.string()),
		tags: zod.array(zod.string()),
		block_document_id: zod.string().uuid(),
		message_template: zod.string().or(zod.null()).optional(),
	});
export const readFlowRunNotificationPoliciesFlowRunNotificationPoliciesFilterPostResponse =
	zod.array(
		readFlowRunNotificationPoliciesFlowRunNotificationPoliciesFilterPostResponseItem,
	);
