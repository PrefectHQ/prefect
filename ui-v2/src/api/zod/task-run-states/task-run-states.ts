/**
 * Generated by orval v7.6.0 üç∫
 * Do not edit manually.
 * Prefect Prefect REST API
 * OpenAPI spec version: 0.1.0
 */
import { z as zod } from "zod";

/**
 * Get a task run state by id.

For more information, see https://docs.prefect.io/v3/develop/write-tasks.
 * @summary Read Task Run State
 */
export const readTaskRunStateTaskRunStatesIdGetParams = zod.object({
	id: zod.string().uuid(),
});

export const readTaskRunStateTaskRunStatesIdGetHeader = zod.object({
	"x-prefect-api-version": zod.string().optional(),
});

export const readTaskRunStateTaskRunStatesIdGetResponseStateDetailsDeferredDefault = false;
export const readTaskRunStateTaskRunStatesIdGetResponseStateDetailsUntrackableResultDefault = false;
export const readTaskRunStateTaskRunStatesIdGetResponseStateDetailsPauseRescheduleDefault = false;

export const readTaskRunStateTaskRunStatesIdGetResponse = zod.object({
	id: zod.string().uuid(),
	type: zod.enum([
		"SCHEDULED",
		"PENDING",
		"RUNNING",
		"COMPLETED",
		"FAILED",
		"CANCELLED",
		"CRASHED",
		"PAUSED",
		"CANCELLING",
	]),
	name: zod.string().or(zod.null()).optional(),
	timestamp: zod.string().datetime().optional(),
	message: zod.string().or(zod.null()).optional(),
	data: zod.any().or(zod.null()).optional(),
	state_details: zod
		.object({
			flow_run_id: zod.string().uuid().or(zod.null()).optional(),
			task_run_id: zod.string().uuid().or(zod.null()).optional(),
			child_flow_run_id: zod.string().uuid().or(zod.null()).optional(),
			scheduled_time: zod.string().datetime().or(zod.null()).optional(),
			cache_key: zod.string().or(zod.null()).optional(),
			cache_expiration: zod.string().datetime().or(zod.null()).optional(),
			deferred: zod.boolean().or(zod.null()).optional(),
			untrackable_result: zod.boolean().optional(),
			pause_timeout: zod.string().datetime().or(zod.null()).optional(),
			pause_reschedule: zod.boolean().optional(),
			pause_key: zod.string().or(zod.null()).optional(),
			run_input_keyset: zod
				.record(zod.string(), zod.string())
				.or(zod.null())
				.optional(),
			refresh_cache: zod.boolean().or(zod.null()).optional(),
			retriable: zod.boolean().or(zod.null()).optional(),
			transition_id: zod.string().uuid().or(zod.null()).optional(),
			task_parameters_id: zod.string().uuid().or(zod.null()).optional(),
			traceparent: zod.string().or(zod.null()).optional(),
		})
		.optional(),
});

/**
 * Get states associated with a task run.
 * @summary Read Task Run States
 */
export const readTaskRunStatesTaskRunStatesGetQueryParams = zod.object({
	task_run_id: zod.string().uuid(),
});

export const readTaskRunStatesTaskRunStatesGetHeader = zod.object({
	"x-prefect-api-version": zod.string().optional(),
});

export const readTaskRunStatesTaskRunStatesGetResponseStateDetailsDeferredDefault = false;
export const readTaskRunStatesTaskRunStatesGetResponseStateDetailsUntrackableResultDefault = false;
export const readTaskRunStatesTaskRunStatesGetResponseStateDetailsPauseRescheduleDefault = false;

export const readTaskRunStatesTaskRunStatesGetResponseItem = zod.object({
	id: zod.string().uuid(),
	type: zod.enum([
		"SCHEDULED",
		"PENDING",
		"RUNNING",
		"COMPLETED",
		"FAILED",
		"CANCELLED",
		"CRASHED",
		"PAUSED",
		"CANCELLING",
	]),
	name: zod.string().or(zod.null()).optional(),
	timestamp: zod.string().datetime().optional(),
	message: zod.string().or(zod.null()).optional(),
	data: zod.any().or(zod.null()).optional(),
	state_details: zod
		.object({
			flow_run_id: zod.string().uuid().or(zod.null()).optional(),
			task_run_id: zod.string().uuid().or(zod.null()).optional(),
			child_flow_run_id: zod.string().uuid().or(zod.null()).optional(),
			scheduled_time: zod.string().datetime().or(zod.null()).optional(),
			cache_key: zod.string().or(zod.null()).optional(),
			cache_expiration: zod.string().datetime().or(zod.null()).optional(),
			deferred: zod.boolean().or(zod.null()).optional(),
			untrackable_result: zod.boolean().optional(),
			pause_timeout: zod.string().datetime().or(zod.null()).optional(),
			pause_reschedule: zod.boolean().optional(),
			pause_key: zod.string().or(zod.null()).optional(),
			run_input_keyset: zod
				.record(zod.string(), zod.string())
				.or(zod.null())
				.optional(),
			refresh_cache: zod.boolean().or(zod.null()).optional(),
			retriable: zod.boolean().or(zod.null()).optional(),
			transition_id: zod.string().uuid().or(zod.null()).optional(),
			task_parameters_id: zod.string().uuid().or(zod.null()).optional(),
			traceparent: zod.string().or(zod.null()).optional(),
		})
		.optional(),
});
export const readTaskRunStatesTaskRunStatesGetResponse = zod.array(
	readTaskRunStatesTaskRunStatesGetResponseItem,
);
