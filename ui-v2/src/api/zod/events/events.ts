/**
 * Generated by orval v7.6.0 üç∫
 * Do not edit manually.
 * Prefect Prefect REST API
 * OpenAPI spec version: 0.1.0
 */
import { z as zod } from "zod";

/**
 * Record a batch of Events.

For more information, see https://docs.prefect.io/v3/automate/events/events.
 * @summary Create Events
 */
export const createEventsEventsPostHeader = zod.object({
	"x-prefect-api-version": zod.string().optional(),
});

export const createEventsEventsPostBodyItem = zod.object({
	occurred: zod.string().datetime(),
	event: zod.string(),
	resource: zod.record(zod.string(), zod.string()),
	related: zod.array(zod.record(zod.string(), zod.string())).optional(),
	payload: zod.object({}).optional(),
	id: zod.string().uuid(),
	follows: zod.string().uuid().or(zod.null()).optional(),
});
export const createEventsEventsPostBody = zod.array(
	createEventsEventsPostBodyItem,
);

/**
 * Queries for Events matching the given filter criteria in the given Account.  Returns
the first page of results, and the URL to request the next page (if there are more
results).
 * @summary Read Events
 */
export const readEventsEventsFilterPostHeader = zod.object({
	"x-prefect-api-version": zod.string().optional(),
});

export const readEventsEventsFilterPostBodyFilterResourceDistinctDefault = false;
export const readEventsEventsFilterPostBodyLimitDefault = 50;
export const readEventsEventsFilterPostBodyLimitMin = 0;

export const readEventsEventsFilterPostBodyLimitMax = 50;

export const readEventsEventsFilterPostBody = zod.object({
	filter: zod
		.object({
			occurred: zod
				.object({
					since: zod.string().datetime().optional(),
					until: zod.string().datetime().optional(),
				})
				.optional(),
			event: zod
				.object({
					prefix: zod.array(zod.string()).or(zod.null()).optional(),
					exclude_prefix: zod.array(zod.string()).or(zod.null()).optional(),
					name: zod.array(zod.string()).or(zod.null()).optional(),
					exclude_name: zod.array(zod.string()).or(zod.null()).optional(),
				})
				.or(zod.null())
				.optional(),
			any_resource: zod
				.object({
					id: zod.array(zod.string()).or(zod.null()).optional(),
					id_prefix: zod.array(zod.string()).or(zod.null()).optional(),
					labels: zod
						.record(zod.string(), zod.string().or(zod.array(zod.string())))
						.or(zod.null())
						.optional(),
				})
				.or(zod.null())
				.optional(),
			resource: zod
				.object({
					id: zod.array(zod.string()).or(zod.null()).optional(),
					id_prefix: zod.array(zod.string()).or(zod.null()).optional(),
					labels: zod
						.record(zod.string(), zod.string().or(zod.array(zod.string())))
						.or(zod.null())
						.optional(),
					distinct: zod.boolean().optional(),
				})
				.or(zod.null())
				.optional(),
			related: zod
				.object({
					id: zod.array(zod.string()).or(zod.null()).optional(),
					role: zod.array(zod.string()).or(zod.null()).optional(),
					resources_in_roles: zod
						.array(zod.tuple([zod.string(), zod.string()]))
						.or(zod.null())
						.optional(),
					labels: zod
						.record(zod.string(), zod.string().or(zod.array(zod.string())))
						.or(zod.null())
						.optional(),
				})
				.or(zod.null())
				.optional(),
			id: zod
				.object({
					id: zod.array(zod.string().uuid()).or(zod.null()).optional(),
				})
				.optional(),
			order: zod.enum(["ASC", "DESC"]).optional(),
		})
		.or(zod.null())
		.optional(),
	limit: zod
		.number()
		.min(readEventsEventsFilterPostBodyLimitMin)
		.max(readEventsEventsFilterPostBodyLimitMax)
		.default(readEventsEventsFilterPostBodyLimitDefault),
});

export const readEventsEventsFilterPostResponse = zod.object({
	events: zod.array(
		zod.object({
			occurred: zod.string().datetime(),
			event: zod.string(),
			resource: zod.record(zod.string(), zod.string()),
			related: zod.array(zod.record(zod.string(), zod.string())).optional(),
			payload: zod.object({}).optional(),
			id: zod.string().uuid(),
			follows: zod.string().uuid().or(zod.null()).optional(),
			received: zod.string().datetime().optional(),
		}),
	),
	total: zod.number(),
	next_page: zod.string().url().min(1).or(zod.null()),
});

/**
 * Returns the next page of Events for a previous query against the given Account, and
the URL to request the next page (if there are more results).
 * @summary Read Account Events Page
 */
export const readAccountEventsPageEventsFilterNextGetQueryParams = zod.object({
	"page-token": zod.string(),
});

export const readAccountEventsPageEventsFilterNextGetHeader = zod.object({
	"x-prefect-api-version": zod.string().optional(),
});

export const readAccountEventsPageEventsFilterNextGetResponse = zod.object({
	events: zod.array(
		zod.object({
			occurred: zod.string().datetime(),
			event: zod.string(),
			resource: zod.record(zod.string(), zod.string()),
			related: zod.array(zod.record(zod.string(), zod.string())).optional(),
			payload: zod.object({}).optional(),
			id: zod.string().uuid(),
			follows: zod.string().uuid().or(zod.null()).optional(),
			received: zod.string().datetime().optional(),
		}),
	),
	total: zod.number(),
	next_page: zod.string().url().min(1).or(zod.null()),
});

/**
 * Returns distinct objects and the count of events associated with them.  Objects
that can be counted include the day the event occurred, the type of event, or
the IDs of the resources associated with the event.
 * @summary Count Account Events
 */
export const countAccountEventsEventsCountByCountablePostParams = zod.object({
	countable: zod.enum(["day", "time", "event", "resource"]),
});

export const countAccountEventsEventsCountByCountablePostHeader = zod.object({
	"x-prefect-api-version": zod.string().optional(),
});

export const countAccountEventsEventsCountByCountablePostBodyFilterResourceDistinctDefault = false;
export const countAccountEventsEventsCountByCountablePostBodyTimeIntervalDefault = 1;
export const countAccountEventsEventsCountByCountablePostBodyTimeIntervalMin = 0.01;

export const countAccountEventsEventsCountByCountablePostBody = zod.object({
	filter: zod.object({
		occurred: zod
			.object({
				since: zod.string().datetime().optional(),
				until: zod.string().datetime().optional(),
			})
			.optional(),
		event: zod
			.object({
				prefix: zod.array(zod.string()).or(zod.null()).optional(),
				exclude_prefix: zod.array(zod.string()).or(zod.null()).optional(),
				name: zod.array(zod.string()).or(zod.null()).optional(),
				exclude_name: zod.array(zod.string()).or(zod.null()).optional(),
			})
			.or(zod.null())
			.optional(),
		any_resource: zod
			.object({
				id: zod.array(zod.string()).or(zod.null()).optional(),
				id_prefix: zod.array(zod.string()).or(zod.null()).optional(),
				labels: zod
					.record(zod.string(), zod.string().or(zod.array(zod.string())))
					.or(zod.null())
					.optional(),
			})
			.or(zod.null())
			.optional(),
		resource: zod
			.object({
				id: zod.array(zod.string()).or(zod.null()).optional(),
				id_prefix: zod.array(zod.string()).or(zod.null()).optional(),
				labels: zod
					.record(zod.string(), zod.string().or(zod.array(zod.string())))
					.or(zod.null())
					.optional(),
				distinct: zod.boolean().optional(),
			})
			.or(zod.null())
			.optional(),
		related: zod
			.object({
				id: zod.array(zod.string()).or(zod.null()).optional(),
				role: zod.array(zod.string()).or(zod.null()).optional(),
				resources_in_roles: zod
					.array(zod.tuple([zod.string(), zod.string()]))
					.or(zod.null())
					.optional(),
				labels: zod
					.record(zod.string(), zod.string().or(zod.array(zod.string())))
					.or(zod.null())
					.optional(),
			})
			.or(zod.null())
			.optional(),
		id: zod
			.object({
				id: zod.array(zod.string().uuid()).or(zod.null()).optional(),
			})
			.optional(),
		order: zod.enum(["ASC", "DESC"]).optional(),
	}),
	time_unit: zod.enum(["week", "day", "hour", "minute", "second"]).optional(),
	time_interval: zod
		.number()
		.min(countAccountEventsEventsCountByCountablePostBodyTimeIntervalMin)
		.default(
			countAccountEventsEventsCountByCountablePostBodyTimeIntervalDefault,
		),
});

export const countAccountEventsEventsCountByCountablePostResponseItem =
	zod.object({
		value: zod.string(),
		label: zod.string(),
		count: zod.number(),
		start_time: zod.string().datetime(),
		end_time: zod.string().datetime(),
	});
export const countAccountEventsEventsCountByCountablePostResponse = zod.array(
	countAccountEventsEventsCountByCountablePostResponseItem,
);
