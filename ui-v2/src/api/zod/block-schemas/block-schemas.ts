/**
 * Generated by orval v7.6.0 🍺
 * Do not edit manually.
 * Prefect Prefect REST API
 * OpenAPI spec version: 0.1.0
 */
import { z as zod } from "zod";

/**
 * Create a block schema.

For more information, see https://docs.prefect.io/v3/develop/blocks.
 * @summary Create Block Schema
 */
export const createBlockSchemaBlockSchemasPostHeader = zod.object({
	"x-prefect-api-version": zod.string().optional(),
});

export const createBlockSchemaBlockSchemasPostBodyVersionDefault =
	"non-versioned";

export const createBlockSchemaBlockSchemasPostBody = zod.object({
	fields: zod.object({}).optional(),
	block_type_id: zod.string().uuid(),
	capabilities: zod.array(zod.string()).optional(),
	version: zod
		.string()
		.default(createBlockSchemaBlockSchemasPostBodyVersionDefault),
});

/**
 * Delete a block schema by id.
 * @summary Delete Block Schema
 */
export const deleteBlockSchemaBlockSchemasIdDeleteParams = zod.object({
	id: zod.string().uuid(),
});

export const deleteBlockSchemaBlockSchemasIdDeleteHeader = zod.object({
	"x-prefect-api-version": zod.string().optional(),
});

/**
 * Get a block schema by id.
 * @summary Read Block Schema By Id
 */
export const readBlockSchemaByIdBlockSchemasIdGetParams = zod.object({
	id: zod.string().uuid(),
});

export const readBlockSchemaByIdBlockSchemasIdGetHeader = zod.object({
	"x-prefect-api-version": zod.string().optional(),
});

export const readBlockSchemaByIdBlockSchemasIdGetResponseBlockTypeNameRegExp =
	new RegExp("^[^/%&><]+$");
export const readBlockSchemaByIdBlockSchemasIdGetResponseBlockTypeIsProtectedDefault = false;
export const readBlockSchemaByIdBlockSchemasIdGetResponseVersionDefault =
	"non-versioned";

export const readBlockSchemaByIdBlockSchemasIdGetResponse = zod.object({
	id: zod.string().uuid(),
	created: zod.string().datetime().or(zod.null()),
	updated: zod.string().datetime().or(zod.null()),
	checksum: zod.string(),
	fields: zod.record(zod.string(), zod.any()).optional(),
	block_type_id: zod.string().uuid().or(zod.null()),
	block_type: zod
		.object({
			id: zod.string().uuid(),
			created: zod.string().datetime().or(zod.null()),
			updated: zod.string().datetime().or(zod.null()),
			name: zod
				.string()
				.regex(readBlockSchemaByIdBlockSchemasIdGetResponseBlockTypeNameRegExp),
			slug: zod.string(),
			logo_url: zod.string().or(zod.null()).optional(),
			documentation_url: zod.string().or(zod.null()).optional(),
			description: zod.string().or(zod.null()).optional(),
			code_example: zod.string().or(zod.null()).optional(),
			is_protected: zod.boolean().optional(),
		})
		.or(zod.null())
		.optional(),
	capabilities: zod.array(zod.string()).optional(),
	version: zod
		.string()
		.default(readBlockSchemaByIdBlockSchemasIdGetResponseVersionDefault),
});

/**
 * Read all block schemas, optionally filtered by type
 * @summary Read Block Schemas
 */
export const readBlockSchemasBlockSchemasFilterPostHeader = zod.object({
	"x-prefect-api-version": zod.string().optional(),
});

export const readBlockSchemasBlockSchemasFilterPostBodyOffsetDefault = 0;
export const readBlockSchemasBlockSchemasFilterPostBodyOffsetMin = 0;

export const readBlockSchemasBlockSchemasFilterPostBody = zod.object({
	block_schemas: zod
		.object({
			operator: zod.enum(["and_", "or_"]).optional(),
			block_type_id: zod
				.object({
					any_: zod.array(zod.string().uuid()).or(zod.null()).optional(),
				})
				.or(zod.null())
				.optional(),
			block_capabilities: zod
				.object({
					all_: zod.array(zod.string()).or(zod.null()).optional(),
				})
				.or(zod.null())
				.optional(),
			id: zod
				.object({
					any_: zod.array(zod.string().uuid()).or(zod.null()).optional(),
				})
				.or(zod.null())
				.optional(),
			version: zod
				.object({
					any_: zod.array(zod.string()).or(zod.null()).optional(),
				})
				.or(zod.null())
				.optional(),
		})
		.or(zod.null())
		.optional(),
	offset: zod
		.number()
		.min(readBlockSchemasBlockSchemasFilterPostBodyOffsetMin)
		.optional(),
	limit: zod.number().optional(),
});

export const readBlockSchemasBlockSchemasFilterPostResponseBlockTypeNameRegExp =
	new RegExp("^[^/%&><]+$");
export const readBlockSchemasBlockSchemasFilterPostResponseBlockTypeIsProtectedDefault = false;
export const readBlockSchemasBlockSchemasFilterPostResponseVersionDefault =
	"non-versioned";

export const readBlockSchemasBlockSchemasFilterPostResponseItem = zod.object({
	id: zod.string().uuid(),
	created: zod.string().datetime().or(zod.null()),
	updated: zod.string().datetime().or(zod.null()),
	checksum: zod.string(),
	fields: zod.record(zod.string(), zod.any()).optional(),
	block_type_id: zod.string().uuid().or(zod.null()),
	block_type: zod
		.object({
			id: zod.string().uuid(),
			created: zod.string().datetime().or(zod.null()),
			updated: zod.string().datetime().or(zod.null()),
			name: zod
				.string()
				.regex(
					readBlockSchemasBlockSchemasFilterPostResponseBlockTypeNameRegExp,
				),
			slug: zod.string(),
			logo_url: zod.string().or(zod.null()).optional(),
			documentation_url: zod.string().or(zod.null()).optional(),
			description: zod.string().or(zod.null()).optional(),
			code_example: zod.string().or(zod.null()).optional(),
			is_protected: zod.boolean().optional(),
		})
		.or(zod.null())
		.optional(),
	capabilities: zod.array(zod.string()).optional(),
	version: zod
		.string()
		.default(readBlockSchemasBlockSchemasFilterPostResponseVersionDefault),
});
export const readBlockSchemasBlockSchemasFilterPostResponse = zod.array(
	readBlockSchemasBlockSchemasFilterPostResponseItem,
);

/**
 * @summary Read Block Schema By Checksum
 */
export const readBlockSchemaByChecksumBlockSchemasChecksumChecksumGetParams =
	zod.object({
		checksum: zod.string(),
	});

export const readBlockSchemaByChecksumBlockSchemasChecksumChecksumGetQueryParams =
	zod.object({
		version: zod.string().or(zod.null()).optional(),
	});

export const readBlockSchemaByChecksumBlockSchemasChecksumChecksumGetHeader =
	zod.object({
		"x-prefect-api-version": zod.string().optional(),
	});

export const readBlockSchemaByChecksumBlockSchemasChecksumChecksumGetResponseBlockTypeNameRegExp =
	new RegExp("^[^/%&><]+$");
export const readBlockSchemaByChecksumBlockSchemasChecksumChecksumGetResponseBlockTypeIsProtectedDefault = false;
export const readBlockSchemaByChecksumBlockSchemasChecksumChecksumGetResponseVersionDefault =
	"non-versioned";

export const readBlockSchemaByChecksumBlockSchemasChecksumChecksumGetResponse =
	zod.object({
		id: zod.string().uuid(),
		created: zod.string().datetime().or(zod.null()),
		updated: zod.string().datetime().or(zod.null()),
		checksum: zod.string(),
		fields: zod.record(zod.string(), zod.any()).optional(),
		block_type_id: zod.string().uuid().or(zod.null()),
		block_type: zod
			.object({
				id: zod.string().uuid(),
				created: zod.string().datetime().or(zod.null()),
				updated: zod.string().datetime().or(zod.null()),
				name: zod
					.string()
					.regex(
						readBlockSchemaByChecksumBlockSchemasChecksumChecksumGetResponseBlockTypeNameRegExp,
					),
				slug: zod.string(),
				logo_url: zod.string().or(zod.null()).optional(),
				documentation_url: zod.string().or(zod.null()).optional(),
				description: zod.string().or(zod.null()).optional(),
				code_example: zod.string().or(zod.null()).optional(),
				is_protected: zod.boolean().optional(),
			})
			.or(zod.null())
			.optional(),
		capabilities: zod.array(zod.string()).optional(),
		version: zod
			.string()
			.default(
				readBlockSchemaByChecksumBlockSchemasChecksumChecksumGetResponseVersionDefault,
			),
	});
