/**
 * Generated by orval v7.6.0 üç∫
 * Do not edit manually.
 * Prefect Prefect REST API
 * OpenAPI spec version: 0.1.0
 */
import { z as zod } from "zod";

/**
 * Create an automation.

For more information, see https://docs.prefect.io/v3/automate.
 * @summary Create Automation
 */
export const createAutomationAutomationsPostHeader = zod.object({
	"x-prefect-api-version": zod.string().optional(),
});

export const createAutomationAutomationsPostBodyDescriptionDefault = "";
export const createAutomationAutomationsPostBodyEnabledDefault = true;
export const createAutomationAutomationsPostBodyTriggerTypeDefault = "event";
export const createAutomationAutomationsPostBodyTriggerThresholdDefault = 1;
export const createAutomationAutomationsPostBodyTriggerWithinDefault = 0;
export const createAutomationAutomationsPostBodyTriggerTypeDefaultOne =
	"compound";
export const createAutomationAutomationsPostBodyTriggerTriggersItemTypeDefault =
	"event";
export const createAutomationAutomationsPostBodyTriggerTriggersItemThresholdDefault = 1;
export const createAutomationAutomationsPostBodyTriggerTriggersItemWithinDefault = 0;
export const createAutomationAutomationsPostBodyTriggerTriggersItemTypeDefaultOne =
	"sequence";
export const createAutomationAutomationsPostBodyTriggerTriggersItemTriggersItemTypeDefault =
	"event";
export const createAutomationAutomationsPostBodyTriggerTriggersItemTriggersItemThresholdDefault = 1;
export const createAutomationAutomationsPostBodyTriggerTriggersItemTriggersItemWithinDefault = 0;
export const createAutomationAutomationsPostBodyTriggerTypeDefaultTwo =
	"sequence";
export const createAutomationAutomationsPostBodyTriggerTriggersItemTypeDefaultTwo =
	"event";
export const createAutomationAutomationsPostBodyTriggerTriggersItemThresholdDefaultOne = 1;
export const createAutomationAutomationsPostBodyTriggerTriggersItemWithinDefaultFour = 0;
export const createAutomationAutomationsPostBodyTriggerTriggersItemTypeDefaultThree =
	"compound";
export const createAutomationAutomationsPostBodyTriggerTriggersItemTriggersItemTypeDefaultOne =
	"event";
export const createAutomationAutomationsPostBodyTriggerTriggersItemTriggersItemThresholdDefaultOne = 1;
export const createAutomationAutomationsPostBodyTriggerTriggersItemTriggersItemWithinDefaultOne = 0;
export const createAutomationAutomationsPostBodyActionsItemTypeDefault =
	"do-nothing";
export const createAutomationAutomationsPostBodyActionsItemTypeDefaultOne =
	"run-deployment";
export const createAutomationAutomationsPostBodyActionsItemSourceDefault =
	"selected";
export const createAutomationAutomationsPostBodyActionsItemTypeDefaultTwo =
	"pause-deployment";
export const createAutomationAutomationsPostBodyActionsItemSourceDefaultOne =
	"selected";
export const createAutomationAutomationsPostBodyActionsItemTypeDefaultThree =
	"resume-deployment";
export const createAutomationAutomationsPostBodyActionsItemSourceDefaultTwo =
	"selected";
export const createAutomationAutomationsPostBodyActionsItemTypeDefaultFour =
	"cancel-flow-run";
export const createAutomationAutomationsPostBodyActionsItemTypeDefaultFive =
	"change-flow-run-state";
export const createAutomationAutomationsPostBodyActionsItemTypeDefaultSix =
	"pause-work-queue";
export const createAutomationAutomationsPostBodyActionsItemSourceDefaultThree =
	"selected";
export const createAutomationAutomationsPostBodyActionsItemTypeDefaultSeven =
	"resume-work-queue";
export const createAutomationAutomationsPostBodyActionsItemSourceDefaultFour =
	"selected";
export const createAutomationAutomationsPostBodyActionsItemTypeDefaultEight =
	"send-notification";
export const createAutomationAutomationsPostBodyActionsItemSubjectDefault =
	"Prefect automated notification";
export const createAutomationAutomationsPostBodyActionsItemTypeDefaultNine =
	"call-webhook";
export const createAutomationAutomationsPostBodyActionsItemPayloadDefault = "";
export const createAutomationAutomationsPostBodyActionsItemTypeDefaultOnezero =
	"pause-automation";
export const createAutomationAutomationsPostBodyActionsItemSourceDefaultFive =
	"selected";
export const createAutomationAutomationsPostBodyActionsItemTypeDefaultOneone =
	"resume-automation";
export const createAutomationAutomationsPostBodyActionsItemSourceDefaultSix =
	"selected";
export const createAutomationAutomationsPostBodyActionsItemTypeDefaultOnetwo =
	"suspend-flow-run";
export const createAutomationAutomationsPostBodyActionsItemTypeDefaultOnethree =
	"resume-flow-run";
export const createAutomationAutomationsPostBodyActionsItemTypeDefaultOnefour =
	"pause-work-pool";
export const createAutomationAutomationsPostBodyActionsItemSourceDefaultSeven =
	"selected";
export const createAutomationAutomationsPostBodyActionsItemTypeDefaultOnefive =
	"resume-work-pool";
export const createAutomationAutomationsPostBodyActionsItemSourceDefaultEight =
	"selected";
export const createAutomationAutomationsPostBodyActionsOnTriggerItemTypeDefault =
	"do-nothing";
export const createAutomationAutomationsPostBodyActionsOnTriggerItemTypeDefaultOne =
	"run-deployment";
export const createAutomationAutomationsPostBodyActionsOnTriggerItemSourceDefault =
	"selected";
export const createAutomationAutomationsPostBodyActionsOnTriggerItemTypeDefaultTwo =
	"pause-deployment";
export const createAutomationAutomationsPostBodyActionsOnTriggerItemSourceDefaultOne =
	"selected";
export const createAutomationAutomationsPostBodyActionsOnTriggerItemTypeDefaultThree =
	"resume-deployment";
export const createAutomationAutomationsPostBodyActionsOnTriggerItemSourceDefaultTwo =
	"selected";
export const createAutomationAutomationsPostBodyActionsOnTriggerItemTypeDefaultFour =
	"cancel-flow-run";
export const createAutomationAutomationsPostBodyActionsOnTriggerItemTypeDefaultFive =
	"change-flow-run-state";
export const createAutomationAutomationsPostBodyActionsOnTriggerItemTypeDefaultSix =
	"pause-work-queue";
export const createAutomationAutomationsPostBodyActionsOnTriggerItemSourceDefaultThree =
	"selected";
export const createAutomationAutomationsPostBodyActionsOnTriggerItemTypeDefaultSeven =
	"resume-work-queue";
export const createAutomationAutomationsPostBodyActionsOnTriggerItemSourceDefaultFour =
	"selected";
export const createAutomationAutomationsPostBodyActionsOnTriggerItemTypeDefaultEight =
	"send-notification";
export const createAutomationAutomationsPostBodyActionsOnTriggerItemSubjectDefault =
	"Prefect automated notification";
export const createAutomationAutomationsPostBodyActionsOnTriggerItemTypeDefaultNine =
	"call-webhook";
export const createAutomationAutomationsPostBodyActionsOnTriggerItemPayloadDefault =
	"";
export const createAutomationAutomationsPostBodyActionsOnTriggerItemTypeDefaultOnezero =
	"pause-automation";
export const createAutomationAutomationsPostBodyActionsOnTriggerItemSourceDefaultFive =
	"selected";
export const createAutomationAutomationsPostBodyActionsOnTriggerItemTypeDefaultOneone =
	"resume-automation";
export const createAutomationAutomationsPostBodyActionsOnTriggerItemSourceDefaultSix =
	"selected";
export const createAutomationAutomationsPostBodyActionsOnTriggerItemTypeDefaultOnetwo =
	"suspend-flow-run";
export const createAutomationAutomationsPostBodyActionsOnTriggerItemTypeDefaultOnethree =
	"resume-flow-run";
export const createAutomationAutomationsPostBodyActionsOnTriggerItemTypeDefaultOnefour =
	"pause-work-pool";
export const createAutomationAutomationsPostBodyActionsOnTriggerItemSourceDefaultSeven =
	"selected";
export const createAutomationAutomationsPostBodyActionsOnTriggerItemTypeDefaultOnefive =
	"resume-work-pool";
export const createAutomationAutomationsPostBodyActionsOnTriggerItemSourceDefaultEight =
	"selected";
export const createAutomationAutomationsPostBodyActionsOnResolveItemTypeDefault =
	"do-nothing";
export const createAutomationAutomationsPostBodyActionsOnResolveItemTypeDefaultOne =
	"run-deployment";
export const createAutomationAutomationsPostBodyActionsOnResolveItemSourceDefault =
	"selected";
export const createAutomationAutomationsPostBodyActionsOnResolveItemTypeDefaultTwo =
	"pause-deployment";
export const createAutomationAutomationsPostBodyActionsOnResolveItemSourceDefaultOne =
	"selected";
export const createAutomationAutomationsPostBodyActionsOnResolveItemTypeDefaultThree =
	"resume-deployment";
export const createAutomationAutomationsPostBodyActionsOnResolveItemSourceDefaultTwo =
	"selected";
export const createAutomationAutomationsPostBodyActionsOnResolveItemTypeDefaultFour =
	"cancel-flow-run";
export const createAutomationAutomationsPostBodyActionsOnResolveItemTypeDefaultFive =
	"change-flow-run-state";
export const createAutomationAutomationsPostBodyActionsOnResolveItemTypeDefaultSix =
	"pause-work-queue";
export const createAutomationAutomationsPostBodyActionsOnResolveItemSourceDefaultThree =
	"selected";
export const createAutomationAutomationsPostBodyActionsOnResolveItemTypeDefaultSeven =
	"resume-work-queue";
export const createAutomationAutomationsPostBodyActionsOnResolveItemSourceDefaultFour =
	"selected";
export const createAutomationAutomationsPostBodyActionsOnResolveItemTypeDefaultEight =
	"send-notification";
export const createAutomationAutomationsPostBodyActionsOnResolveItemSubjectDefault =
	"Prefect automated notification";
export const createAutomationAutomationsPostBodyActionsOnResolveItemTypeDefaultNine =
	"call-webhook";
export const createAutomationAutomationsPostBodyActionsOnResolveItemPayloadDefault =
	"";
export const createAutomationAutomationsPostBodyActionsOnResolveItemTypeDefaultOnezero =
	"pause-automation";
export const createAutomationAutomationsPostBodyActionsOnResolveItemSourceDefaultFive =
	"selected";
export const createAutomationAutomationsPostBodyActionsOnResolveItemTypeDefaultOneone =
	"resume-automation";
export const createAutomationAutomationsPostBodyActionsOnResolveItemSourceDefaultSix =
	"selected";
export const createAutomationAutomationsPostBodyActionsOnResolveItemTypeDefaultOnetwo =
	"suspend-flow-run";
export const createAutomationAutomationsPostBodyActionsOnResolveItemTypeDefaultOnethree =
	"resume-flow-run";
export const createAutomationAutomationsPostBodyActionsOnResolveItemTypeDefaultOnefour =
	"pause-work-pool";
export const createAutomationAutomationsPostBodyActionsOnResolveItemSourceDefaultSeven =
	"selected";
export const createAutomationAutomationsPostBodyActionsOnResolveItemTypeDefaultOnefive =
	"resume-work-pool";
export const createAutomationAutomationsPostBodyActionsOnResolveItemSourceDefaultEight =
	"selected";

export const createAutomationAutomationsPostBody = zod.object({
	name: zod.string(),
	description: zod.string().optional(),
	enabled: zod
		.boolean()
		.default(createAutomationAutomationsPostBodyEnabledDefault),
	trigger: zod
		.object({
			type: zod
				.string()
				.default(createAutomationAutomationsPostBodyTriggerTypeDefault),
			id: zod.string().uuid().optional(),
			match: zod
				.record(zod.string(), zod.string().or(zod.array(zod.string())))
				.optional(),
			match_related: zod
				.record(zod.string(), zod.string().or(zod.array(zod.string())))
				.optional(),
			after: zod.array(zod.string()).optional(),
			expect: zod.array(zod.string()).optional(),
			for_each: zod.array(zod.string()).optional(),
			posture: zod.enum(["Reactive", "Proactive"]),
			threshold: zod
				.number()
				.default(createAutomationAutomationsPostBodyTriggerThresholdDefault),
			within: zod.number().optional(),
		})
		.or(
			zod.object({
				type: zod
					.string()
					.default(createAutomationAutomationsPostBodyTriggerTypeDefaultOne),
				id: zod.string().uuid().optional(),
				triggers: zod.array(
					zod
						.object({
							type: zod
								.string()
								.default(
									createAutomationAutomationsPostBodyTriggerTriggersItemTypeDefault,
								),
							id: zod.string().uuid().optional(),
							match: zod
								.record(zod.string(), zod.string().or(zod.array(zod.string())))
								.optional(),
							match_related: zod
								.record(zod.string(), zod.string().or(zod.array(zod.string())))
								.optional(),
							after: zod.array(zod.string()).optional(),
							expect: zod.array(zod.string()).optional(),
							for_each: zod.array(zod.string()).optional(),
							posture: zod.enum(["Reactive", "Proactive"]),
							threshold: zod
								.number()
								.default(
									createAutomationAutomationsPostBodyTriggerTriggersItemThresholdDefault,
								),
							within: zod.number().optional(),
						})
						.or(zod.any())
						.or(
							zod.object({
								type: zod
									.string()
									.default(
										createAutomationAutomationsPostBodyTriggerTriggersItemTypeDefaultOne,
									),
								id: zod.string().uuid().optional(),
								triggers: zod.array(
									zod
										.object({
											type: zod
												.string()
												.default(
													createAutomationAutomationsPostBodyTriggerTriggersItemTriggersItemTypeDefault,
												),
											id: zod.string().uuid().optional(),
											match: zod
												.record(
													zod.string(),
													zod.string().or(zod.array(zod.string())),
												)
												.optional(),
											match_related: zod
												.record(
													zod.string(),
													zod.string().or(zod.array(zod.string())),
												)
												.optional(),
											after: zod.array(zod.string()).optional(),
											expect: zod.array(zod.string()).optional(),
											for_each: zod.array(zod.string()).optional(),
											posture: zod.enum(["Reactive", "Proactive"]),
											threshold: zod
												.number()
												.default(
													createAutomationAutomationsPostBodyTriggerTriggersItemTriggersItemThresholdDefault,
												),
											within: zod.number().optional(),
										})
										.or(zod.any())
										.or(zod.any()),
								),
								within: zod.number().or(zod.null()),
							}),
						),
				),
				within: zod.number().or(zod.null()),
				require: zod.number().or(zod.enum(["any", "all"])),
			}),
		)
		.or(
			zod.object({
				type: zod
					.string()
					.default(createAutomationAutomationsPostBodyTriggerTypeDefaultTwo),
				id: zod.string().uuid().optional(),
				triggers: zod.array(
					zod
						.object({
							type: zod
								.string()
								.default(
									createAutomationAutomationsPostBodyTriggerTriggersItemTypeDefaultTwo,
								),
							id: zod.string().uuid().optional(),
							match: zod
								.record(zod.string(), zod.string().or(zod.array(zod.string())))
								.optional(),
							match_related: zod
								.record(zod.string(), zod.string().or(zod.array(zod.string())))
								.optional(),
							after: zod.array(zod.string()).optional(),
							expect: zod.array(zod.string()).optional(),
							for_each: zod.array(zod.string()).optional(),
							posture: zod.enum(["Reactive", "Proactive"]),
							threshold: zod
								.number()
								.default(
									createAutomationAutomationsPostBodyTriggerTriggersItemThresholdDefaultOne,
								),
							within: zod.number().optional(),
						})
						.or(
							zod.object({
								type: zod
									.string()
									.default(
										createAutomationAutomationsPostBodyTriggerTriggersItemTypeDefaultThree,
									),
								id: zod.string().uuid().optional(),
								triggers: zod.array(
									zod
										.object({
											type: zod
												.string()
												.default(
													createAutomationAutomationsPostBodyTriggerTriggersItemTriggersItemTypeDefaultOne,
												),
											id: zod.string().uuid().optional(),
											match: zod
												.record(
													zod.string(),
													zod.string().or(zod.array(zod.string())),
												)
												.optional(),
											match_related: zod
												.record(
													zod.string(),
													zod.string().or(zod.array(zod.string())),
												)
												.optional(),
											after: zod.array(zod.string()).optional(),
											expect: zod.array(zod.string()).optional(),
											for_each: zod.array(zod.string()).optional(),
											posture: zod.enum(["Reactive", "Proactive"]),
											threshold: zod
												.number()
												.default(
													createAutomationAutomationsPostBodyTriggerTriggersItemTriggersItemThresholdDefaultOne,
												),
											within: zod.number().optional(),
										})
										.or(zod.any())
										.or(zod.any()),
								),
								within: zod.number().or(zod.null()),
								require: zod.number().or(zod.enum(["any", "all"])),
							}),
						)
						.or(zod.any()),
				),
				within: zod.number().or(zod.null()),
			}),
		),
	actions: zod.array(
		zod
			.object({
				type: zod
					.string()
					.default(createAutomationAutomationsPostBodyActionsItemTypeDefault),
			})
			.or(
				zod.object({
					type: zod
						.string()
						.default(
							createAutomationAutomationsPostBodyActionsItemTypeDefaultOne,
						),
					source: zod
						.enum(["selected", "inferred"])
						.default(
							createAutomationAutomationsPostBodyActionsItemSourceDefault,
						),
					deployment_id: zod.string().uuid().or(zod.null()).optional(),
					parameters: zod.object({}).or(zod.null()).optional(),
					job_variables: zod.object({}).or(zod.null()).optional(),
				}),
			)
			.or(
				zod.object({
					type: zod
						.string()
						.default(
							createAutomationAutomationsPostBodyActionsItemTypeDefaultTwo,
						),
					source: zod
						.enum(["selected", "inferred"])
						.default(
							createAutomationAutomationsPostBodyActionsItemSourceDefaultOne,
						),
					deployment_id: zod.string().uuid().or(zod.null()).optional(),
				}),
			)
			.or(
				zod.object({
					type: zod
						.string()
						.default(
							createAutomationAutomationsPostBodyActionsItemTypeDefaultThree,
						),
					source: zod
						.enum(["selected", "inferred"])
						.default(
							createAutomationAutomationsPostBodyActionsItemSourceDefaultTwo,
						),
					deployment_id: zod.string().uuid().or(zod.null()).optional(),
				}),
			)
			.or(
				zod.object({
					type: zod
						.string()
						.default(
							createAutomationAutomationsPostBodyActionsItemTypeDefaultFour,
						),
				}),
			)
			.or(
				zod.object({
					type: zod
						.string()
						.default(
							createAutomationAutomationsPostBodyActionsItemTypeDefaultFive,
						),
					name: zod.string().or(zod.null()).optional(),
					state: zod.enum([
						"SCHEDULED",
						"PENDING",
						"RUNNING",
						"COMPLETED",
						"FAILED",
						"CANCELLED",
						"CRASHED",
						"PAUSED",
						"CANCELLING",
					]),
					message: zod.string().or(zod.null()).optional(),
				}),
			)
			.or(
				zod.object({
					type: zod
						.string()
						.default(
							createAutomationAutomationsPostBodyActionsItemTypeDefaultSix,
						),
					source: zod
						.enum(["selected", "inferred"])
						.default(
							createAutomationAutomationsPostBodyActionsItemSourceDefaultThree,
						),
					work_queue_id: zod.string().uuid().or(zod.null()).optional(),
				}),
			)
			.or(
				zod.object({
					type: zod
						.string()
						.default(
							createAutomationAutomationsPostBodyActionsItemTypeDefaultSeven,
						),
					source: zod
						.enum(["selected", "inferred"])
						.default(
							createAutomationAutomationsPostBodyActionsItemSourceDefaultFour,
						),
					work_queue_id: zod.string().uuid().or(zod.null()).optional(),
				}),
			)
			.or(
				zod.object({
					type: zod
						.string()
						.default(
							createAutomationAutomationsPostBodyActionsItemTypeDefaultEight,
						),
					block_document_id: zod.string().uuid(),
					subject: zod
						.string()
						.default(
							createAutomationAutomationsPostBodyActionsItemSubjectDefault,
						),
					body: zod.string(),
				}),
			)
			.or(
				zod.object({
					type: zod
						.string()
						.default(
							createAutomationAutomationsPostBodyActionsItemTypeDefaultNine,
						),
					block_document_id: zod.string().uuid(),
					payload: zod.string().optional(),
				}),
			)
			.or(
				zod.object({
					type: zod
						.string()
						.default(
							createAutomationAutomationsPostBodyActionsItemTypeDefaultOnezero,
						),
					source: zod
						.enum(["selected", "inferred"])
						.default(
							createAutomationAutomationsPostBodyActionsItemSourceDefaultFive,
						),
					automation_id: zod.string().uuid().or(zod.null()).optional(),
				}),
			)
			.or(
				zod.object({
					type: zod
						.string()
						.default(
							createAutomationAutomationsPostBodyActionsItemTypeDefaultOneone,
						),
					source: zod
						.enum(["selected", "inferred"])
						.default(
							createAutomationAutomationsPostBodyActionsItemSourceDefaultSix,
						),
					automation_id: zod.string().uuid().or(zod.null()).optional(),
				}),
			)
			.or(
				zod.object({
					type: zod
						.string()
						.default(
							createAutomationAutomationsPostBodyActionsItemTypeDefaultOnetwo,
						),
				}),
			)
			.or(
				zod.object({
					type: zod
						.string()
						.default(
							createAutomationAutomationsPostBodyActionsItemTypeDefaultOnethree,
						),
				}),
			)
			.or(
				zod.object({
					type: zod
						.string()
						.default(
							createAutomationAutomationsPostBodyActionsItemTypeDefaultOnefour,
						),
					source: zod
						.enum(["selected", "inferred"])
						.default(
							createAutomationAutomationsPostBodyActionsItemSourceDefaultSeven,
						),
					work_pool_id: zod.string().uuid().or(zod.null()).optional(),
				}),
			)
			.or(
				zod.object({
					type: zod
						.string()
						.default(
							createAutomationAutomationsPostBodyActionsItemTypeDefaultOnefive,
						),
					source: zod
						.enum(["selected", "inferred"])
						.default(
							createAutomationAutomationsPostBodyActionsItemSourceDefaultEight,
						),
					work_pool_id: zod.string().uuid().or(zod.null()).optional(),
				}),
			),
	),
	actions_on_trigger: zod
		.array(
			zod
				.object({
					type: zod
						.string()
						.default(
							createAutomationAutomationsPostBodyActionsOnTriggerItemTypeDefault,
						),
				})
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								createAutomationAutomationsPostBodyActionsOnTriggerItemTypeDefaultOne,
							),
						source: zod
							.enum(["selected", "inferred"])
							.default(
								createAutomationAutomationsPostBodyActionsOnTriggerItemSourceDefault,
							),
						deployment_id: zod.string().uuid().or(zod.null()).optional(),
						parameters: zod.object({}).or(zod.null()).optional(),
						job_variables: zod.object({}).or(zod.null()).optional(),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								createAutomationAutomationsPostBodyActionsOnTriggerItemTypeDefaultTwo,
							),
						source: zod
							.enum(["selected", "inferred"])
							.default(
								createAutomationAutomationsPostBodyActionsOnTriggerItemSourceDefaultOne,
							),
						deployment_id: zod.string().uuid().or(zod.null()).optional(),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								createAutomationAutomationsPostBodyActionsOnTriggerItemTypeDefaultThree,
							),
						source: zod
							.enum(["selected", "inferred"])
							.default(
								createAutomationAutomationsPostBodyActionsOnTriggerItemSourceDefaultTwo,
							),
						deployment_id: zod.string().uuid().or(zod.null()).optional(),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								createAutomationAutomationsPostBodyActionsOnTriggerItemTypeDefaultFour,
							),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								createAutomationAutomationsPostBodyActionsOnTriggerItemTypeDefaultFive,
							),
						name: zod.string().or(zod.null()).optional(),
						state: zod.enum([
							"SCHEDULED",
							"PENDING",
							"RUNNING",
							"COMPLETED",
							"FAILED",
							"CANCELLED",
							"CRASHED",
							"PAUSED",
							"CANCELLING",
						]),
						message: zod.string().or(zod.null()).optional(),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								createAutomationAutomationsPostBodyActionsOnTriggerItemTypeDefaultSix,
							),
						source: zod
							.enum(["selected", "inferred"])
							.default(
								createAutomationAutomationsPostBodyActionsOnTriggerItemSourceDefaultThree,
							),
						work_queue_id: zod.string().uuid().or(zod.null()).optional(),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								createAutomationAutomationsPostBodyActionsOnTriggerItemTypeDefaultSeven,
							),
						source: zod
							.enum(["selected", "inferred"])
							.default(
								createAutomationAutomationsPostBodyActionsOnTriggerItemSourceDefaultFour,
							),
						work_queue_id: zod.string().uuid().or(zod.null()).optional(),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								createAutomationAutomationsPostBodyActionsOnTriggerItemTypeDefaultEight,
							),
						block_document_id: zod.string().uuid(),
						subject: zod
							.string()
							.default(
								createAutomationAutomationsPostBodyActionsOnTriggerItemSubjectDefault,
							),
						body: zod.string(),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								createAutomationAutomationsPostBodyActionsOnTriggerItemTypeDefaultNine,
							),
						block_document_id: zod.string().uuid(),
						payload: zod.string().optional(),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								createAutomationAutomationsPostBodyActionsOnTriggerItemTypeDefaultOnezero,
							),
						source: zod
							.enum(["selected", "inferred"])
							.default(
								createAutomationAutomationsPostBodyActionsOnTriggerItemSourceDefaultFive,
							),
						automation_id: zod.string().uuid().or(zod.null()).optional(),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								createAutomationAutomationsPostBodyActionsOnTriggerItemTypeDefaultOneone,
							),
						source: zod
							.enum(["selected", "inferred"])
							.default(
								createAutomationAutomationsPostBodyActionsOnTriggerItemSourceDefaultSix,
							),
						automation_id: zod.string().uuid().or(zod.null()).optional(),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								createAutomationAutomationsPostBodyActionsOnTriggerItemTypeDefaultOnetwo,
							),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								createAutomationAutomationsPostBodyActionsOnTriggerItemTypeDefaultOnethree,
							),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								createAutomationAutomationsPostBodyActionsOnTriggerItemTypeDefaultOnefour,
							),
						source: zod
							.enum(["selected", "inferred"])
							.default(
								createAutomationAutomationsPostBodyActionsOnTriggerItemSourceDefaultSeven,
							),
						work_pool_id: zod.string().uuid().or(zod.null()).optional(),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								createAutomationAutomationsPostBodyActionsOnTriggerItemTypeDefaultOnefive,
							),
						source: zod
							.enum(["selected", "inferred"])
							.default(
								createAutomationAutomationsPostBodyActionsOnTriggerItemSourceDefaultEight,
							),
						work_pool_id: zod.string().uuid().or(zod.null()).optional(),
					}),
				),
		)
		.optional(),
	actions_on_resolve: zod
		.array(
			zod
				.object({
					type: zod
						.string()
						.default(
							createAutomationAutomationsPostBodyActionsOnResolveItemTypeDefault,
						),
				})
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								createAutomationAutomationsPostBodyActionsOnResolveItemTypeDefaultOne,
							),
						source: zod
							.enum(["selected", "inferred"])
							.default(
								createAutomationAutomationsPostBodyActionsOnResolveItemSourceDefault,
							),
						deployment_id: zod.string().uuid().or(zod.null()).optional(),
						parameters: zod.object({}).or(zod.null()).optional(),
						job_variables: zod.object({}).or(zod.null()).optional(),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								createAutomationAutomationsPostBodyActionsOnResolveItemTypeDefaultTwo,
							),
						source: zod
							.enum(["selected", "inferred"])
							.default(
								createAutomationAutomationsPostBodyActionsOnResolveItemSourceDefaultOne,
							),
						deployment_id: zod.string().uuid().or(zod.null()).optional(),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								createAutomationAutomationsPostBodyActionsOnResolveItemTypeDefaultThree,
							),
						source: zod
							.enum(["selected", "inferred"])
							.default(
								createAutomationAutomationsPostBodyActionsOnResolveItemSourceDefaultTwo,
							),
						deployment_id: zod.string().uuid().or(zod.null()).optional(),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								createAutomationAutomationsPostBodyActionsOnResolveItemTypeDefaultFour,
							),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								createAutomationAutomationsPostBodyActionsOnResolveItemTypeDefaultFive,
							),
						name: zod.string().or(zod.null()).optional(),
						state: zod.enum([
							"SCHEDULED",
							"PENDING",
							"RUNNING",
							"COMPLETED",
							"FAILED",
							"CANCELLED",
							"CRASHED",
							"PAUSED",
							"CANCELLING",
						]),
						message: zod.string().or(zod.null()).optional(),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								createAutomationAutomationsPostBodyActionsOnResolveItemTypeDefaultSix,
							),
						source: zod
							.enum(["selected", "inferred"])
							.default(
								createAutomationAutomationsPostBodyActionsOnResolveItemSourceDefaultThree,
							),
						work_queue_id: zod.string().uuid().or(zod.null()).optional(),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								createAutomationAutomationsPostBodyActionsOnResolveItemTypeDefaultSeven,
							),
						source: zod
							.enum(["selected", "inferred"])
							.default(
								createAutomationAutomationsPostBodyActionsOnResolveItemSourceDefaultFour,
							),
						work_queue_id: zod.string().uuid().or(zod.null()).optional(),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								createAutomationAutomationsPostBodyActionsOnResolveItemTypeDefaultEight,
							),
						block_document_id: zod.string().uuid(),
						subject: zod
							.string()
							.default(
								createAutomationAutomationsPostBodyActionsOnResolveItemSubjectDefault,
							),
						body: zod.string(),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								createAutomationAutomationsPostBodyActionsOnResolveItemTypeDefaultNine,
							),
						block_document_id: zod.string().uuid(),
						payload: zod.string().optional(),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								createAutomationAutomationsPostBodyActionsOnResolveItemTypeDefaultOnezero,
							),
						source: zod
							.enum(["selected", "inferred"])
							.default(
								createAutomationAutomationsPostBodyActionsOnResolveItemSourceDefaultFive,
							),
						automation_id: zod.string().uuid().or(zod.null()).optional(),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								createAutomationAutomationsPostBodyActionsOnResolveItemTypeDefaultOneone,
							),
						source: zod
							.enum(["selected", "inferred"])
							.default(
								createAutomationAutomationsPostBodyActionsOnResolveItemSourceDefaultSix,
							),
						automation_id: zod.string().uuid().or(zod.null()).optional(),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								createAutomationAutomationsPostBodyActionsOnResolveItemTypeDefaultOnetwo,
							),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								createAutomationAutomationsPostBodyActionsOnResolveItemTypeDefaultOnethree,
							),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								createAutomationAutomationsPostBodyActionsOnResolveItemTypeDefaultOnefour,
							),
						source: zod
							.enum(["selected", "inferred"])
							.default(
								createAutomationAutomationsPostBodyActionsOnResolveItemSourceDefaultSeven,
							),
						work_pool_id: zod.string().uuid().or(zod.null()).optional(),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								createAutomationAutomationsPostBodyActionsOnResolveItemTypeDefaultOnefive,
							),
						source: zod
							.enum(["selected", "inferred"])
							.default(
								createAutomationAutomationsPostBodyActionsOnResolveItemSourceDefaultEight,
							),
						work_pool_id: zod.string().uuid().or(zod.null()).optional(),
					}),
				),
		)
		.optional(),
	owner_resource: zod.string().or(zod.null()).optional(),
});

/**
 * @summary Update Automation
 */
export const updateAutomationAutomationsIdPutParams = zod.object({
	id: zod.string().uuid(),
});

export const updateAutomationAutomationsIdPutHeader = zod.object({
	"x-prefect-api-version": zod.string().optional(),
});

export const updateAutomationAutomationsIdPutBodyDescriptionDefault = "";
export const updateAutomationAutomationsIdPutBodyEnabledDefault = true;
export const updateAutomationAutomationsIdPutBodyTriggerTypeDefault = "event";
export const updateAutomationAutomationsIdPutBodyTriggerThresholdDefault = 1;
export const updateAutomationAutomationsIdPutBodyTriggerWithinDefault = 0;
export const updateAutomationAutomationsIdPutBodyTriggerTypeDefaultOne =
	"compound";
export const updateAutomationAutomationsIdPutBodyTriggerTriggersItemTypeDefault =
	"event";
export const updateAutomationAutomationsIdPutBodyTriggerTriggersItemThresholdDefault = 1;
export const updateAutomationAutomationsIdPutBodyTriggerTriggersItemWithinDefault = 0;
export const updateAutomationAutomationsIdPutBodyTriggerTriggersItemTypeDefaultOne =
	"sequence";
export const updateAutomationAutomationsIdPutBodyTriggerTriggersItemTriggersItemTypeDefault =
	"event";
export const updateAutomationAutomationsIdPutBodyTriggerTriggersItemTriggersItemThresholdDefault = 1;
export const updateAutomationAutomationsIdPutBodyTriggerTriggersItemTriggersItemWithinDefault = 0;
export const updateAutomationAutomationsIdPutBodyTriggerTypeDefaultTwo =
	"sequence";
export const updateAutomationAutomationsIdPutBodyTriggerTriggersItemTypeDefaultTwo =
	"event";
export const updateAutomationAutomationsIdPutBodyTriggerTriggersItemThresholdDefaultOne = 1;
export const updateAutomationAutomationsIdPutBodyTriggerTriggersItemWithinDefaultFour = 0;
export const updateAutomationAutomationsIdPutBodyTriggerTriggersItemTypeDefaultThree =
	"compound";
export const updateAutomationAutomationsIdPutBodyTriggerTriggersItemTriggersItemTypeDefaultOne =
	"event";
export const updateAutomationAutomationsIdPutBodyTriggerTriggersItemTriggersItemThresholdDefaultOne = 1;
export const updateAutomationAutomationsIdPutBodyTriggerTriggersItemTriggersItemWithinDefaultOne = 0;
export const updateAutomationAutomationsIdPutBodyActionsItemTypeDefault =
	"do-nothing";
export const updateAutomationAutomationsIdPutBodyActionsItemTypeDefaultOne =
	"run-deployment";
export const updateAutomationAutomationsIdPutBodyActionsItemSourceDefault =
	"selected";
export const updateAutomationAutomationsIdPutBodyActionsItemTypeDefaultTwo =
	"pause-deployment";
export const updateAutomationAutomationsIdPutBodyActionsItemSourceDefaultOne =
	"selected";
export const updateAutomationAutomationsIdPutBodyActionsItemTypeDefaultThree =
	"resume-deployment";
export const updateAutomationAutomationsIdPutBodyActionsItemSourceDefaultTwo =
	"selected";
export const updateAutomationAutomationsIdPutBodyActionsItemTypeDefaultFour =
	"cancel-flow-run";
export const updateAutomationAutomationsIdPutBodyActionsItemTypeDefaultFive =
	"change-flow-run-state";
export const updateAutomationAutomationsIdPutBodyActionsItemTypeDefaultSix =
	"pause-work-queue";
export const updateAutomationAutomationsIdPutBodyActionsItemSourceDefaultThree =
	"selected";
export const updateAutomationAutomationsIdPutBodyActionsItemTypeDefaultSeven =
	"resume-work-queue";
export const updateAutomationAutomationsIdPutBodyActionsItemSourceDefaultFour =
	"selected";
export const updateAutomationAutomationsIdPutBodyActionsItemTypeDefaultEight =
	"send-notification";
export const updateAutomationAutomationsIdPutBodyActionsItemSubjectDefault =
	"Prefect automated notification";
export const updateAutomationAutomationsIdPutBodyActionsItemTypeDefaultNine =
	"call-webhook";
export const updateAutomationAutomationsIdPutBodyActionsItemPayloadDefault = "";
export const updateAutomationAutomationsIdPutBodyActionsItemTypeDefaultOnezero =
	"pause-automation";
export const updateAutomationAutomationsIdPutBodyActionsItemSourceDefaultFive =
	"selected";
export const updateAutomationAutomationsIdPutBodyActionsItemTypeDefaultOneone =
	"resume-automation";
export const updateAutomationAutomationsIdPutBodyActionsItemSourceDefaultSix =
	"selected";
export const updateAutomationAutomationsIdPutBodyActionsItemTypeDefaultOnetwo =
	"suspend-flow-run";
export const updateAutomationAutomationsIdPutBodyActionsItemTypeDefaultOnethree =
	"resume-flow-run";
export const updateAutomationAutomationsIdPutBodyActionsItemTypeDefaultOnefour =
	"pause-work-pool";
export const updateAutomationAutomationsIdPutBodyActionsItemSourceDefaultSeven =
	"selected";
export const updateAutomationAutomationsIdPutBodyActionsItemTypeDefaultOnefive =
	"resume-work-pool";
export const updateAutomationAutomationsIdPutBodyActionsItemSourceDefaultEight =
	"selected";
export const updateAutomationAutomationsIdPutBodyActionsOnTriggerItemTypeDefault =
	"do-nothing";
export const updateAutomationAutomationsIdPutBodyActionsOnTriggerItemTypeDefaultOne =
	"run-deployment";
export const updateAutomationAutomationsIdPutBodyActionsOnTriggerItemSourceDefault =
	"selected";
export const updateAutomationAutomationsIdPutBodyActionsOnTriggerItemTypeDefaultTwo =
	"pause-deployment";
export const updateAutomationAutomationsIdPutBodyActionsOnTriggerItemSourceDefaultOne =
	"selected";
export const updateAutomationAutomationsIdPutBodyActionsOnTriggerItemTypeDefaultThree =
	"resume-deployment";
export const updateAutomationAutomationsIdPutBodyActionsOnTriggerItemSourceDefaultTwo =
	"selected";
export const updateAutomationAutomationsIdPutBodyActionsOnTriggerItemTypeDefaultFour =
	"cancel-flow-run";
export const updateAutomationAutomationsIdPutBodyActionsOnTriggerItemTypeDefaultFive =
	"change-flow-run-state";
export const updateAutomationAutomationsIdPutBodyActionsOnTriggerItemTypeDefaultSix =
	"pause-work-queue";
export const updateAutomationAutomationsIdPutBodyActionsOnTriggerItemSourceDefaultThree =
	"selected";
export const updateAutomationAutomationsIdPutBodyActionsOnTriggerItemTypeDefaultSeven =
	"resume-work-queue";
export const updateAutomationAutomationsIdPutBodyActionsOnTriggerItemSourceDefaultFour =
	"selected";
export const updateAutomationAutomationsIdPutBodyActionsOnTriggerItemTypeDefaultEight =
	"send-notification";
export const updateAutomationAutomationsIdPutBodyActionsOnTriggerItemSubjectDefault =
	"Prefect automated notification";
export const updateAutomationAutomationsIdPutBodyActionsOnTriggerItemTypeDefaultNine =
	"call-webhook";
export const updateAutomationAutomationsIdPutBodyActionsOnTriggerItemPayloadDefault =
	"";
export const updateAutomationAutomationsIdPutBodyActionsOnTriggerItemTypeDefaultOnezero =
	"pause-automation";
export const updateAutomationAutomationsIdPutBodyActionsOnTriggerItemSourceDefaultFive =
	"selected";
export const updateAutomationAutomationsIdPutBodyActionsOnTriggerItemTypeDefaultOneone =
	"resume-automation";
export const updateAutomationAutomationsIdPutBodyActionsOnTriggerItemSourceDefaultSix =
	"selected";
export const updateAutomationAutomationsIdPutBodyActionsOnTriggerItemTypeDefaultOnetwo =
	"suspend-flow-run";
export const updateAutomationAutomationsIdPutBodyActionsOnTriggerItemTypeDefaultOnethree =
	"resume-flow-run";
export const updateAutomationAutomationsIdPutBodyActionsOnTriggerItemTypeDefaultOnefour =
	"pause-work-pool";
export const updateAutomationAutomationsIdPutBodyActionsOnTriggerItemSourceDefaultSeven =
	"selected";
export const updateAutomationAutomationsIdPutBodyActionsOnTriggerItemTypeDefaultOnefive =
	"resume-work-pool";
export const updateAutomationAutomationsIdPutBodyActionsOnTriggerItemSourceDefaultEight =
	"selected";
export const updateAutomationAutomationsIdPutBodyActionsOnResolveItemTypeDefault =
	"do-nothing";
export const updateAutomationAutomationsIdPutBodyActionsOnResolveItemTypeDefaultOne =
	"run-deployment";
export const updateAutomationAutomationsIdPutBodyActionsOnResolveItemSourceDefault =
	"selected";
export const updateAutomationAutomationsIdPutBodyActionsOnResolveItemTypeDefaultTwo =
	"pause-deployment";
export const updateAutomationAutomationsIdPutBodyActionsOnResolveItemSourceDefaultOne =
	"selected";
export const updateAutomationAutomationsIdPutBodyActionsOnResolveItemTypeDefaultThree =
	"resume-deployment";
export const updateAutomationAutomationsIdPutBodyActionsOnResolveItemSourceDefaultTwo =
	"selected";
export const updateAutomationAutomationsIdPutBodyActionsOnResolveItemTypeDefaultFour =
	"cancel-flow-run";
export const updateAutomationAutomationsIdPutBodyActionsOnResolveItemTypeDefaultFive =
	"change-flow-run-state";
export const updateAutomationAutomationsIdPutBodyActionsOnResolveItemTypeDefaultSix =
	"pause-work-queue";
export const updateAutomationAutomationsIdPutBodyActionsOnResolveItemSourceDefaultThree =
	"selected";
export const updateAutomationAutomationsIdPutBodyActionsOnResolveItemTypeDefaultSeven =
	"resume-work-queue";
export const updateAutomationAutomationsIdPutBodyActionsOnResolveItemSourceDefaultFour =
	"selected";
export const updateAutomationAutomationsIdPutBodyActionsOnResolveItemTypeDefaultEight =
	"send-notification";
export const updateAutomationAutomationsIdPutBodyActionsOnResolveItemSubjectDefault =
	"Prefect automated notification";
export const updateAutomationAutomationsIdPutBodyActionsOnResolveItemTypeDefaultNine =
	"call-webhook";
export const updateAutomationAutomationsIdPutBodyActionsOnResolveItemPayloadDefault =
	"";
export const updateAutomationAutomationsIdPutBodyActionsOnResolveItemTypeDefaultOnezero =
	"pause-automation";
export const updateAutomationAutomationsIdPutBodyActionsOnResolveItemSourceDefaultFive =
	"selected";
export const updateAutomationAutomationsIdPutBodyActionsOnResolveItemTypeDefaultOneone =
	"resume-automation";
export const updateAutomationAutomationsIdPutBodyActionsOnResolveItemSourceDefaultSix =
	"selected";
export const updateAutomationAutomationsIdPutBodyActionsOnResolveItemTypeDefaultOnetwo =
	"suspend-flow-run";
export const updateAutomationAutomationsIdPutBodyActionsOnResolveItemTypeDefaultOnethree =
	"resume-flow-run";
export const updateAutomationAutomationsIdPutBodyActionsOnResolveItemTypeDefaultOnefour =
	"pause-work-pool";
export const updateAutomationAutomationsIdPutBodyActionsOnResolveItemSourceDefaultSeven =
	"selected";
export const updateAutomationAutomationsIdPutBodyActionsOnResolveItemTypeDefaultOnefive =
	"resume-work-pool";
export const updateAutomationAutomationsIdPutBodyActionsOnResolveItemSourceDefaultEight =
	"selected";

export const updateAutomationAutomationsIdPutBody = zod.object({
	name: zod.string(),
	description: zod.string().optional(),
	enabled: zod
		.boolean()
		.default(updateAutomationAutomationsIdPutBodyEnabledDefault),
	trigger: zod
		.object({
			type: zod
				.string()
				.default(updateAutomationAutomationsIdPutBodyTriggerTypeDefault),
			id: zod.string().uuid().optional(),
			match: zod
				.record(zod.string(), zod.string().or(zod.array(zod.string())))
				.optional(),
			match_related: zod
				.record(zod.string(), zod.string().or(zod.array(zod.string())))
				.optional(),
			after: zod.array(zod.string()).optional(),
			expect: zod.array(zod.string()).optional(),
			for_each: zod.array(zod.string()).optional(),
			posture: zod.enum(["Reactive", "Proactive"]),
			threshold: zod
				.number()
				.default(updateAutomationAutomationsIdPutBodyTriggerThresholdDefault),
			within: zod.number().optional(),
		})
		.or(
			zod.object({
				type: zod
					.string()
					.default(updateAutomationAutomationsIdPutBodyTriggerTypeDefaultOne),
				id: zod.string().uuid().optional(),
				triggers: zod.array(
					zod
						.object({
							type: zod
								.string()
								.default(
									updateAutomationAutomationsIdPutBodyTriggerTriggersItemTypeDefault,
								),
							id: zod.string().uuid().optional(),
							match: zod
								.record(zod.string(), zod.string().or(zod.array(zod.string())))
								.optional(),
							match_related: zod
								.record(zod.string(), zod.string().or(zod.array(zod.string())))
								.optional(),
							after: zod.array(zod.string()).optional(),
							expect: zod.array(zod.string()).optional(),
							for_each: zod.array(zod.string()).optional(),
							posture: zod.enum(["Reactive", "Proactive"]),
							threshold: zod
								.number()
								.default(
									updateAutomationAutomationsIdPutBodyTriggerTriggersItemThresholdDefault,
								),
							within: zod.number().optional(),
						})
						.or(zod.any())
						.or(
							zod.object({
								type: zod
									.string()
									.default(
										updateAutomationAutomationsIdPutBodyTriggerTriggersItemTypeDefaultOne,
									),
								id: zod.string().uuid().optional(),
								triggers: zod.array(
									zod
										.object({
											type: zod
												.string()
												.default(
													updateAutomationAutomationsIdPutBodyTriggerTriggersItemTriggersItemTypeDefault,
												),
											id: zod.string().uuid().optional(),
											match: zod
												.record(
													zod.string(),
													zod.string().or(zod.array(zod.string())),
												)
												.optional(),
											match_related: zod
												.record(
													zod.string(),
													zod.string().or(zod.array(zod.string())),
												)
												.optional(),
											after: zod.array(zod.string()).optional(),
											expect: zod.array(zod.string()).optional(),
											for_each: zod.array(zod.string()).optional(),
											posture: zod.enum(["Reactive", "Proactive"]),
											threshold: zod
												.number()
												.default(
													updateAutomationAutomationsIdPutBodyTriggerTriggersItemTriggersItemThresholdDefault,
												),
											within: zod.number().optional(),
										})
										.or(zod.any())
										.or(zod.any()),
								),
								within: zod.number().or(zod.null()),
							}),
						),
				),
				within: zod.number().or(zod.null()),
				require: zod.number().or(zod.enum(["any", "all"])),
			}),
		)
		.or(
			zod.object({
				type: zod
					.string()
					.default(updateAutomationAutomationsIdPutBodyTriggerTypeDefaultTwo),
				id: zod.string().uuid().optional(),
				triggers: zod.array(
					zod
						.object({
							type: zod
								.string()
								.default(
									updateAutomationAutomationsIdPutBodyTriggerTriggersItemTypeDefaultTwo,
								),
							id: zod.string().uuid().optional(),
							match: zod
								.record(zod.string(), zod.string().or(zod.array(zod.string())))
								.optional(),
							match_related: zod
								.record(zod.string(), zod.string().or(zod.array(zod.string())))
								.optional(),
							after: zod.array(zod.string()).optional(),
							expect: zod.array(zod.string()).optional(),
							for_each: zod.array(zod.string()).optional(),
							posture: zod.enum(["Reactive", "Proactive"]),
							threshold: zod
								.number()
								.default(
									updateAutomationAutomationsIdPutBodyTriggerTriggersItemThresholdDefaultOne,
								),
							within: zod.number().optional(),
						})
						.or(
							zod.object({
								type: zod
									.string()
									.default(
										updateAutomationAutomationsIdPutBodyTriggerTriggersItemTypeDefaultThree,
									),
								id: zod.string().uuid().optional(),
								triggers: zod.array(
									zod
										.object({
											type: zod
												.string()
												.default(
													updateAutomationAutomationsIdPutBodyTriggerTriggersItemTriggersItemTypeDefaultOne,
												),
											id: zod.string().uuid().optional(),
											match: zod
												.record(
													zod.string(),
													zod.string().or(zod.array(zod.string())),
												)
												.optional(),
											match_related: zod
												.record(
													zod.string(),
													zod.string().or(zod.array(zod.string())),
												)
												.optional(),
											after: zod.array(zod.string()).optional(),
											expect: zod.array(zod.string()).optional(),
											for_each: zod.array(zod.string()).optional(),
											posture: zod.enum(["Reactive", "Proactive"]),
											threshold: zod
												.number()
												.default(
													updateAutomationAutomationsIdPutBodyTriggerTriggersItemTriggersItemThresholdDefaultOne,
												),
											within: zod.number().optional(),
										})
										.or(zod.any())
										.or(zod.any()),
								),
								within: zod.number().or(zod.null()),
								require: zod.number().or(zod.enum(["any", "all"])),
							}),
						)
						.or(zod.any()),
				),
				within: zod.number().or(zod.null()),
			}),
		),
	actions: zod.array(
		zod
			.object({
				type: zod
					.string()
					.default(updateAutomationAutomationsIdPutBodyActionsItemTypeDefault),
			})
			.or(
				zod.object({
					type: zod
						.string()
						.default(
							updateAutomationAutomationsIdPutBodyActionsItemTypeDefaultOne,
						),
					source: zod
						.enum(["selected", "inferred"])
						.default(
							updateAutomationAutomationsIdPutBodyActionsItemSourceDefault,
						),
					deployment_id: zod.string().uuid().or(zod.null()).optional(),
					parameters: zod.object({}).or(zod.null()).optional(),
					job_variables: zod.object({}).or(zod.null()).optional(),
				}),
			)
			.or(
				zod.object({
					type: zod
						.string()
						.default(
							updateAutomationAutomationsIdPutBodyActionsItemTypeDefaultTwo,
						),
					source: zod
						.enum(["selected", "inferred"])
						.default(
							updateAutomationAutomationsIdPutBodyActionsItemSourceDefaultOne,
						),
					deployment_id: zod.string().uuid().or(zod.null()).optional(),
				}),
			)
			.or(
				zod.object({
					type: zod
						.string()
						.default(
							updateAutomationAutomationsIdPutBodyActionsItemTypeDefaultThree,
						),
					source: zod
						.enum(["selected", "inferred"])
						.default(
							updateAutomationAutomationsIdPutBodyActionsItemSourceDefaultTwo,
						),
					deployment_id: zod.string().uuid().or(zod.null()).optional(),
				}),
			)
			.or(
				zod.object({
					type: zod
						.string()
						.default(
							updateAutomationAutomationsIdPutBodyActionsItemTypeDefaultFour,
						),
				}),
			)
			.or(
				zod.object({
					type: zod
						.string()
						.default(
							updateAutomationAutomationsIdPutBodyActionsItemTypeDefaultFive,
						),
					name: zod.string().or(zod.null()).optional(),
					state: zod.enum([
						"SCHEDULED",
						"PENDING",
						"RUNNING",
						"COMPLETED",
						"FAILED",
						"CANCELLED",
						"CRASHED",
						"PAUSED",
						"CANCELLING",
					]),
					message: zod.string().or(zod.null()).optional(),
				}),
			)
			.or(
				zod.object({
					type: zod
						.string()
						.default(
							updateAutomationAutomationsIdPutBodyActionsItemTypeDefaultSix,
						),
					source: zod
						.enum(["selected", "inferred"])
						.default(
							updateAutomationAutomationsIdPutBodyActionsItemSourceDefaultThree,
						),
					work_queue_id: zod.string().uuid().or(zod.null()).optional(),
				}),
			)
			.or(
				zod.object({
					type: zod
						.string()
						.default(
							updateAutomationAutomationsIdPutBodyActionsItemTypeDefaultSeven,
						),
					source: zod
						.enum(["selected", "inferred"])
						.default(
							updateAutomationAutomationsIdPutBodyActionsItemSourceDefaultFour,
						),
					work_queue_id: zod.string().uuid().or(zod.null()).optional(),
				}),
			)
			.or(
				zod.object({
					type: zod
						.string()
						.default(
							updateAutomationAutomationsIdPutBodyActionsItemTypeDefaultEight,
						),
					block_document_id: zod.string().uuid(),
					subject: zod
						.string()
						.default(
							updateAutomationAutomationsIdPutBodyActionsItemSubjectDefault,
						),
					body: zod.string(),
				}),
			)
			.or(
				zod.object({
					type: zod
						.string()
						.default(
							updateAutomationAutomationsIdPutBodyActionsItemTypeDefaultNine,
						),
					block_document_id: zod.string().uuid(),
					payload: zod.string().optional(),
				}),
			)
			.or(
				zod.object({
					type: zod
						.string()
						.default(
							updateAutomationAutomationsIdPutBodyActionsItemTypeDefaultOnezero,
						),
					source: zod
						.enum(["selected", "inferred"])
						.default(
							updateAutomationAutomationsIdPutBodyActionsItemSourceDefaultFive,
						),
					automation_id: zod.string().uuid().or(zod.null()).optional(),
				}),
			)
			.or(
				zod.object({
					type: zod
						.string()
						.default(
							updateAutomationAutomationsIdPutBodyActionsItemTypeDefaultOneone,
						),
					source: zod
						.enum(["selected", "inferred"])
						.default(
							updateAutomationAutomationsIdPutBodyActionsItemSourceDefaultSix,
						),
					automation_id: zod.string().uuid().or(zod.null()).optional(),
				}),
			)
			.or(
				zod.object({
					type: zod
						.string()
						.default(
							updateAutomationAutomationsIdPutBodyActionsItemTypeDefaultOnetwo,
						),
				}),
			)
			.or(
				zod.object({
					type: zod
						.string()
						.default(
							updateAutomationAutomationsIdPutBodyActionsItemTypeDefaultOnethree,
						),
				}),
			)
			.or(
				zod.object({
					type: zod
						.string()
						.default(
							updateAutomationAutomationsIdPutBodyActionsItemTypeDefaultOnefour,
						),
					source: zod
						.enum(["selected", "inferred"])
						.default(
							updateAutomationAutomationsIdPutBodyActionsItemSourceDefaultSeven,
						),
					work_pool_id: zod.string().uuid().or(zod.null()).optional(),
				}),
			)
			.or(
				zod.object({
					type: zod
						.string()
						.default(
							updateAutomationAutomationsIdPutBodyActionsItemTypeDefaultOnefive,
						),
					source: zod
						.enum(["selected", "inferred"])
						.default(
							updateAutomationAutomationsIdPutBodyActionsItemSourceDefaultEight,
						),
					work_pool_id: zod.string().uuid().or(zod.null()).optional(),
				}),
			),
	),
	actions_on_trigger: zod
		.array(
			zod
				.object({
					type: zod
						.string()
						.default(
							updateAutomationAutomationsIdPutBodyActionsOnTriggerItemTypeDefault,
						),
				})
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								updateAutomationAutomationsIdPutBodyActionsOnTriggerItemTypeDefaultOne,
							),
						source: zod
							.enum(["selected", "inferred"])
							.default(
								updateAutomationAutomationsIdPutBodyActionsOnTriggerItemSourceDefault,
							),
						deployment_id: zod.string().uuid().or(zod.null()).optional(),
						parameters: zod.object({}).or(zod.null()).optional(),
						job_variables: zod.object({}).or(zod.null()).optional(),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								updateAutomationAutomationsIdPutBodyActionsOnTriggerItemTypeDefaultTwo,
							),
						source: zod
							.enum(["selected", "inferred"])
							.default(
								updateAutomationAutomationsIdPutBodyActionsOnTriggerItemSourceDefaultOne,
							),
						deployment_id: zod.string().uuid().or(zod.null()).optional(),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								updateAutomationAutomationsIdPutBodyActionsOnTriggerItemTypeDefaultThree,
							),
						source: zod
							.enum(["selected", "inferred"])
							.default(
								updateAutomationAutomationsIdPutBodyActionsOnTriggerItemSourceDefaultTwo,
							),
						deployment_id: zod.string().uuid().or(zod.null()).optional(),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								updateAutomationAutomationsIdPutBodyActionsOnTriggerItemTypeDefaultFour,
							),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								updateAutomationAutomationsIdPutBodyActionsOnTriggerItemTypeDefaultFive,
							),
						name: zod.string().or(zod.null()).optional(),
						state: zod.enum([
							"SCHEDULED",
							"PENDING",
							"RUNNING",
							"COMPLETED",
							"FAILED",
							"CANCELLED",
							"CRASHED",
							"PAUSED",
							"CANCELLING",
						]),
						message: zod.string().or(zod.null()).optional(),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								updateAutomationAutomationsIdPutBodyActionsOnTriggerItemTypeDefaultSix,
							),
						source: zod
							.enum(["selected", "inferred"])
							.default(
								updateAutomationAutomationsIdPutBodyActionsOnTriggerItemSourceDefaultThree,
							),
						work_queue_id: zod.string().uuid().or(zod.null()).optional(),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								updateAutomationAutomationsIdPutBodyActionsOnTriggerItemTypeDefaultSeven,
							),
						source: zod
							.enum(["selected", "inferred"])
							.default(
								updateAutomationAutomationsIdPutBodyActionsOnTriggerItemSourceDefaultFour,
							),
						work_queue_id: zod.string().uuid().or(zod.null()).optional(),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								updateAutomationAutomationsIdPutBodyActionsOnTriggerItemTypeDefaultEight,
							),
						block_document_id: zod.string().uuid(),
						subject: zod
							.string()
							.default(
								updateAutomationAutomationsIdPutBodyActionsOnTriggerItemSubjectDefault,
							),
						body: zod.string(),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								updateAutomationAutomationsIdPutBodyActionsOnTriggerItemTypeDefaultNine,
							),
						block_document_id: zod.string().uuid(),
						payload: zod.string().optional(),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								updateAutomationAutomationsIdPutBodyActionsOnTriggerItemTypeDefaultOnezero,
							),
						source: zod
							.enum(["selected", "inferred"])
							.default(
								updateAutomationAutomationsIdPutBodyActionsOnTriggerItemSourceDefaultFive,
							),
						automation_id: zod.string().uuid().or(zod.null()).optional(),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								updateAutomationAutomationsIdPutBodyActionsOnTriggerItemTypeDefaultOneone,
							),
						source: zod
							.enum(["selected", "inferred"])
							.default(
								updateAutomationAutomationsIdPutBodyActionsOnTriggerItemSourceDefaultSix,
							),
						automation_id: zod.string().uuid().or(zod.null()).optional(),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								updateAutomationAutomationsIdPutBodyActionsOnTriggerItemTypeDefaultOnetwo,
							),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								updateAutomationAutomationsIdPutBodyActionsOnTriggerItemTypeDefaultOnethree,
							),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								updateAutomationAutomationsIdPutBodyActionsOnTriggerItemTypeDefaultOnefour,
							),
						source: zod
							.enum(["selected", "inferred"])
							.default(
								updateAutomationAutomationsIdPutBodyActionsOnTriggerItemSourceDefaultSeven,
							),
						work_pool_id: zod.string().uuid().or(zod.null()).optional(),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								updateAutomationAutomationsIdPutBodyActionsOnTriggerItemTypeDefaultOnefive,
							),
						source: zod
							.enum(["selected", "inferred"])
							.default(
								updateAutomationAutomationsIdPutBodyActionsOnTriggerItemSourceDefaultEight,
							),
						work_pool_id: zod.string().uuid().or(zod.null()).optional(),
					}),
				),
		)
		.optional(),
	actions_on_resolve: zod
		.array(
			zod
				.object({
					type: zod
						.string()
						.default(
							updateAutomationAutomationsIdPutBodyActionsOnResolveItemTypeDefault,
						),
				})
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								updateAutomationAutomationsIdPutBodyActionsOnResolveItemTypeDefaultOne,
							),
						source: zod
							.enum(["selected", "inferred"])
							.default(
								updateAutomationAutomationsIdPutBodyActionsOnResolveItemSourceDefault,
							),
						deployment_id: zod.string().uuid().or(zod.null()).optional(),
						parameters: zod.object({}).or(zod.null()).optional(),
						job_variables: zod.object({}).or(zod.null()).optional(),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								updateAutomationAutomationsIdPutBodyActionsOnResolveItemTypeDefaultTwo,
							),
						source: zod
							.enum(["selected", "inferred"])
							.default(
								updateAutomationAutomationsIdPutBodyActionsOnResolveItemSourceDefaultOne,
							),
						deployment_id: zod.string().uuid().or(zod.null()).optional(),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								updateAutomationAutomationsIdPutBodyActionsOnResolveItemTypeDefaultThree,
							),
						source: zod
							.enum(["selected", "inferred"])
							.default(
								updateAutomationAutomationsIdPutBodyActionsOnResolveItemSourceDefaultTwo,
							),
						deployment_id: zod.string().uuid().or(zod.null()).optional(),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								updateAutomationAutomationsIdPutBodyActionsOnResolveItemTypeDefaultFour,
							),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								updateAutomationAutomationsIdPutBodyActionsOnResolveItemTypeDefaultFive,
							),
						name: zod.string().or(zod.null()).optional(),
						state: zod.enum([
							"SCHEDULED",
							"PENDING",
							"RUNNING",
							"COMPLETED",
							"FAILED",
							"CANCELLED",
							"CRASHED",
							"PAUSED",
							"CANCELLING",
						]),
						message: zod.string().or(zod.null()).optional(),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								updateAutomationAutomationsIdPutBodyActionsOnResolveItemTypeDefaultSix,
							),
						source: zod
							.enum(["selected", "inferred"])
							.default(
								updateAutomationAutomationsIdPutBodyActionsOnResolveItemSourceDefaultThree,
							),
						work_queue_id: zod.string().uuid().or(zod.null()).optional(),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								updateAutomationAutomationsIdPutBodyActionsOnResolveItemTypeDefaultSeven,
							),
						source: zod
							.enum(["selected", "inferred"])
							.default(
								updateAutomationAutomationsIdPutBodyActionsOnResolveItemSourceDefaultFour,
							),
						work_queue_id: zod.string().uuid().or(zod.null()).optional(),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								updateAutomationAutomationsIdPutBodyActionsOnResolveItemTypeDefaultEight,
							),
						block_document_id: zod.string().uuid(),
						subject: zod
							.string()
							.default(
								updateAutomationAutomationsIdPutBodyActionsOnResolveItemSubjectDefault,
							),
						body: zod.string(),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								updateAutomationAutomationsIdPutBodyActionsOnResolveItemTypeDefaultNine,
							),
						block_document_id: zod.string().uuid(),
						payload: zod.string().optional(),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								updateAutomationAutomationsIdPutBodyActionsOnResolveItemTypeDefaultOnezero,
							),
						source: zod
							.enum(["selected", "inferred"])
							.default(
								updateAutomationAutomationsIdPutBodyActionsOnResolveItemSourceDefaultFive,
							),
						automation_id: zod.string().uuid().or(zod.null()).optional(),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								updateAutomationAutomationsIdPutBodyActionsOnResolveItemTypeDefaultOneone,
							),
						source: zod
							.enum(["selected", "inferred"])
							.default(
								updateAutomationAutomationsIdPutBodyActionsOnResolveItemSourceDefaultSix,
							),
						automation_id: zod.string().uuid().or(zod.null()).optional(),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								updateAutomationAutomationsIdPutBodyActionsOnResolveItemTypeDefaultOnetwo,
							),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								updateAutomationAutomationsIdPutBodyActionsOnResolveItemTypeDefaultOnethree,
							),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								updateAutomationAutomationsIdPutBodyActionsOnResolveItemTypeDefaultOnefour,
							),
						source: zod
							.enum(["selected", "inferred"])
							.default(
								updateAutomationAutomationsIdPutBodyActionsOnResolveItemSourceDefaultSeven,
							),
						work_pool_id: zod.string().uuid().or(zod.null()).optional(),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								updateAutomationAutomationsIdPutBodyActionsOnResolveItemTypeDefaultOnefive,
							),
						source: zod
							.enum(["selected", "inferred"])
							.default(
								updateAutomationAutomationsIdPutBodyActionsOnResolveItemSourceDefaultEight,
							),
						work_pool_id: zod.string().uuid().or(zod.null()).optional(),
					}),
				),
		)
		.optional(),
});

/**
 * @summary Patch Automation
 */
export const patchAutomationAutomationsIdPatchParams = zod.object({
	id: zod.string().uuid(),
});

export const patchAutomationAutomationsIdPatchHeader = zod.object({
	"x-prefect-api-version": zod.string().optional(),
});

export const patchAutomationAutomationsIdPatchBodyEnabledDefault = true;

export const patchAutomationAutomationsIdPatchBody = zod.object({
	enabled: zod
		.boolean()
		.default(patchAutomationAutomationsIdPatchBodyEnabledDefault),
});

/**
 * @summary Delete Automation
 */
export const deleteAutomationAutomationsIdDeleteParams = zod.object({
	id: zod.string().uuid(),
});

export const deleteAutomationAutomationsIdDeleteHeader = zod.object({
	"x-prefect-api-version": zod.string().optional(),
});

/**
 * @summary Read Automation
 */
export const readAutomationAutomationsIdGetParams = zod.object({
	id: zod.string().uuid(),
});

export const readAutomationAutomationsIdGetHeader = zod.object({
	"x-prefect-api-version": zod.string().optional(),
});

export const readAutomationAutomationsIdGetResponseDescriptionDefault = "";
export const readAutomationAutomationsIdGetResponseEnabledDefault = true;
export const readAutomationAutomationsIdGetResponseTriggerTypeDefault = "event";
export const readAutomationAutomationsIdGetResponseTriggerThresholdDefault = 1;
export const readAutomationAutomationsIdGetResponseTriggerWithinDefault = 0;
export const readAutomationAutomationsIdGetResponseTriggerTypeDefaultOne =
	"compound";
export const readAutomationAutomationsIdGetResponseTriggerTriggersItemTypeDefault =
	"event";
export const readAutomationAutomationsIdGetResponseTriggerTriggersItemThresholdDefault = 1;
export const readAutomationAutomationsIdGetResponseTriggerTriggersItemWithinDefault = 0;
export const readAutomationAutomationsIdGetResponseTriggerTriggersItemTypeDefaultOne =
	"sequence";
export const readAutomationAutomationsIdGetResponseTriggerTriggersItemTriggersItemTypeDefault =
	"event";
export const readAutomationAutomationsIdGetResponseTriggerTriggersItemTriggersItemThresholdDefault = 1;
export const readAutomationAutomationsIdGetResponseTriggerTriggersItemTriggersItemWithinDefault = 0;
export const readAutomationAutomationsIdGetResponseTriggerTypeDefaultTwo =
	"sequence";
export const readAutomationAutomationsIdGetResponseTriggerTriggersItemTypeDefaultTwo =
	"event";
export const readAutomationAutomationsIdGetResponseTriggerTriggersItemThresholdDefaultOne = 1;
export const readAutomationAutomationsIdGetResponseTriggerTriggersItemWithinDefaultFour = 0;
export const readAutomationAutomationsIdGetResponseTriggerTriggersItemTypeDefaultThree =
	"compound";
export const readAutomationAutomationsIdGetResponseTriggerTriggersItemTriggersItemTypeDefaultOne =
	"event";
export const readAutomationAutomationsIdGetResponseTriggerTriggersItemTriggersItemThresholdDefaultOne = 1;
export const readAutomationAutomationsIdGetResponseTriggerTriggersItemTriggersItemWithinDefaultOne = 0;
export const readAutomationAutomationsIdGetResponseActionsItemTypeDefault =
	"do-nothing";
export const readAutomationAutomationsIdGetResponseActionsItemTypeDefaultOne =
	"run-deployment";
export const readAutomationAutomationsIdGetResponseActionsItemSourceDefault =
	"selected";
export const readAutomationAutomationsIdGetResponseActionsItemTypeDefaultTwo =
	"pause-deployment";
export const readAutomationAutomationsIdGetResponseActionsItemSourceDefaultOne =
	"selected";
export const readAutomationAutomationsIdGetResponseActionsItemTypeDefaultThree =
	"resume-deployment";
export const readAutomationAutomationsIdGetResponseActionsItemSourceDefaultTwo =
	"selected";
export const readAutomationAutomationsIdGetResponseActionsItemTypeDefaultFour =
	"cancel-flow-run";
export const readAutomationAutomationsIdGetResponseActionsItemTypeDefaultFive =
	"change-flow-run-state";
export const readAutomationAutomationsIdGetResponseActionsItemTypeDefaultSix =
	"pause-work-queue";
export const readAutomationAutomationsIdGetResponseActionsItemSourceDefaultThree =
	"selected";
export const readAutomationAutomationsIdGetResponseActionsItemTypeDefaultSeven =
	"resume-work-queue";
export const readAutomationAutomationsIdGetResponseActionsItemSourceDefaultFour =
	"selected";
export const readAutomationAutomationsIdGetResponseActionsItemTypeDefaultEight =
	"send-notification";
export const readAutomationAutomationsIdGetResponseActionsItemSubjectDefault =
	"Prefect automated notification";
export const readAutomationAutomationsIdGetResponseActionsItemTypeDefaultNine =
	"call-webhook";
export const readAutomationAutomationsIdGetResponseActionsItemPayloadDefault =
	"";
export const readAutomationAutomationsIdGetResponseActionsItemTypeDefaultOnezero =
	"pause-automation";
export const readAutomationAutomationsIdGetResponseActionsItemSourceDefaultFive =
	"selected";
export const readAutomationAutomationsIdGetResponseActionsItemTypeDefaultOneone =
	"resume-automation";
export const readAutomationAutomationsIdGetResponseActionsItemSourceDefaultSix =
	"selected";
export const readAutomationAutomationsIdGetResponseActionsItemTypeDefaultOnetwo =
	"suspend-flow-run";
export const readAutomationAutomationsIdGetResponseActionsItemTypeDefaultOnethree =
	"resume-flow-run";
export const readAutomationAutomationsIdGetResponseActionsItemTypeDefaultOnefour =
	"pause-work-pool";
export const readAutomationAutomationsIdGetResponseActionsItemSourceDefaultSeven =
	"selected";
export const readAutomationAutomationsIdGetResponseActionsItemTypeDefaultOnefive =
	"resume-work-pool";
export const readAutomationAutomationsIdGetResponseActionsItemSourceDefaultEight =
	"selected";
export const readAutomationAutomationsIdGetResponseActionsOnTriggerItemTypeDefault =
	"do-nothing";
export const readAutomationAutomationsIdGetResponseActionsOnTriggerItemTypeDefaultOne =
	"run-deployment";
export const readAutomationAutomationsIdGetResponseActionsOnTriggerItemSourceDefault =
	"selected";
export const readAutomationAutomationsIdGetResponseActionsOnTriggerItemTypeDefaultTwo =
	"pause-deployment";
export const readAutomationAutomationsIdGetResponseActionsOnTriggerItemSourceDefaultOne =
	"selected";
export const readAutomationAutomationsIdGetResponseActionsOnTriggerItemTypeDefaultThree =
	"resume-deployment";
export const readAutomationAutomationsIdGetResponseActionsOnTriggerItemSourceDefaultTwo =
	"selected";
export const readAutomationAutomationsIdGetResponseActionsOnTriggerItemTypeDefaultFour =
	"cancel-flow-run";
export const readAutomationAutomationsIdGetResponseActionsOnTriggerItemTypeDefaultFive =
	"change-flow-run-state";
export const readAutomationAutomationsIdGetResponseActionsOnTriggerItemTypeDefaultSix =
	"pause-work-queue";
export const readAutomationAutomationsIdGetResponseActionsOnTriggerItemSourceDefaultThree =
	"selected";
export const readAutomationAutomationsIdGetResponseActionsOnTriggerItemTypeDefaultSeven =
	"resume-work-queue";
export const readAutomationAutomationsIdGetResponseActionsOnTriggerItemSourceDefaultFour =
	"selected";
export const readAutomationAutomationsIdGetResponseActionsOnTriggerItemTypeDefaultEight =
	"send-notification";
export const readAutomationAutomationsIdGetResponseActionsOnTriggerItemSubjectDefault =
	"Prefect automated notification";
export const readAutomationAutomationsIdGetResponseActionsOnTriggerItemTypeDefaultNine =
	"call-webhook";
export const readAutomationAutomationsIdGetResponseActionsOnTriggerItemPayloadDefault =
	"";
export const readAutomationAutomationsIdGetResponseActionsOnTriggerItemTypeDefaultOnezero =
	"pause-automation";
export const readAutomationAutomationsIdGetResponseActionsOnTriggerItemSourceDefaultFive =
	"selected";
export const readAutomationAutomationsIdGetResponseActionsOnTriggerItemTypeDefaultOneone =
	"resume-automation";
export const readAutomationAutomationsIdGetResponseActionsOnTriggerItemSourceDefaultSix =
	"selected";
export const readAutomationAutomationsIdGetResponseActionsOnTriggerItemTypeDefaultOnetwo =
	"suspend-flow-run";
export const readAutomationAutomationsIdGetResponseActionsOnTriggerItemTypeDefaultOnethree =
	"resume-flow-run";
export const readAutomationAutomationsIdGetResponseActionsOnTriggerItemTypeDefaultOnefour =
	"pause-work-pool";
export const readAutomationAutomationsIdGetResponseActionsOnTriggerItemSourceDefaultSeven =
	"selected";
export const readAutomationAutomationsIdGetResponseActionsOnTriggerItemTypeDefaultOnefive =
	"resume-work-pool";
export const readAutomationAutomationsIdGetResponseActionsOnTriggerItemSourceDefaultEight =
	"selected";
export const readAutomationAutomationsIdGetResponseActionsOnResolveItemTypeDefault =
	"do-nothing";
export const readAutomationAutomationsIdGetResponseActionsOnResolveItemTypeDefaultOne =
	"run-deployment";
export const readAutomationAutomationsIdGetResponseActionsOnResolveItemSourceDefault =
	"selected";
export const readAutomationAutomationsIdGetResponseActionsOnResolveItemTypeDefaultTwo =
	"pause-deployment";
export const readAutomationAutomationsIdGetResponseActionsOnResolveItemSourceDefaultOne =
	"selected";
export const readAutomationAutomationsIdGetResponseActionsOnResolveItemTypeDefaultThree =
	"resume-deployment";
export const readAutomationAutomationsIdGetResponseActionsOnResolveItemSourceDefaultTwo =
	"selected";
export const readAutomationAutomationsIdGetResponseActionsOnResolveItemTypeDefaultFour =
	"cancel-flow-run";
export const readAutomationAutomationsIdGetResponseActionsOnResolveItemTypeDefaultFive =
	"change-flow-run-state";
export const readAutomationAutomationsIdGetResponseActionsOnResolveItemTypeDefaultSix =
	"pause-work-queue";
export const readAutomationAutomationsIdGetResponseActionsOnResolveItemSourceDefaultThree =
	"selected";
export const readAutomationAutomationsIdGetResponseActionsOnResolveItemTypeDefaultSeven =
	"resume-work-queue";
export const readAutomationAutomationsIdGetResponseActionsOnResolveItemSourceDefaultFour =
	"selected";
export const readAutomationAutomationsIdGetResponseActionsOnResolveItemTypeDefaultEight =
	"send-notification";
export const readAutomationAutomationsIdGetResponseActionsOnResolveItemSubjectDefault =
	"Prefect automated notification";
export const readAutomationAutomationsIdGetResponseActionsOnResolveItemTypeDefaultNine =
	"call-webhook";
export const readAutomationAutomationsIdGetResponseActionsOnResolveItemPayloadDefault =
	"";
export const readAutomationAutomationsIdGetResponseActionsOnResolveItemTypeDefaultOnezero =
	"pause-automation";
export const readAutomationAutomationsIdGetResponseActionsOnResolveItemSourceDefaultFive =
	"selected";
export const readAutomationAutomationsIdGetResponseActionsOnResolveItemTypeDefaultOneone =
	"resume-automation";
export const readAutomationAutomationsIdGetResponseActionsOnResolveItemSourceDefaultSix =
	"selected";
export const readAutomationAutomationsIdGetResponseActionsOnResolveItemTypeDefaultOnetwo =
	"suspend-flow-run";
export const readAutomationAutomationsIdGetResponseActionsOnResolveItemTypeDefaultOnethree =
	"resume-flow-run";
export const readAutomationAutomationsIdGetResponseActionsOnResolveItemTypeDefaultOnefour =
	"pause-work-pool";
export const readAutomationAutomationsIdGetResponseActionsOnResolveItemSourceDefaultSeven =
	"selected";
export const readAutomationAutomationsIdGetResponseActionsOnResolveItemTypeDefaultOnefive =
	"resume-work-pool";
export const readAutomationAutomationsIdGetResponseActionsOnResolveItemSourceDefaultEight =
	"selected";

export const readAutomationAutomationsIdGetResponse = zod.object({
	name: zod.string(),
	description: zod.string().optional(),
	enabled: zod
		.boolean()
		.default(readAutomationAutomationsIdGetResponseEnabledDefault),
	trigger: zod
		.object({
			type: zod
				.string()
				.default(readAutomationAutomationsIdGetResponseTriggerTypeDefault),
			id: zod.string().uuid().optional(),
			match: zod
				.record(zod.string(), zod.string().or(zod.array(zod.string())))
				.optional(),
			match_related: zod
				.record(zod.string(), zod.string().or(zod.array(zod.string())))
				.optional(),
			after: zod.array(zod.string()).optional(),
			expect: zod.array(zod.string()).optional(),
			for_each: zod.array(zod.string()).optional(),
			posture: zod.enum(["Reactive", "Proactive"]),
			threshold: zod
				.number()
				.default(readAutomationAutomationsIdGetResponseTriggerThresholdDefault),
			within: zod.number().optional(),
		})
		.or(
			zod.object({
				type: zod
					.string()
					.default(readAutomationAutomationsIdGetResponseTriggerTypeDefaultOne),
				id: zod.string().uuid().optional(),
				triggers: zod.array(
					zod
						.object({
							type: zod
								.string()
								.default(
									readAutomationAutomationsIdGetResponseTriggerTriggersItemTypeDefault,
								),
							id: zod.string().uuid().optional(),
							match: zod
								.record(zod.string(), zod.string().or(zod.array(zod.string())))
								.optional(),
							match_related: zod
								.record(zod.string(), zod.string().or(zod.array(zod.string())))
								.optional(),
							after: zod.array(zod.string()).optional(),
							expect: zod.array(zod.string()).optional(),
							for_each: zod.array(zod.string()).optional(),
							posture: zod.enum(["Reactive", "Proactive"]),
							threshold: zod
								.number()
								.default(
									readAutomationAutomationsIdGetResponseTriggerTriggersItemThresholdDefault,
								),
							within: zod.number().optional(),
						})
						.or(zod.any())
						.or(
							zod.object({
								type: zod
									.string()
									.default(
										readAutomationAutomationsIdGetResponseTriggerTriggersItemTypeDefaultOne,
									),
								id: zod.string().uuid().optional(),
								triggers: zod.array(
									zod
										.object({
											type: zod
												.string()
												.default(
													readAutomationAutomationsIdGetResponseTriggerTriggersItemTriggersItemTypeDefault,
												),
											id: zod.string().uuid().optional(),
											match: zod
												.record(
													zod.string(),
													zod.string().or(zod.array(zod.string())),
												)
												.optional(),
											match_related: zod
												.record(
													zod.string(),
													zod.string().or(zod.array(zod.string())),
												)
												.optional(),
											after: zod.array(zod.string()).optional(),
											expect: zod.array(zod.string()).optional(),
											for_each: zod.array(zod.string()).optional(),
											posture: zod.enum(["Reactive", "Proactive"]),
											threshold: zod
												.number()
												.default(
													readAutomationAutomationsIdGetResponseTriggerTriggersItemTriggersItemThresholdDefault,
												),
											within: zod.number().optional(),
										})
										.or(zod.any())
										.or(zod.any()),
								),
								within: zod.number().or(zod.null()),
							}),
						),
				),
				within: zod.number().or(zod.null()),
				require: zod.number().or(zod.enum(["any", "all"])),
			}),
		)
		.or(
			zod.object({
				type: zod
					.string()
					.default(readAutomationAutomationsIdGetResponseTriggerTypeDefaultTwo),
				id: zod.string().uuid().optional(),
				triggers: zod.array(
					zod
						.object({
							type: zod
								.string()
								.default(
									readAutomationAutomationsIdGetResponseTriggerTriggersItemTypeDefaultTwo,
								),
							id: zod.string().uuid().optional(),
							match: zod
								.record(zod.string(), zod.string().or(zod.array(zod.string())))
								.optional(),
							match_related: zod
								.record(zod.string(), zod.string().or(zod.array(zod.string())))
								.optional(),
							after: zod.array(zod.string()).optional(),
							expect: zod.array(zod.string()).optional(),
							for_each: zod.array(zod.string()).optional(),
							posture: zod.enum(["Reactive", "Proactive"]),
							threshold: zod
								.number()
								.default(
									readAutomationAutomationsIdGetResponseTriggerTriggersItemThresholdDefaultOne,
								),
							within: zod.number().optional(),
						})
						.or(
							zod.object({
								type: zod
									.string()
									.default(
										readAutomationAutomationsIdGetResponseTriggerTriggersItemTypeDefaultThree,
									),
								id: zod.string().uuid().optional(),
								triggers: zod.array(
									zod
										.object({
											type: zod
												.string()
												.default(
													readAutomationAutomationsIdGetResponseTriggerTriggersItemTriggersItemTypeDefaultOne,
												),
											id: zod.string().uuid().optional(),
											match: zod
												.record(
													zod.string(),
													zod.string().or(zod.array(zod.string())),
												)
												.optional(),
											match_related: zod
												.record(
													zod.string(),
													zod.string().or(zod.array(zod.string())),
												)
												.optional(),
											after: zod.array(zod.string()).optional(),
											expect: zod.array(zod.string()).optional(),
											for_each: zod.array(zod.string()).optional(),
											posture: zod.enum(["Reactive", "Proactive"]),
											threshold: zod
												.number()
												.default(
													readAutomationAutomationsIdGetResponseTriggerTriggersItemTriggersItemThresholdDefaultOne,
												),
											within: zod.number().optional(),
										})
										.or(zod.any())
										.or(zod.any()),
								),
								within: zod.number().or(zod.null()),
								require: zod.number().or(zod.enum(["any", "all"])),
							}),
						)
						.or(zod.any()),
				),
				within: zod.number().or(zod.null()),
			}),
		),
	actions: zod.array(
		zod
			.object({
				type: zod
					.string()
					.default(
						readAutomationAutomationsIdGetResponseActionsItemTypeDefault,
					),
			})
			.or(
				zod.object({
					type: zod
						.string()
						.default(
							readAutomationAutomationsIdGetResponseActionsItemTypeDefaultOne,
						),
					source: zod
						.enum(["selected", "inferred"])
						.default(
							readAutomationAutomationsIdGetResponseActionsItemSourceDefault,
						),
					deployment_id: zod.string().uuid().or(zod.null()).optional(),
					parameters: zod.object({}).or(zod.null()).optional(),
					job_variables: zod.object({}).or(zod.null()).optional(),
				}),
			)
			.or(
				zod.object({
					type: zod
						.string()
						.default(
							readAutomationAutomationsIdGetResponseActionsItemTypeDefaultTwo,
						),
					source: zod
						.enum(["selected", "inferred"])
						.default(
							readAutomationAutomationsIdGetResponseActionsItemSourceDefaultOne,
						),
					deployment_id: zod.string().uuid().or(zod.null()).optional(),
				}),
			)
			.or(
				zod.object({
					type: zod
						.string()
						.default(
							readAutomationAutomationsIdGetResponseActionsItemTypeDefaultThree,
						),
					source: zod
						.enum(["selected", "inferred"])
						.default(
							readAutomationAutomationsIdGetResponseActionsItemSourceDefaultTwo,
						),
					deployment_id: zod.string().uuid().or(zod.null()).optional(),
				}),
			)
			.or(
				zod.object({
					type: zod
						.string()
						.default(
							readAutomationAutomationsIdGetResponseActionsItemTypeDefaultFour,
						),
				}),
			)
			.or(
				zod.object({
					type: zod
						.string()
						.default(
							readAutomationAutomationsIdGetResponseActionsItemTypeDefaultFive,
						),
					name: zod.string().or(zod.null()).optional(),
					state: zod.enum([
						"SCHEDULED",
						"PENDING",
						"RUNNING",
						"COMPLETED",
						"FAILED",
						"CANCELLED",
						"CRASHED",
						"PAUSED",
						"CANCELLING",
					]),
					message: zod.string().or(zod.null()).optional(),
				}),
			)
			.or(
				zod.object({
					type: zod
						.string()
						.default(
							readAutomationAutomationsIdGetResponseActionsItemTypeDefaultSix,
						),
					source: zod
						.enum(["selected", "inferred"])
						.default(
							readAutomationAutomationsIdGetResponseActionsItemSourceDefaultThree,
						),
					work_queue_id: zod.string().uuid().or(zod.null()).optional(),
				}),
			)
			.or(
				zod.object({
					type: zod
						.string()
						.default(
							readAutomationAutomationsIdGetResponseActionsItemTypeDefaultSeven,
						),
					source: zod
						.enum(["selected", "inferred"])
						.default(
							readAutomationAutomationsIdGetResponseActionsItemSourceDefaultFour,
						),
					work_queue_id: zod.string().uuid().or(zod.null()).optional(),
				}),
			)
			.or(
				zod.object({
					type: zod
						.string()
						.default(
							readAutomationAutomationsIdGetResponseActionsItemTypeDefaultEight,
						),
					block_document_id: zod.string().uuid(),
					subject: zod
						.string()
						.default(
							readAutomationAutomationsIdGetResponseActionsItemSubjectDefault,
						),
					body: zod.string(),
				}),
			)
			.or(
				zod.object({
					type: zod
						.string()
						.default(
							readAutomationAutomationsIdGetResponseActionsItemTypeDefaultNine,
						),
					block_document_id: zod.string().uuid(),
					payload: zod.string().optional(),
				}),
			)
			.or(
				zod.object({
					type: zod
						.string()
						.default(
							readAutomationAutomationsIdGetResponseActionsItemTypeDefaultOnezero,
						),
					source: zod
						.enum(["selected", "inferred"])
						.default(
							readAutomationAutomationsIdGetResponseActionsItemSourceDefaultFive,
						),
					automation_id: zod.string().uuid().or(zod.null()).optional(),
				}),
			)
			.or(
				zod.object({
					type: zod
						.string()
						.default(
							readAutomationAutomationsIdGetResponseActionsItemTypeDefaultOneone,
						),
					source: zod
						.enum(["selected", "inferred"])
						.default(
							readAutomationAutomationsIdGetResponseActionsItemSourceDefaultSix,
						),
					automation_id: zod.string().uuid().or(zod.null()).optional(),
				}),
			)
			.or(
				zod.object({
					type: zod
						.string()
						.default(
							readAutomationAutomationsIdGetResponseActionsItemTypeDefaultOnetwo,
						),
				}),
			)
			.or(
				zod.object({
					type: zod
						.string()
						.default(
							readAutomationAutomationsIdGetResponseActionsItemTypeDefaultOnethree,
						),
				}),
			)
			.or(
				zod.object({
					type: zod
						.string()
						.default(
							readAutomationAutomationsIdGetResponseActionsItemTypeDefaultOnefour,
						),
					source: zod
						.enum(["selected", "inferred"])
						.default(
							readAutomationAutomationsIdGetResponseActionsItemSourceDefaultSeven,
						),
					work_pool_id: zod.string().uuid().or(zod.null()).optional(),
				}),
			)
			.or(
				zod.object({
					type: zod
						.string()
						.default(
							readAutomationAutomationsIdGetResponseActionsItemTypeDefaultOnefive,
						),
					source: zod
						.enum(["selected", "inferred"])
						.default(
							readAutomationAutomationsIdGetResponseActionsItemSourceDefaultEight,
						),
					work_pool_id: zod.string().uuid().or(zod.null()).optional(),
				}),
			),
	),
	actions_on_trigger: zod
		.array(
			zod
				.object({
					type: zod
						.string()
						.default(
							readAutomationAutomationsIdGetResponseActionsOnTriggerItemTypeDefault,
						),
				})
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								readAutomationAutomationsIdGetResponseActionsOnTriggerItemTypeDefaultOne,
							),
						source: zod
							.enum(["selected", "inferred"])
							.default(
								readAutomationAutomationsIdGetResponseActionsOnTriggerItemSourceDefault,
							),
						deployment_id: zod.string().uuid().or(zod.null()).optional(),
						parameters: zod.object({}).or(zod.null()).optional(),
						job_variables: zod.object({}).or(zod.null()).optional(),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								readAutomationAutomationsIdGetResponseActionsOnTriggerItemTypeDefaultTwo,
							),
						source: zod
							.enum(["selected", "inferred"])
							.default(
								readAutomationAutomationsIdGetResponseActionsOnTriggerItemSourceDefaultOne,
							),
						deployment_id: zod.string().uuid().or(zod.null()).optional(),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								readAutomationAutomationsIdGetResponseActionsOnTriggerItemTypeDefaultThree,
							),
						source: zod
							.enum(["selected", "inferred"])
							.default(
								readAutomationAutomationsIdGetResponseActionsOnTriggerItemSourceDefaultTwo,
							),
						deployment_id: zod.string().uuid().or(zod.null()).optional(),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								readAutomationAutomationsIdGetResponseActionsOnTriggerItemTypeDefaultFour,
							),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								readAutomationAutomationsIdGetResponseActionsOnTriggerItemTypeDefaultFive,
							),
						name: zod.string().or(zod.null()).optional(),
						state: zod.enum([
							"SCHEDULED",
							"PENDING",
							"RUNNING",
							"COMPLETED",
							"FAILED",
							"CANCELLED",
							"CRASHED",
							"PAUSED",
							"CANCELLING",
						]),
						message: zod.string().or(zod.null()).optional(),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								readAutomationAutomationsIdGetResponseActionsOnTriggerItemTypeDefaultSix,
							),
						source: zod
							.enum(["selected", "inferred"])
							.default(
								readAutomationAutomationsIdGetResponseActionsOnTriggerItemSourceDefaultThree,
							),
						work_queue_id: zod.string().uuid().or(zod.null()).optional(),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								readAutomationAutomationsIdGetResponseActionsOnTriggerItemTypeDefaultSeven,
							),
						source: zod
							.enum(["selected", "inferred"])
							.default(
								readAutomationAutomationsIdGetResponseActionsOnTriggerItemSourceDefaultFour,
							),
						work_queue_id: zod.string().uuid().or(zod.null()).optional(),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								readAutomationAutomationsIdGetResponseActionsOnTriggerItemTypeDefaultEight,
							),
						block_document_id: zod.string().uuid(),
						subject: zod
							.string()
							.default(
								readAutomationAutomationsIdGetResponseActionsOnTriggerItemSubjectDefault,
							),
						body: zod.string(),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								readAutomationAutomationsIdGetResponseActionsOnTriggerItemTypeDefaultNine,
							),
						block_document_id: zod.string().uuid(),
						payload: zod.string().optional(),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								readAutomationAutomationsIdGetResponseActionsOnTriggerItemTypeDefaultOnezero,
							),
						source: zod
							.enum(["selected", "inferred"])
							.default(
								readAutomationAutomationsIdGetResponseActionsOnTriggerItemSourceDefaultFive,
							),
						automation_id: zod.string().uuid().or(zod.null()).optional(),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								readAutomationAutomationsIdGetResponseActionsOnTriggerItemTypeDefaultOneone,
							),
						source: zod
							.enum(["selected", "inferred"])
							.default(
								readAutomationAutomationsIdGetResponseActionsOnTriggerItemSourceDefaultSix,
							),
						automation_id: zod.string().uuid().or(zod.null()).optional(),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								readAutomationAutomationsIdGetResponseActionsOnTriggerItemTypeDefaultOnetwo,
							),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								readAutomationAutomationsIdGetResponseActionsOnTriggerItemTypeDefaultOnethree,
							),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								readAutomationAutomationsIdGetResponseActionsOnTriggerItemTypeDefaultOnefour,
							),
						source: zod
							.enum(["selected", "inferred"])
							.default(
								readAutomationAutomationsIdGetResponseActionsOnTriggerItemSourceDefaultSeven,
							),
						work_pool_id: zod.string().uuid().or(zod.null()).optional(),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								readAutomationAutomationsIdGetResponseActionsOnTriggerItemTypeDefaultOnefive,
							),
						source: zod
							.enum(["selected", "inferred"])
							.default(
								readAutomationAutomationsIdGetResponseActionsOnTriggerItemSourceDefaultEight,
							),
						work_pool_id: zod.string().uuid().or(zod.null()).optional(),
					}),
				),
		)
		.optional(),
	actions_on_resolve: zod
		.array(
			zod
				.object({
					type: zod
						.string()
						.default(
							readAutomationAutomationsIdGetResponseActionsOnResolveItemTypeDefault,
						),
				})
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								readAutomationAutomationsIdGetResponseActionsOnResolveItemTypeDefaultOne,
							),
						source: zod
							.enum(["selected", "inferred"])
							.default(
								readAutomationAutomationsIdGetResponseActionsOnResolveItemSourceDefault,
							),
						deployment_id: zod.string().uuid().or(zod.null()).optional(),
						parameters: zod.object({}).or(zod.null()).optional(),
						job_variables: zod.object({}).or(zod.null()).optional(),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								readAutomationAutomationsIdGetResponseActionsOnResolveItemTypeDefaultTwo,
							),
						source: zod
							.enum(["selected", "inferred"])
							.default(
								readAutomationAutomationsIdGetResponseActionsOnResolveItemSourceDefaultOne,
							),
						deployment_id: zod.string().uuid().or(zod.null()).optional(),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								readAutomationAutomationsIdGetResponseActionsOnResolveItemTypeDefaultThree,
							),
						source: zod
							.enum(["selected", "inferred"])
							.default(
								readAutomationAutomationsIdGetResponseActionsOnResolveItemSourceDefaultTwo,
							),
						deployment_id: zod.string().uuid().or(zod.null()).optional(),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								readAutomationAutomationsIdGetResponseActionsOnResolveItemTypeDefaultFour,
							),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								readAutomationAutomationsIdGetResponseActionsOnResolveItemTypeDefaultFive,
							),
						name: zod.string().or(zod.null()).optional(),
						state: zod.enum([
							"SCHEDULED",
							"PENDING",
							"RUNNING",
							"COMPLETED",
							"FAILED",
							"CANCELLED",
							"CRASHED",
							"PAUSED",
							"CANCELLING",
						]),
						message: zod.string().or(zod.null()).optional(),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								readAutomationAutomationsIdGetResponseActionsOnResolveItemTypeDefaultSix,
							),
						source: zod
							.enum(["selected", "inferred"])
							.default(
								readAutomationAutomationsIdGetResponseActionsOnResolveItemSourceDefaultThree,
							),
						work_queue_id: zod.string().uuid().or(zod.null()).optional(),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								readAutomationAutomationsIdGetResponseActionsOnResolveItemTypeDefaultSeven,
							),
						source: zod
							.enum(["selected", "inferred"])
							.default(
								readAutomationAutomationsIdGetResponseActionsOnResolveItemSourceDefaultFour,
							),
						work_queue_id: zod.string().uuid().or(zod.null()).optional(),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								readAutomationAutomationsIdGetResponseActionsOnResolveItemTypeDefaultEight,
							),
						block_document_id: zod.string().uuid(),
						subject: zod
							.string()
							.default(
								readAutomationAutomationsIdGetResponseActionsOnResolveItemSubjectDefault,
							),
						body: zod.string(),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								readAutomationAutomationsIdGetResponseActionsOnResolveItemTypeDefaultNine,
							),
						block_document_id: zod.string().uuid(),
						payload: zod.string().optional(),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								readAutomationAutomationsIdGetResponseActionsOnResolveItemTypeDefaultOnezero,
							),
						source: zod
							.enum(["selected", "inferred"])
							.default(
								readAutomationAutomationsIdGetResponseActionsOnResolveItemSourceDefaultFive,
							),
						automation_id: zod.string().uuid().or(zod.null()).optional(),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								readAutomationAutomationsIdGetResponseActionsOnResolveItemTypeDefaultOneone,
							),
						source: zod
							.enum(["selected", "inferred"])
							.default(
								readAutomationAutomationsIdGetResponseActionsOnResolveItemSourceDefaultSix,
							),
						automation_id: zod.string().uuid().or(zod.null()).optional(),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								readAutomationAutomationsIdGetResponseActionsOnResolveItemTypeDefaultOnetwo,
							),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								readAutomationAutomationsIdGetResponseActionsOnResolveItemTypeDefaultOnethree,
							),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								readAutomationAutomationsIdGetResponseActionsOnResolveItemTypeDefaultOnefour,
							),
						source: zod
							.enum(["selected", "inferred"])
							.default(
								readAutomationAutomationsIdGetResponseActionsOnResolveItemSourceDefaultSeven,
							),
						work_pool_id: zod.string().uuid().or(zod.null()).optional(),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								readAutomationAutomationsIdGetResponseActionsOnResolveItemTypeDefaultOnefive,
							),
						source: zod
							.enum(["selected", "inferred"])
							.default(
								readAutomationAutomationsIdGetResponseActionsOnResolveItemSourceDefaultEight,
							),
						work_pool_id: zod.string().uuid().or(zod.null()).optional(),
					}),
				),
		)
		.optional(),
	id: zod.string().uuid(),
	created: zod.string().datetime().or(zod.null()),
	updated: zod.string().datetime().or(zod.null()),
});

/**
 * @summary Read Automations
 */
export const readAutomationsAutomationsFilterPostHeader = zod.object({
	"x-prefect-api-version": zod.string().optional(),
});

export const readAutomationsAutomationsFilterPostBodyOffsetDefault = 0;
export const readAutomationsAutomationsFilterPostBodyOffsetMin = 0;

export const readAutomationsAutomationsFilterPostBody = zod.object({
	sort: zod
		.enum(["CREATED_DESC", "UPDATED_DESC", "NAME_ASC", "NAME_DESC"])
		.optional(),
	offset: zod
		.number()
		.min(readAutomationsAutomationsFilterPostBodyOffsetMin)
		.optional(),
	automations: zod
		.object({
			operator: zod.enum(["and_", "or_"]).optional(),
			name: zod
				.object({
					any_: zod.array(zod.string()).or(zod.null()).optional(),
				})
				.or(zod.null())
				.optional(),
			created: zod
				.object({
					before_: zod.string().datetime().or(zod.null()).optional(),
				})
				.or(zod.null())
				.optional(),
		})
		.or(zod.null())
		.optional(),
	limit: zod.number().optional(),
});

export const readAutomationsAutomationsFilterPostResponseDescriptionDefault =
	"";
export const readAutomationsAutomationsFilterPostResponseEnabledDefault = true;
export const readAutomationsAutomationsFilterPostResponseTriggerTypeDefault =
	"event";
export const readAutomationsAutomationsFilterPostResponseTriggerThresholdDefault = 1;
export const readAutomationsAutomationsFilterPostResponseTriggerWithinDefault = 0;
export const readAutomationsAutomationsFilterPostResponseTriggerTypeDefaultOne =
	"compound";
export const readAutomationsAutomationsFilterPostResponseTriggerTriggersItemTypeDefault =
	"event";
export const readAutomationsAutomationsFilterPostResponseTriggerTriggersItemThresholdDefault = 1;
export const readAutomationsAutomationsFilterPostResponseTriggerTriggersItemWithinDefault = 0;
export const readAutomationsAutomationsFilterPostResponseTriggerTriggersItemTypeDefaultOne =
	"sequence";
export const readAutomationsAutomationsFilterPostResponseTriggerTriggersItemTriggersItemTypeDefault =
	"event";
export const readAutomationsAutomationsFilterPostResponseTriggerTriggersItemTriggersItemThresholdDefault = 1;
export const readAutomationsAutomationsFilterPostResponseTriggerTriggersItemTriggersItemWithinDefault = 0;
export const readAutomationsAutomationsFilterPostResponseTriggerTypeDefaultTwo =
	"sequence";
export const readAutomationsAutomationsFilterPostResponseTriggerTriggersItemTypeDefaultTwo =
	"event";
export const readAutomationsAutomationsFilterPostResponseTriggerTriggersItemThresholdDefaultOne = 1;
export const readAutomationsAutomationsFilterPostResponseTriggerTriggersItemWithinDefaultFour = 0;
export const readAutomationsAutomationsFilterPostResponseTriggerTriggersItemTypeDefaultThree =
	"compound";
export const readAutomationsAutomationsFilterPostResponseTriggerTriggersItemTriggersItemTypeDefaultOne =
	"event";
export const readAutomationsAutomationsFilterPostResponseTriggerTriggersItemTriggersItemThresholdDefaultOne = 1;
export const readAutomationsAutomationsFilterPostResponseTriggerTriggersItemTriggersItemWithinDefaultOne = 0;
export const readAutomationsAutomationsFilterPostResponseActionsItemTypeDefault =
	"do-nothing";
export const readAutomationsAutomationsFilterPostResponseActionsItemTypeDefaultOne =
	"run-deployment";
export const readAutomationsAutomationsFilterPostResponseActionsItemSourceDefault =
	"selected";
export const readAutomationsAutomationsFilterPostResponseActionsItemTypeDefaultTwo =
	"pause-deployment";
export const readAutomationsAutomationsFilterPostResponseActionsItemSourceDefaultOne =
	"selected";
export const readAutomationsAutomationsFilterPostResponseActionsItemTypeDefaultThree =
	"resume-deployment";
export const readAutomationsAutomationsFilterPostResponseActionsItemSourceDefaultTwo =
	"selected";
export const readAutomationsAutomationsFilterPostResponseActionsItemTypeDefaultFour =
	"cancel-flow-run";
export const readAutomationsAutomationsFilterPostResponseActionsItemTypeDefaultFive =
	"change-flow-run-state";
export const readAutomationsAutomationsFilterPostResponseActionsItemTypeDefaultSix =
	"pause-work-queue";
export const readAutomationsAutomationsFilterPostResponseActionsItemSourceDefaultThree =
	"selected";
export const readAutomationsAutomationsFilterPostResponseActionsItemTypeDefaultSeven =
	"resume-work-queue";
export const readAutomationsAutomationsFilterPostResponseActionsItemSourceDefaultFour =
	"selected";
export const readAutomationsAutomationsFilterPostResponseActionsItemTypeDefaultEight =
	"send-notification";
export const readAutomationsAutomationsFilterPostResponseActionsItemSubjectDefault =
	"Prefect automated notification";
export const readAutomationsAutomationsFilterPostResponseActionsItemTypeDefaultNine =
	"call-webhook";
export const readAutomationsAutomationsFilterPostResponseActionsItemPayloadDefault =
	"";
export const readAutomationsAutomationsFilterPostResponseActionsItemTypeDefaultOnezero =
	"pause-automation";
export const readAutomationsAutomationsFilterPostResponseActionsItemSourceDefaultFive =
	"selected";
export const readAutomationsAutomationsFilterPostResponseActionsItemTypeDefaultOneone =
	"resume-automation";
export const readAutomationsAutomationsFilterPostResponseActionsItemSourceDefaultSix =
	"selected";
export const readAutomationsAutomationsFilterPostResponseActionsItemTypeDefaultOnetwo =
	"suspend-flow-run";
export const readAutomationsAutomationsFilterPostResponseActionsItemTypeDefaultOnethree =
	"resume-flow-run";
export const readAutomationsAutomationsFilterPostResponseActionsItemTypeDefaultOnefour =
	"pause-work-pool";
export const readAutomationsAutomationsFilterPostResponseActionsItemSourceDefaultSeven =
	"selected";
export const readAutomationsAutomationsFilterPostResponseActionsItemTypeDefaultOnefive =
	"resume-work-pool";
export const readAutomationsAutomationsFilterPostResponseActionsItemSourceDefaultEight =
	"selected";
export const readAutomationsAutomationsFilterPostResponseActionsOnTriggerItemTypeDefault =
	"do-nothing";
export const readAutomationsAutomationsFilterPostResponseActionsOnTriggerItemTypeDefaultOne =
	"run-deployment";
export const readAutomationsAutomationsFilterPostResponseActionsOnTriggerItemSourceDefault =
	"selected";
export const readAutomationsAutomationsFilterPostResponseActionsOnTriggerItemTypeDefaultTwo =
	"pause-deployment";
export const readAutomationsAutomationsFilterPostResponseActionsOnTriggerItemSourceDefaultOne =
	"selected";
export const readAutomationsAutomationsFilterPostResponseActionsOnTriggerItemTypeDefaultThree =
	"resume-deployment";
export const readAutomationsAutomationsFilterPostResponseActionsOnTriggerItemSourceDefaultTwo =
	"selected";
export const readAutomationsAutomationsFilterPostResponseActionsOnTriggerItemTypeDefaultFour =
	"cancel-flow-run";
export const readAutomationsAutomationsFilterPostResponseActionsOnTriggerItemTypeDefaultFive =
	"change-flow-run-state";
export const readAutomationsAutomationsFilterPostResponseActionsOnTriggerItemTypeDefaultSix =
	"pause-work-queue";
export const readAutomationsAutomationsFilterPostResponseActionsOnTriggerItemSourceDefaultThree =
	"selected";
export const readAutomationsAutomationsFilterPostResponseActionsOnTriggerItemTypeDefaultSeven =
	"resume-work-queue";
export const readAutomationsAutomationsFilterPostResponseActionsOnTriggerItemSourceDefaultFour =
	"selected";
export const readAutomationsAutomationsFilterPostResponseActionsOnTriggerItemTypeDefaultEight =
	"send-notification";
export const readAutomationsAutomationsFilterPostResponseActionsOnTriggerItemSubjectDefault =
	"Prefect automated notification";
export const readAutomationsAutomationsFilterPostResponseActionsOnTriggerItemTypeDefaultNine =
	"call-webhook";
export const readAutomationsAutomationsFilterPostResponseActionsOnTriggerItemPayloadDefault =
	"";
export const readAutomationsAutomationsFilterPostResponseActionsOnTriggerItemTypeDefaultOnezero =
	"pause-automation";
export const readAutomationsAutomationsFilterPostResponseActionsOnTriggerItemSourceDefaultFive =
	"selected";
export const readAutomationsAutomationsFilterPostResponseActionsOnTriggerItemTypeDefaultOneone =
	"resume-automation";
export const readAutomationsAutomationsFilterPostResponseActionsOnTriggerItemSourceDefaultSix =
	"selected";
export const readAutomationsAutomationsFilterPostResponseActionsOnTriggerItemTypeDefaultOnetwo =
	"suspend-flow-run";
export const readAutomationsAutomationsFilterPostResponseActionsOnTriggerItemTypeDefaultOnethree =
	"resume-flow-run";
export const readAutomationsAutomationsFilterPostResponseActionsOnTriggerItemTypeDefaultOnefour =
	"pause-work-pool";
export const readAutomationsAutomationsFilterPostResponseActionsOnTriggerItemSourceDefaultSeven =
	"selected";
export const readAutomationsAutomationsFilterPostResponseActionsOnTriggerItemTypeDefaultOnefive =
	"resume-work-pool";
export const readAutomationsAutomationsFilterPostResponseActionsOnTriggerItemSourceDefaultEight =
	"selected";
export const readAutomationsAutomationsFilterPostResponseActionsOnResolveItemTypeDefault =
	"do-nothing";
export const readAutomationsAutomationsFilterPostResponseActionsOnResolveItemTypeDefaultOne =
	"run-deployment";
export const readAutomationsAutomationsFilterPostResponseActionsOnResolveItemSourceDefault =
	"selected";
export const readAutomationsAutomationsFilterPostResponseActionsOnResolveItemTypeDefaultTwo =
	"pause-deployment";
export const readAutomationsAutomationsFilterPostResponseActionsOnResolveItemSourceDefaultOne =
	"selected";
export const readAutomationsAutomationsFilterPostResponseActionsOnResolveItemTypeDefaultThree =
	"resume-deployment";
export const readAutomationsAutomationsFilterPostResponseActionsOnResolveItemSourceDefaultTwo =
	"selected";
export const readAutomationsAutomationsFilterPostResponseActionsOnResolveItemTypeDefaultFour =
	"cancel-flow-run";
export const readAutomationsAutomationsFilterPostResponseActionsOnResolveItemTypeDefaultFive =
	"change-flow-run-state";
export const readAutomationsAutomationsFilterPostResponseActionsOnResolveItemTypeDefaultSix =
	"pause-work-queue";
export const readAutomationsAutomationsFilterPostResponseActionsOnResolveItemSourceDefaultThree =
	"selected";
export const readAutomationsAutomationsFilterPostResponseActionsOnResolveItemTypeDefaultSeven =
	"resume-work-queue";
export const readAutomationsAutomationsFilterPostResponseActionsOnResolveItemSourceDefaultFour =
	"selected";
export const readAutomationsAutomationsFilterPostResponseActionsOnResolveItemTypeDefaultEight =
	"send-notification";
export const readAutomationsAutomationsFilterPostResponseActionsOnResolveItemSubjectDefault =
	"Prefect automated notification";
export const readAutomationsAutomationsFilterPostResponseActionsOnResolveItemTypeDefaultNine =
	"call-webhook";
export const readAutomationsAutomationsFilterPostResponseActionsOnResolveItemPayloadDefault =
	"";
export const readAutomationsAutomationsFilterPostResponseActionsOnResolveItemTypeDefaultOnezero =
	"pause-automation";
export const readAutomationsAutomationsFilterPostResponseActionsOnResolveItemSourceDefaultFive =
	"selected";
export const readAutomationsAutomationsFilterPostResponseActionsOnResolveItemTypeDefaultOneone =
	"resume-automation";
export const readAutomationsAutomationsFilterPostResponseActionsOnResolveItemSourceDefaultSix =
	"selected";
export const readAutomationsAutomationsFilterPostResponseActionsOnResolveItemTypeDefaultOnetwo =
	"suspend-flow-run";
export const readAutomationsAutomationsFilterPostResponseActionsOnResolveItemTypeDefaultOnethree =
	"resume-flow-run";
export const readAutomationsAutomationsFilterPostResponseActionsOnResolveItemTypeDefaultOnefour =
	"pause-work-pool";
export const readAutomationsAutomationsFilterPostResponseActionsOnResolveItemSourceDefaultSeven =
	"selected";
export const readAutomationsAutomationsFilterPostResponseActionsOnResolveItemTypeDefaultOnefive =
	"resume-work-pool";
export const readAutomationsAutomationsFilterPostResponseActionsOnResolveItemSourceDefaultEight =
	"selected";

export const readAutomationsAutomationsFilterPostResponseItem = zod.object({
	name: zod.string(),
	description: zod.string().optional(),
	enabled: zod
		.boolean()
		.default(readAutomationsAutomationsFilterPostResponseEnabledDefault),
	trigger: zod
		.object({
			type: zod
				.string()
				.default(
					readAutomationsAutomationsFilterPostResponseTriggerTypeDefault,
				),
			id: zod.string().uuid().optional(),
			match: zod
				.record(zod.string(), zod.string().or(zod.array(zod.string())))
				.optional(),
			match_related: zod
				.record(zod.string(), zod.string().or(zod.array(zod.string())))
				.optional(),
			after: zod.array(zod.string()).optional(),
			expect: zod.array(zod.string()).optional(),
			for_each: zod.array(zod.string()).optional(),
			posture: zod.enum(["Reactive", "Proactive"]),
			threshold: zod
				.number()
				.default(
					readAutomationsAutomationsFilterPostResponseTriggerThresholdDefault,
				),
			within: zod.number().optional(),
		})
		.or(
			zod.object({
				type: zod
					.string()
					.default(
						readAutomationsAutomationsFilterPostResponseTriggerTypeDefaultOne,
					),
				id: zod.string().uuid().optional(),
				triggers: zod.array(
					zod
						.object({
							type: zod
								.string()
								.default(
									readAutomationsAutomationsFilterPostResponseTriggerTriggersItemTypeDefault,
								),
							id: zod.string().uuid().optional(),
							match: zod
								.record(zod.string(), zod.string().or(zod.array(zod.string())))
								.optional(),
							match_related: zod
								.record(zod.string(), zod.string().or(zod.array(zod.string())))
								.optional(),
							after: zod.array(zod.string()).optional(),
							expect: zod.array(zod.string()).optional(),
							for_each: zod.array(zod.string()).optional(),
							posture: zod.enum(["Reactive", "Proactive"]),
							threshold: zod
								.number()
								.default(
									readAutomationsAutomationsFilterPostResponseTriggerTriggersItemThresholdDefault,
								),
							within: zod.number().optional(),
						})
						.or(zod.any())
						.or(
							zod.object({
								type: zod
									.string()
									.default(
										readAutomationsAutomationsFilterPostResponseTriggerTriggersItemTypeDefaultOne,
									),
								id: zod.string().uuid().optional(),
								triggers: zod.array(
									zod
										.object({
											type: zod
												.string()
												.default(
													readAutomationsAutomationsFilterPostResponseTriggerTriggersItemTriggersItemTypeDefault,
												),
											id: zod.string().uuid().optional(),
											match: zod
												.record(
													zod.string(),
													zod.string().or(zod.array(zod.string())),
												)
												.optional(),
											match_related: zod
												.record(
													zod.string(),
													zod.string().or(zod.array(zod.string())),
												)
												.optional(),
											after: zod.array(zod.string()).optional(),
											expect: zod.array(zod.string()).optional(),
											for_each: zod.array(zod.string()).optional(),
											posture: zod.enum(["Reactive", "Proactive"]),
											threshold: zod
												.number()
												.default(
													readAutomationsAutomationsFilterPostResponseTriggerTriggersItemTriggersItemThresholdDefault,
												),
											within: zod.number().optional(),
										})
										.or(zod.any())
										.or(zod.any()),
								),
								within: zod.number().or(zod.null()),
							}),
						),
				),
				within: zod.number().or(zod.null()),
				require: zod.number().or(zod.enum(["any", "all"])),
			}),
		)
		.or(
			zod.object({
				type: zod
					.string()
					.default(
						readAutomationsAutomationsFilterPostResponseTriggerTypeDefaultTwo,
					),
				id: zod.string().uuid().optional(),
				triggers: zod.array(
					zod
						.object({
							type: zod
								.string()
								.default(
									readAutomationsAutomationsFilterPostResponseTriggerTriggersItemTypeDefaultTwo,
								),
							id: zod.string().uuid().optional(),
							match: zod
								.record(zod.string(), zod.string().or(zod.array(zod.string())))
								.optional(),
							match_related: zod
								.record(zod.string(), zod.string().or(zod.array(zod.string())))
								.optional(),
							after: zod.array(zod.string()).optional(),
							expect: zod.array(zod.string()).optional(),
							for_each: zod.array(zod.string()).optional(),
							posture: zod.enum(["Reactive", "Proactive"]),
							threshold: zod
								.number()
								.default(
									readAutomationsAutomationsFilterPostResponseTriggerTriggersItemThresholdDefaultOne,
								),
							within: zod.number().optional(),
						})
						.or(
							zod.object({
								type: zod
									.string()
									.default(
										readAutomationsAutomationsFilterPostResponseTriggerTriggersItemTypeDefaultThree,
									),
								id: zod.string().uuid().optional(),
								triggers: zod.array(
									zod
										.object({
											type: zod
												.string()
												.default(
													readAutomationsAutomationsFilterPostResponseTriggerTriggersItemTriggersItemTypeDefaultOne,
												),
											id: zod.string().uuid().optional(),
											match: zod
												.record(
													zod.string(),
													zod.string().or(zod.array(zod.string())),
												)
												.optional(),
											match_related: zod
												.record(
													zod.string(),
													zod.string().or(zod.array(zod.string())),
												)
												.optional(),
											after: zod.array(zod.string()).optional(),
											expect: zod.array(zod.string()).optional(),
											for_each: zod.array(zod.string()).optional(),
											posture: zod.enum(["Reactive", "Proactive"]),
											threshold: zod
												.number()
												.default(
													readAutomationsAutomationsFilterPostResponseTriggerTriggersItemTriggersItemThresholdDefaultOne,
												),
											within: zod.number().optional(),
										})
										.or(zod.any())
										.or(zod.any()),
								),
								within: zod.number().or(zod.null()),
								require: zod.number().or(zod.enum(["any", "all"])),
							}),
						)
						.or(zod.any()),
				),
				within: zod.number().or(zod.null()),
			}),
		),
	actions: zod.array(
		zod
			.object({
				type: zod
					.string()
					.default(
						readAutomationsAutomationsFilterPostResponseActionsItemTypeDefault,
					),
			})
			.or(
				zod.object({
					type: zod
						.string()
						.default(
							readAutomationsAutomationsFilterPostResponseActionsItemTypeDefaultOne,
						),
					source: zod
						.enum(["selected", "inferred"])
						.default(
							readAutomationsAutomationsFilterPostResponseActionsItemSourceDefault,
						),
					deployment_id: zod.string().uuid().or(zod.null()).optional(),
					parameters: zod.object({}).or(zod.null()).optional(),
					job_variables: zod.object({}).or(zod.null()).optional(),
				}),
			)
			.or(
				zod.object({
					type: zod
						.string()
						.default(
							readAutomationsAutomationsFilterPostResponseActionsItemTypeDefaultTwo,
						),
					source: zod
						.enum(["selected", "inferred"])
						.default(
							readAutomationsAutomationsFilterPostResponseActionsItemSourceDefaultOne,
						),
					deployment_id: zod.string().uuid().or(zod.null()).optional(),
				}),
			)
			.or(
				zod.object({
					type: zod
						.string()
						.default(
							readAutomationsAutomationsFilterPostResponseActionsItemTypeDefaultThree,
						),
					source: zod
						.enum(["selected", "inferred"])
						.default(
							readAutomationsAutomationsFilterPostResponseActionsItemSourceDefaultTwo,
						),
					deployment_id: zod.string().uuid().or(zod.null()).optional(),
				}),
			)
			.or(
				zod.object({
					type: zod
						.string()
						.default(
							readAutomationsAutomationsFilterPostResponseActionsItemTypeDefaultFour,
						),
				}),
			)
			.or(
				zod.object({
					type: zod
						.string()
						.default(
							readAutomationsAutomationsFilterPostResponseActionsItemTypeDefaultFive,
						),
					name: zod.string().or(zod.null()).optional(),
					state: zod.enum([
						"SCHEDULED",
						"PENDING",
						"RUNNING",
						"COMPLETED",
						"FAILED",
						"CANCELLED",
						"CRASHED",
						"PAUSED",
						"CANCELLING",
					]),
					message: zod.string().or(zod.null()).optional(),
				}),
			)
			.or(
				zod.object({
					type: zod
						.string()
						.default(
							readAutomationsAutomationsFilterPostResponseActionsItemTypeDefaultSix,
						),
					source: zod
						.enum(["selected", "inferred"])
						.default(
							readAutomationsAutomationsFilterPostResponseActionsItemSourceDefaultThree,
						),
					work_queue_id: zod.string().uuid().or(zod.null()).optional(),
				}),
			)
			.or(
				zod.object({
					type: zod
						.string()
						.default(
							readAutomationsAutomationsFilterPostResponseActionsItemTypeDefaultSeven,
						),
					source: zod
						.enum(["selected", "inferred"])
						.default(
							readAutomationsAutomationsFilterPostResponseActionsItemSourceDefaultFour,
						),
					work_queue_id: zod.string().uuid().or(zod.null()).optional(),
				}),
			)
			.or(
				zod.object({
					type: zod
						.string()
						.default(
							readAutomationsAutomationsFilterPostResponseActionsItemTypeDefaultEight,
						),
					block_document_id: zod.string().uuid(),
					subject: zod
						.string()
						.default(
							readAutomationsAutomationsFilterPostResponseActionsItemSubjectDefault,
						),
					body: zod.string(),
				}),
			)
			.or(
				zod.object({
					type: zod
						.string()
						.default(
							readAutomationsAutomationsFilterPostResponseActionsItemTypeDefaultNine,
						),
					block_document_id: zod.string().uuid(),
					payload: zod.string().optional(),
				}),
			)
			.or(
				zod.object({
					type: zod
						.string()
						.default(
							readAutomationsAutomationsFilterPostResponseActionsItemTypeDefaultOnezero,
						),
					source: zod
						.enum(["selected", "inferred"])
						.default(
							readAutomationsAutomationsFilterPostResponseActionsItemSourceDefaultFive,
						),
					automation_id: zod.string().uuid().or(zod.null()).optional(),
				}),
			)
			.or(
				zod.object({
					type: zod
						.string()
						.default(
							readAutomationsAutomationsFilterPostResponseActionsItemTypeDefaultOneone,
						),
					source: zod
						.enum(["selected", "inferred"])
						.default(
							readAutomationsAutomationsFilterPostResponseActionsItemSourceDefaultSix,
						),
					automation_id: zod.string().uuid().or(zod.null()).optional(),
				}),
			)
			.or(
				zod.object({
					type: zod
						.string()
						.default(
							readAutomationsAutomationsFilterPostResponseActionsItemTypeDefaultOnetwo,
						),
				}),
			)
			.or(
				zod.object({
					type: zod
						.string()
						.default(
							readAutomationsAutomationsFilterPostResponseActionsItemTypeDefaultOnethree,
						),
				}),
			)
			.or(
				zod.object({
					type: zod
						.string()
						.default(
							readAutomationsAutomationsFilterPostResponseActionsItemTypeDefaultOnefour,
						),
					source: zod
						.enum(["selected", "inferred"])
						.default(
							readAutomationsAutomationsFilterPostResponseActionsItemSourceDefaultSeven,
						),
					work_pool_id: zod.string().uuid().or(zod.null()).optional(),
				}),
			)
			.or(
				zod.object({
					type: zod
						.string()
						.default(
							readAutomationsAutomationsFilterPostResponseActionsItemTypeDefaultOnefive,
						),
					source: zod
						.enum(["selected", "inferred"])
						.default(
							readAutomationsAutomationsFilterPostResponseActionsItemSourceDefaultEight,
						),
					work_pool_id: zod.string().uuid().or(zod.null()).optional(),
				}),
			),
	),
	actions_on_trigger: zod
		.array(
			zod
				.object({
					type: zod
						.string()
						.default(
							readAutomationsAutomationsFilterPostResponseActionsOnTriggerItemTypeDefault,
						),
				})
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								readAutomationsAutomationsFilterPostResponseActionsOnTriggerItemTypeDefaultOne,
							),
						source: zod
							.enum(["selected", "inferred"])
							.default(
								readAutomationsAutomationsFilterPostResponseActionsOnTriggerItemSourceDefault,
							),
						deployment_id: zod.string().uuid().or(zod.null()).optional(),
						parameters: zod.object({}).or(zod.null()).optional(),
						job_variables: zod.object({}).or(zod.null()).optional(),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								readAutomationsAutomationsFilterPostResponseActionsOnTriggerItemTypeDefaultTwo,
							),
						source: zod
							.enum(["selected", "inferred"])
							.default(
								readAutomationsAutomationsFilterPostResponseActionsOnTriggerItemSourceDefaultOne,
							),
						deployment_id: zod.string().uuid().or(zod.null()).optional(),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								readAutomationsAutomationsFilterPostResponseActionsOnTriggerItemTypeDefaultThree,
							),
						source: zod
							.enum(["selected", "inferred"])
							.default(
								readAutomationsAutomationsFilterPostResponseActionsOnTriggerItemSourceDefaultTwo,
							),
						deployment_id: zod.string().uuid().or(zod.null()).optional(),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								readAutomationsAutomationsFilterPostResponseActionsOnTriggerItemTypeDefaultFour,
							),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								readAutomationsAutomationsFilterPostResponseActionsOnTriggerItemTypeDefaultFive,
							),
						name: zod.string().or(zod.null()).optional(),
						state: zod.enum([
							"SCHEDULED",
							"PENDING",
							"RUNNING",
							"COMPLETED",
							"FAILED",
							"CANCELLED",
							"CRASHED",
							"PAUSED",
							"CANCELLING",
						]),
						message: zod.string().or(zod.null()).optional(),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								readAutomationsAutomationsFilterPostResponseActionsOnTriggerItemTypeDefaultSix,
							),
						source: zod
							.enum(["selected", "inferred"])
							.default(
								readAutomationsAutomationsFilterPostResponseActionsOnTriggerItemSourceDefaultThree,
							),
						work_queue_id: zod.string().uuid().or(zod.null()).optional(),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								readAutomationsAutomationsFilterPostResponseActionsOnTriggerItemTypeDefaultSeven,
							),
						source: zod
							.enum(["selected", "inferred"])
							.default(
								readAutomationsAutomationsFilterPostResponseActionsOnTriggerItemSourceDefaultFour,
							),
						work_queue_id: zod.string().uuid().or(zod.null()).optional(),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								readAutomationsAutomationsFilterPostResponseActionsOnTriggerItemTypeDefaultEight,
							),
						block_document_id: zod.string().uuid(),
						subject: zod
							.string()
							.default(
								readAutomationsAutomationsFilterPostResponseActionsOnTriggerItemSubjectDefault,
							),
						body: zod.string(),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								readAutomationsAutomationsFilterPostResponseActionsOnTriggerItemTypeDefaultNine,
							),
						block_document_id: zod.string().uuid(),
						payload: zod.string().optional(),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								readAutomationsAutomationsFilterPostResponseActionsOnTriggerItemTypeDefaultOnezero,
							),
						source: zod
							.enum(["selected", "inferred"])
							.default(
								readAutomationsAutomationsFilterPostResponseActionsOnTriggerItemSourceDefaultFive,
							),
						automation_id: zod.string().uuid().or(zod.null()).optional(),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								readAutomationsAutomationsFilterPostResponseActionsOnTriggerItemTypeDefaultOneone,
							),
						source: zod
							.enum(["selected", "inferred"])
							.default(
								readAutomationsAutomationsFilterPostResponseActionsOnTriggerItemSourceDefaultSix,
							),
						automation_id: zod.string().uuid().or(zod.null()).optional(),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								readAutomationsAutomationsFilterPostResponseActionsOnTriggerItemTypeDefaultOnetwo,
							),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								readAutomationsAutomationsFilterPostResponseActionsOnTriggerItemTypeDefaultOnethree,
							),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								readAutomationsAutomationsFilterPostResponseActionsOnTriggerItemTypeDefaultOnefour,
							),
						source: zod
							.enum(["selected", "inferred"])
							.default(
								readAutomationsAutomationsFilterPostResponseActionsOnTriggerItemSourceDefaultSeven,
							),
						work_pool_id: zod.string().uuid().or(zod.null()).optional(),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								readAutomationsAutomationsFilterPostResponseActionsOnTriggerItemTypeDefaultOnefive,
							),
						source: zod
							.enum(["selected", "inferred"])
							.default(
								readAutomationsAutomationsFilterPostResponseActionsOnTriggerItemSourceDefaultEight,
							),
						work_pool_id: zod.string().uuid().or(zod.null()).optional(),
					}),
				),
		)
		.optional(),
	actions_on_resolve: zod
		.array(
			zod
				.object({
					type: zod
						.string()
						.default(
							readAutomationsAutomationsFilterPostResponseActionsOnResolveItemTypeDefault,
						),
				})
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								readAutomationsAutomationsFilterPostResponseActionsOnResolveItemTypeDefaultOne,
							),
						source: zod
							.enum(["selected", "inferred"])
							.default(
								readAutomationsAutomationsFilterPostResponseActionsOnResolveItemSourceDefault,
							),
						deployment_id: zod.string().uuid().or(zod.null()).optional(),
						parameters: zod.object({}).or(zod.null()).optional(),
						job_variables: zod.object({}).or(zod.null()).optional(),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								readAutomationsAutomationsFilterPostResponseActionsOnResolveItemTypeDefaultTwo,
							),
						source: zod
							.enum(["selected", "inferred"])
							.default(
								readAutomationsAutomationsFilterPostResponseActionsOnResolveItemSourceDefaultOne,
							),
						deployment_id: zod.string().uuid().or(zod.null()).optional(),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								readAutomationsAutomationsFilterPostResponseActionsOnResolveItemTypeDefaultThree,
							),
						source: zod
							.enum(["selected", "inferred"])
							.default(
								readAutomationsAutomationsFilterPostResponseActionsOnResolveItemSourceDefaultTwo,
							),
						deployment_id: zod.string().uuid().or(zod.null()).optional(),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								readAutomationsAutomationsFilterPostResponseActionsOnResolveItemTypeDefaultFour,
							),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								readAutomationsAutomationsFilterPostResponseActionsOnResolveItemTypeDefaultFive,
							),
						name: zod.string().or(zod.null()).optional(),
						state: zod.enum([
							"SCHEDULED",
							"PENDING",
							"RUNNING",
							"COMPLETED",
							"FAILED",
							"CANCELLED",
							"CRASHED",
							"PAUSED",
							"CANCELLING",
						]),
						message: zod.string().or(zod.null()).optional(),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								readAutomationsAutomationsFilterPostResponseActionsOnResolveItemTypeDefaultSix,
							),
						source: zod
							.enum(["selected", "inferred"])
							.default(
								readAutomationsAutomationsFilterPostResponseActionsOnResolveItemSourceDefaultThree,
							),
						work_queue_id: zod.string().uuid().or(zod.null()).optional(),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								readAutomationsAutomationsFilterPostResponseActionsOnResolveItemTypeDefaultSeven,
							),
						source: zod
							.enum(["selected", "inferred"])
							.default(
								readAutomationsAutomationsFilterPostResponseActionsOnResolveItemSourceDefaultFour,
							),
						work_queue_id: zod.string().uuid().or(zod.null()).optional(),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								readAutomationsAutomationsFilterPostResponseActionsOnResolveItemTypeDefaultEight,
							),
						block_document_id: zod.string().uuid(),
						subject: zod
							.string()
							.default(
								readAutomationsAutomationsFilterPostResponseActionsOnResolveItemSubjectDefault,
							),
						body: zod.string(),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								readAutomationsAutomationsFilterPostResponseActionsOnResolveItemTypeDefaultNine,
							),
						block_document_id: zod.string().uuid(),
						payload: zod.string().optional(),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								readAutomationsAutomationsFilterPostResponseActionsOnResolveItemTypeDefaultOnezero,
							),
						source: zod
							.enum(["selected", "inferred"])
							.default(
								readAutomationsAutomationsFilterPostResponseActionsOnResolveItemSourceDefaultFive,
							),
						automation_id: zod.string().uuid().or(zod.null()).optional(),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								readAutomationsAutomationsFilterPostResponseActionsOnResolveItemTypeDefaultOneone,
							),
						source: zod
							.enum(["selected", "inferred"])
							.default(
								readAutomationsAutomationsFilterPostResponseActionsOnResolveItemSourceDefaultSix,
							),
						automation_id: zod.string().uuid().or(zod.null()).optional(),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								readAutomationsAutomationsFilterPostResponseActionsOnResolveItemTypeDefaultOnetwo,
							),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								readAutomationsAutomationsFilterPostResponseActionsOnResolveItemTypeDefaultOnethree,
							),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								readAutomationsAutomationsFilterPostResponseActionsOnResolveItemTypeDefaultOnefour,
							),
						source: zod
							.enum(["selected", "inferred"])
							.default(
								readAutomationsAutomationsFilterPostResponseActionsOnResolveItemSourceDefaultSeven,
							),
						work_pool_id: zod.string().uuid().or(zod.null()).optional(),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								readAutomationsAutomationsFilterPostResponseActionsOnResolveItemTypeDefaultOnefive,
							),
						source: zod
							.enum(["selected", "inferred"])
							.default(
								readAutomationsAutomationsFilterPostResponseActionsOnResolveItemSourceDefaultEight,
							),
						work_pool_id: zod.string().uuid().or(zod.null()).optional(),
					}),
				),
		)
		.optional(),
	id: zod.string().uuid(),
	created: zod.string().datetime().or(zod.null()),
	updated: zod.string().datetime().or(zod.null()),
});
export const readAutomationsAutomationsFilterPostResponse = zod.array(
	readAutomationsAutomationsFilterPostResponseItem,
);

/**
 * @summary Count Automations
 */
export const countAutomationsAutomationsCountPostHeader = zod.object({
	"x-prefect-api-version": zod.string().optional(),
});

export const countAutomationsAutomationsCountPostResponse = zod.number();

/**
 * @summary Read Automations Related To Resource
 */
export const readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetParams =
	zod.object({
		resource_id: zod.string(),
	});

export const readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetHeader =
	zod.object({
		"x-prefect-api-version": zod.string().optional(),
	});

export const readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseDescriptionDefault =
	"";
export const readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseEnabledDefault = true;
export const readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseTriggerTypeDefault =
	"event";
export const readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseTriggerThresholdDefault = 1;
export const readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseTriggerWithinDefault = 0;
export const readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseTriggerTypeDefaultOne =
	"compound";
export const readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseTriggerTriggersItemTypeDefault =
	"event";
export const readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseTriggerTriggersItemThresholdDefault = 1;
export const readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseTriggerTriggersItemWithinDefault = 0;
export const readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseTriggerTriggersItemTypeDefaultOne =
	"sequence";
export const readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseTriggerTriggersItemTriggersItemTypeDefault =
	"event";
export const readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseTriggerTriggersItemTriggersItemThresholdDefault = 1;
export const readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseTriggerTriggersItemTriggersItemWithinDefault = 0;
export const readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseTriggerTypeDefaultTwo =
	"sequence";
export const readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseTriggerTriggersItemTypeDefaultTwo =
	"event";
export const readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseTriggerTriggersItemThresholdDefaultOne = 1;
export const readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseTriggerTriggersItemWithinDefaultFour = 0;
export const readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseTriggerTriggersItemTypeDefaultThree =
	"compound";
export const readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseTriggerTriggersItemTriggersItemTypeDefaultOne =
	"event";
export const readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseTriggerTriggersItemTriggersItemThresholdDefaultOne = 1;
export const readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseTriggerTriggersItemTriggersItemWithinDefaultOne = 0;
export const readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsItemTypeDefault =
	"do-nothing";
export const readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsItemTypeDefaultOne =
	"run-deployment";
export const readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsItemSourceDefault =
	"selected";
export const readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsItemTypeDefaultTwo =
	"pause-deployment";
export const readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsItemSourceDefaultOne =
	"selected";
export const readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsItemTypeDefaultThree =
	"resume-deployment";
export const readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsItemSourceDefaultTwo =
	"selected";
export const readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsItemTypeDefaultFour =
	"cancel-flow-run";
export const readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsItemTypeDefaultFive =
	"change-flow-run-state";
export const readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsItemTypeDefaultSix =
	"pause-work-queue";
export const readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsItemSourceDefaultThree =
	"selected";
export const readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsItemTypeDefaultSeven =
	"resume-work-queue";
export const readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsItemSourceDefaultFour =
	"selected";
export const readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsItemTypeDefaultEight =
	"send-notification";
export const readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsItemSubjectDefault =
	"Prefect automated notification";
export const readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsItemTypeDefaultNine =
	"call-webhook";
export const readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsItemPayloadDefault =
	"";
export const readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsItemTypeDefaultOnezero =
	"pause-automation";
export const readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsItemSourceDefaultFive =
	"selected";
export const readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsItemTypeDefaultOneone =
	"resume-automation";
export const readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsItemSourceDefaultSix =
	"selected";
export const readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsItemTypeDefaultOnetwo =
	"suspend-flow-run";
export const readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsItemTypeDefaultOnethree =
	"resume-flow-run";
export const readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsItemTypeDefaultOnefour =
	"pause-work-pool";
export const readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsItemSourceDefaultSeven =
	"selected";
export const readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsItemTypeDefaultOnefive =
	"resume-work-pool";
export const readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsItemSourceDefaultEight =
	"selected";
export const readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsOnTriggerItemTypeDefault =
	"do-nothing";
export const readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsOnTriggerItemTypeDefaultOne =
	"run-deployment";
export const readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsOnTriggerItemSourceDefault =
	"selected";
export const readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsOnTriggerItemTypeDefaultTwo =
	"pause-deployment";
export const readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsOnTriggerItemSourceDefaultOne =
	"selected";
export const readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsOnTriggerItemTypeDefaultThree =
	"resume-deployment";
export const readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsOnTriggerItemSourceDefaultTwo =
	"selected";
export const readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsOnTriggerItemTypeDefaultFour =
	"cancel-flow-run";
export const readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsOnTriggerItemTypeDefaultFive =
	"change-flow-run-state";
export const readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsOnTriggerItemTypeDefaultSix =
	"pause-work-queue";
export const readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsOnTriggerItemSourceDefaultThree =
	"selected";
export const readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsOnTriggerItemTypeDefaultSeven =
	"resume-work-queue";
export const readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsOnTriggerItemSourceDefaultFour =
	"selected";
export const readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsOnTriggerItemTypeDefaultEight =
	"send-notification";
export const readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsOnTriggerItemSubjectDefault =
	"Prefect automated notification";
export const readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsOnTriggerItemTypeDefaultNine =
	"call-webhook";
export const readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsOnTriggerItemPayloadDefault =
	"";
export const readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsOnTriggerItemTypeDefaultOnezero =
	"pause-automation";
export const readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsOnTriggerItemSourceDefaultFive =
	"selected";
export const readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsOnTriggerItemTypeDefaultOneone =
	"resume-automation";
export const readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsOnTriggerItemSourceDefaultSix =
	"selected";
export const readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsOnTriggerItemTypeDefaultOnetwo =
	"suspend-flow-run";
export const readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsOnTriggerItemTypeDefaultOnethree =
	"resume-flow-run";
export const readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsOnTriggerItemTypeDefaultOnefour =
	"pause-work-pool";
export const readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsOnTriggerItemSourceDefaultSeven =
	"selected";
export const readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsOnTriggerItemTypeDefaultOnefive =
	"resume-work-pool";
export const readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsOnTriggerItemSourceDefaultEight =
	"selected";
export const readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsOnResolveItemTypeDefault =
	"do-nothing";
export const readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsOnResolveItemTypeDefaultOne =
	"run-deployment";
export const readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsOnResolveItemSourceDefault =
	"selected";
export const readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsOnResolveItemTypeDefaultTwo =
	"pause-deployment";
export const readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsOnResolveItemSourceDefaultOne =
	"selected";
export const readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsOnResolveItemTypeDefaultThree =
	"resume-deployment";
export const readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsOnResolveItemSourceDefaultTwo =
	"selected";
export const readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsOnResolveItemTypeDefaultFour =
	"cancel-flow-run";
export const readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsOnResolveItemTypeDefaultFive =
	"change-flow-run-state";
export const readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsOnResolveItemTypeDefaultSix =
	"pause-work-queue";
export const readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsOnResolveItemSourceDefaultThree =
	"selected";
export const readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsOnResolveItemTypeDefaultSeven =
	"resume-work-queue";
export const readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsOnResolveItemSourceDefaultFour =
	"selected";
export const readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsOnResolveItemTypeDefaultEight =
	"send-notification";
export const readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsOnResolveItemSubjectDefault =
	"Prefect automated notification";
export const readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsOnResolveItemTypeDefaultNine =
	"call-webhook";
export const readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsOnResolveItemPayloadDefault =
	"";
export const readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsOnResolveItemTypeDefaultOnezero =
	"pause-automation";
export const readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsOnResolveItemSourceDefaultFive =
	"selected";
export const readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsOnResolveItemTypeDefaultOneone =
	"resume-automation";
export const readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsOnResolveItemSourceDefaultSix =
	"selected";
export const readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsOnResolveItemTypeDefaultOnetwo =
	"suspend-flow-run";
export const readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsOnResolveItemTypeDefaultOnethree =
	"resume-flow-run";
export const readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsOnResolveItemTypeDefaultOnefour =
	"pause-work-pool";
export const readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsOnResolveItemSourceDefaultSeven =
	"selected";
export const readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsOnResolveItemTypeDefaultOnefive =
	"resume-work-pool";
export const readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsOnResolveItemSourceDefaultEight =
	"selected";

export const readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseItem =
	zod.object({
		name: zod.string(),
		description: zod.string().optional(),
		enabled: zod
			.boolean()
			.default(
				readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseEnabledDefault,
			),
		trigger: zod
			.object({
				type: zod
					.string()
					.default(
						readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseTriggerTypeDefault,
					),
				id: zod.string().uuid().optional(),
				match: zod
					.record(zod.string(), zod.string().or(zod.array(zod.string())))
					.optional(),
				match_related: zod
					.record(zod.string(), zod.string().or(zod.array(zod.string())))
					.optional(),
				after: zod.array(zod.string()).optional(),
				expect: zod.array(zod.string()).optional(),
				for_each: zod.array(zod.string()).optional(),
				posture: zod.enum(["Reactive", "Proactive"]),
				threshold: zod
					.number()
					.default(
						readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseTriggerThresholdDefault,
					),
				within: zod.number().optional(),
			})
			.or(
				zod.object({
					type: zod
						.string()
						.default(
							readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseTriggerTypeDefaultOne,
						),
					id: zod.string().uuid().optional(),
					triggers: zod.array(
						zod
							.object({
								type: zod
									.string()
									.default(
										readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseTriggerTriggersItemTypeDefault,
									),
								id: zod.string().uuid().optional(),
								match: zod
									.record(
										zod.string(),
										zod.string().or(zod.array(zod.string())),
									)
									.optional(),
								match_related: zod
									.record(
										zod.string(),
										zod.string().or(zod.array(zod.string())),
									)
									.optional(),
								after: zod.array(zod.string()).optional(),
								expect: zod.array(zod.string()).optional(),
								for_each: zod.array(zod.string()).optional(),
								posture: zod.enum(["Reactive", "Proactive"]),
								threshold: zod
									.number()
									.default(
										readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseTriggerTriggersItemThresholdDefault,
									),
								within: zod.number().optional(),
							})
							.or(zod.any())
							.or(
								zod.object({
									type: zod
										.string()
										.default(
											readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseTriggerTriggersItemTypeDefaultOne,
										),
									id: zod.string().uuid().optional(),
									triggers: zod.array(
										zod
											.object({
												type: zod
													.string()
													.default(
														readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseTriggerTriggersItemTriggersItemTypeDefault,
													),
												id: zod.string().uuid().optional(),
												match: zod
													.record(
														zod.string(),
														zod.string().or(zod.array(zod.string())),
													)
													.optional(),
												match_related: zod
													.record(
														zod.string(),
														zod.string().or(zod.array(zod.string())),
													)
													.optional(),
												after: zod.array(zod.string()).optional(),
												expect: zod.array(zod.string()).optional(),
												for_each: zod.array(zod.string()).optional(),
												posture: zod.enum(["Reactive", "Proactive"]),
												threshold: zod
													.number()
													.default(
														readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseTriggerTriggersItemTriggersItemThresholdDefault,
													),
												within: zod.number().optional(),
											})
											.or(zod.any())
											.or(zod.any()),
									),
									within: zod.number().or(zod.null()),
								}),
							),
					),
					within: zod.number().or(zod.null()),
					require: zod.number().or(zod.enum(["any", "all"])),
				}),
			)
			.or(
				zod.object({
					type: zod
						.string()
						.default(
							readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseTriggerTypeDefaultTwo,
						),
					id: zod.string().uuid().optional(),
					triggers: zod.array(
						zod
							.object({
								type: zod
									.string()
									.default(
										readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseTriggerTriggersItemTypeDefaultTwo,
									),
								id: zod.string().uuid().optional(),
								match: zod
									.record(
										zod.string(),
										zod.string().or(zod.array(zod.string())),
									)
									.optional(),
								match_related: zod
									.record(
										zod.string(),
										zod.string().or(zod.array(zod.string())),
									)
									.optional(),
								after: zod.array(zod.string()).optional(),
								expect: zod.array(zod.string()).optional(),
								for_each: zod.array(zod.string()).optional(),
								posture: zod.enum(["Reactive", "Proactive"]),
								threshold: zod
									.number()
									.default(
										readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseTriggerTriggersItemThresholdDefaultOne,
									),
								within: zod.number().optional(),
							})
							.or(
								zod.object({
									type: zod
										.string()
										.default(
											readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseTriggerTriggersItemTypeDefaultThree,
										),
									id: zod.string().uuid().optional(),
									triggers: zod.array(
										zod
											.object({
												type: zod
													.string()
													.default(
														readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseTriggerTriggersItemTriggersItemTypeDefaultOne,
													),
												id: zod.string().uuid().optional(),
												match: zod
													.record(
														zod.string(),
														zod.string().or(zod.array(zod.string())),
													)
													.optional(),
												match_related: zod
													.record(
														zod.string(),
														zod.string().or(zod.array(zod.string())),
													)
													.optional(),
												after: zod.array(zod.string()).optional(),
												expect: zod.array(zod.string()).optional(),
												for_each: zod.array(zod.string()).optional(),
												posture: zod.enum(["Reactive", "Proactive"]),
												threshold: zod
													.number()
													.default(
														readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseTriggerTriggersItemTriggersItemThresholdDefaultOne,
													),
												within: zod.number().optional(),
											})
											.or(zod.any())
											.or(zod.any()),
									),
									within: zod.number().or(zod.null()),
									require: zod.number().or(zod.enum(["any", "all"])),
								}),
							)
							.or(zod.any()),
					),
					within: zod.number().or(zod.null()),
				}),
			),
		actions: zod.array(
			zod
				.object({
					type: zod
						.string()
						.default(
							readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsItemTypeDefault,
						),
				})
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsItemTypeDefaultOne,
							),
						source: zod
							.enum(["selected", "inferred"])
							.default(
								readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsItemSourceDefault,
							),
						deployment_id: zod.string().uuid().or(zod.null()).optional(),
						parameters: zod.object({}).or(zod.null()).optional(),
						job_variables: zod.object({}).or(zod.null()).optional(),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsItemTypeDefaultTwo,
							),
						source: zod
							.enum(["selected", "inferred"])
							.default(
								readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsItemSourceDefaultOne,
							),
						deployment_id: zod.string().uuid().or(zod.null()).optional(),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsItemTypeDefaultThree,
							),
						source: zod
							.enum(["selected", "inferred"])
							.default(
								readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsItemSourceDefaultTwo,
							),
						deployment_id: zod.string().uuid().or(zod.null()).optional(),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsItemTypeDefaultFour,
							),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsItemTypeDefaultFive,
							),
						name: zod.string().or(zod.null()).optional(),
						state: zod.enum([
							"SCHEDULED",
							"PENDING",
							"RUNNING",
							"COMPLETED",
							"FAILED",
							"CANCELLED",
							"CRASHED",
							"PAUSED",
							"CANCELLING",
						]),
						message: zod.string().or(zod.null()).optional(),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsItemTypeDefaultSix,
							),
						source: zod
							.enum(["selected", "inferred"])
							.default(
								readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsItemSourceDefaultThree,
							),
						work_queue_id: zod.string().uuid().or(zod.null()).optional(),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsItemTypeDefaultSeven,
							),
						source: zod
							.enum(["selected", "inferred"])
							.default(
								readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsItemSourceDefaultFour,
							),
						work_queue_id: zod.string().uuid().or(zod.null()).optional(),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsItemTypeDefaultEight,
							),
						block_document_id: zod.string().uuid(),
						subject: zod
							.string()
							.default(
								readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsItemSubjectDefault,
							),
						body: zod.string(),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsItemTypeDefaultNine,
							),
						block_document_id: zod.string().uuid(),
						payload: zod.string().optional(),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsItemTypeDefaultOnezero,
							),
						source: zod
							.enum(["selected", "inferred"])
							.default(
								readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsItemSourceDefaultFive,
							),
						automation_id: zod.string().uuid().or(zod.null()).optional(),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsItemTypeDefaultOneone,
							),
						source: zod
							.enum(["selected", "inferred"])
							.default(
								readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsItemSourceDefaultSix,
							),
						automation_id: zod.string().uuid().or(zod.null()).optional(),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsItemTypeDefaultOnetwo,
							),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsItemTypeDefaultOnethree,
							),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsItemTypeDefaultOnefour,
							),
						source: zod
							.enum(["selected", "inferred"])
							.default(
								readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsItemSourceDefaultSeven,
							),
						work_pool_id: zod.string().uuid().or(zod.null()).optional(),
					}),
				)
				.or(
					zod.object({
						type: zod
							.string()
							.default(
								readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsItemTypeDefaultOnefive,
							),
						source: zod
							.enum(["selected", "inferred"])
							.default(
								readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsItemSourceDefaultEight,
							),
						work_pool_id: zod.string().uuid().or(zod.null()).optional(),
					}),
				),
		),
		actions_on_trigger: zod
			.array(
				zod
					.object({
						type: zod
							.string()
							.default(
								readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsOnTriggerItemTypeDefault,
							),
					})
					.or(
						zod.object({
							type: zod
								.string()
								.default(
									readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsOnTriggerItemTypeDefaultOne,
								),
							source: zod
								.enum(["selected", "inferred"])
								.default(
									readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsOnTriggerItemSourceDefault,
								),
							deployment_id: zod.string().uuid().or(zod.null()).optional(),
							parameters: zod.object({}).or(zod.null()).optional(),
							job_variables: zod.object({}).or(zod.null()).optional(),
						}),
					)
					.or(
						zod.object({
							type: zod
								.string()
								.default(
									readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsOnTriggerItemTypeDefaultTwo,
								),
							source: zod
								.enum(["selected", "inferred"])
								.default(
									readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsOnTriggerItemSourceDefaultOne,
								),
							deployment_id: zod.string().uuid().or(zod.null()).optional(),
						}),
					)
					.or(
						zod.object({
							type: zod
								.string()
								.default(
									readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsOnTriggerItemTypeDefaultThree,
								),
							source: zod
								.enum(["selected", "inferred"])
								.default(
									readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsOnTriggerItemSourceDefaultTwo,
								),
							deployment_id: zod.string().uuid().or(zod.null()).optional(),
						}),
					)
					.or(
						zod.object({
							type: zod
								.string()
								.default(
									readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsOnTriggerItemTypeDefaultFour,
								),
						}),
					)
					.or(
						zod.object({
							type: zod
								.string()
								.default(
									readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsOnTriggerItemTypeDefaultFive,
								),
							name: zod.string().or(zod.null()).optional(),
							state: zod.enum([
								"SCHEDULED",
								"PENDING",
								"RUNNING",
								"COMPLETED",
								"FAILED",
								"CANCELLED",
								"CRASHED",
								"PAUSED",
								"CANCELLING",
							]),
							message: zod.string().or(zod.null()).optional(),
						}),
					)
					.or(
						zod.object({
							type: zod
								.string()
								.default(
									readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsOnTriggerItemTypeDefaultSix,
								),
							source: zod
								.enum(["selected", "inferred"])
								.default(
									readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsOnTriggerItemSourceDefaultThree,
								),
							work_queue_id: zod.string().uuid().or(zod.null()).optional(),
						}),
					)
					.or(
						zod.object({
							type: zod
								.string()
								.default(
									readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsOnTriggerItemTypeDefaultSeven,
								),
							source: zod
								.enum(["selected", "inferred"])
								.default(
									readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsOnTriggerItemSourceDefaultFour,
								),
							work_queue_id: zod.string().uuid().or(zod.null()).optional(),
						}),
					)
					.or(
						zod.object({
							type: zod
								.string()
								.default(
									readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsOnTriggerItemTypeDefaultEight,
								),
							block_document_id: zod.string().uuid(),
							subject: zod
								.string()
								.default(
									readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsOnTriggerItemSubjectDefault,
								),
							body: zod.string(),
						}),
					)
					.or(
						zod.object({
							type: zod
								.string()
								.default(
									readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsOnTriggerItemTypeDefaultNine,
								),
							block_document_id: zod.string().uuid(),
							payload: zod.string().optional(),
						}),
					)
					.or(
						zod.object({
							type: zod
								.string()
								.default(
									readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsOnTriggerItemTypeDefaultOnezero,
								),
							source: zod
								.enum(["selected", "inferred"])
								.default(
									readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsOnTriggerItemSourceDefaultFive,
								),
							automation_id: zod.string().uuid().or(zod.null()).optional(),
						}),
					)
					.or(
						zod.object({
							type: zod
								.string()
								.default(
									readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsOnTriggerItemTypeDefaultOneone,
								),
							source: zod
								.enum(["selected", "inferred"])
								.default(
									readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsOnTriggerItemSourceDefaultSix,
								),
							automation_id: zod.string().uuid().or(zod.null()).optional(),
						}),
					)
					.or(
						zod.object({
							type: zod
								.string()
								.default(
									readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsOnTriggerItemTypeDefaultOnetwo,
								),
						}),
					)
					.or(
						zod.object({
							type: zod
								.string()
								.default(
									readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsOnTriggerItemTypeDefaultOnethree,
								),
						}),
					)
					.or(
						zod.object({
							type: zod
								.string()
								.default(
									readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsOnTriggerItemTypeDefaultOnefour,
								),
							source: zod
								.enum(["selected", "inferred"])
								.default(
									readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsOnTriggerItemSourceDefaultSeven,
								),
							work_pool_id: zod.string().uuid().or(zod.null()).optional(),
						}),
					)
					.or(
						zod.object({
							type: zod
								.string()
								.default(
									readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsOnTriggerItemTypeDefaultOnefive,
								),
							source: zod
								.enum(["selected", "inferred"])
								.default(
									readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsOnTriggerItemSourceDefaultEight,
								),
							work_pool_id: zod.string().uuid().or(zod.null()).optional(),
						}),
					),
			)
			.optional(),
		actions_on_resolve: zod
			.array(
				zod
					.object({
						type: zod
							.string()
							.default(
								readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsOnResolveItemTypeDefault,
							),
					})
					.or(
						zod.object({
							type: zod
								.string()
								.default(
									readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsOnResolveItemTypeDefaultOne,
								),
							source: zod
								.enum(["selected", "inferred"])
								.default(
									readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsOnResolveItemSourceDefault,
								),
							deployment_id: zod.string().uuid().or(zod.null()).optional(),
							parameters: zod.object({}).or(zod.null()).optional(),
							job_variables: zod.object({}).or(zod.null()).optional(),
						}),
					)
					.or(
						zod.object({
							type: zod
								.string()
								.default(
									readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsOnResolveItemTypeDefaultTwo,
								),
							source: zod
								.enum(["selected", "inferred"])
								.default(
									readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsOnResolveItemSourceDefaultOne,
								),
							deployment_id: zod.string().uuid().or(zod.null()).optional(),
						}),
					)
					.or(
						zod.object({
							type: zod
								.string()
								.default(
									readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsOnResolveItemTypeDefaultThree,
								),
							source: zod
								.enum(["selected", "inferred"])
								.default(
									readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsOnResolveItemSourceDefaultTwo,
								),
							deployment_id: zod.string().uuid().or(zod.null()).optional(),
						}),
					)
					.or(
						zod.object({
							type: zod
								.string()
								.default(
									readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsOnResolveItemTypeDefaultFour,
								),
						}),
					)
					.or(
						zod.object({
							type: zod
								.string()
								.default(
									readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsOnResolveItemTypeDefaultFive,
								),
							name: zod.string().or(zod.null()).optional(),
							state: zod.enum([
								"SCHEDULED",
								"PENDING",
								"RUNNING",
								"COMPLETED",
								"FAILED",
								"CANCELLED",
								"CRASHED",
								"PAUSED",
								"CANCELLING",
							]),
							message: zod.string().or(zod.null()).optional(),
						}),
					)
					.or(
						zod.object({
							type: zod
								.string()
								.default(
									readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsOnResolveItemTypeDefaultSix,
								),
							source: zod
								.enum(["selected", "inferred"])
								.default(
									readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsOnResolveItemSourceDefaultThree,
								),
							work_queue_id: zod.string().uuid().or(zod.null()).optional(),
						}),
					)
					.or(
						zod.object({
							type: zod
								.string()
								.default(
									readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsOnResolveItemTypeDefaultSeven,
								),
							source: zod
								.enum(["selected", "inferred"])
								.default(
									readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsOnResolveItemSourceDefaultFour,
								),
							work_queue_id: zod.string().uuid().or(zod.null()).optional(),
						}),
					)
					.or(
						zod.object({
							type: zod
								.string()
								.default(
									readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsOnResolveItemTypeDefaultEight,
								),
							block_document_id: zod.string().uuid(),
							subject: zod
								.string()
								.default(
									readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsOnResolveItemSubjectDefault,
								),
							body: zod.string(),
						}),
					)
					.or(
						zod.object({
							type: zod
								.string()
								.default(
									readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsOnResolveItemTypeDefaultNine,
								),
							block_document_id: zod.string().uuid(),
							payload: zod.string().optional(),
						}),
					)
					.or(
						zod.object({
							type: zod
								.string()
								.default(
									readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsOnResolveItemTypeDefaultOnezero,
								),
							source: zod
								.enum(["selected", "inferred"])
								.default(
									readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsOnResolveItemSourceDefaultFive,
								),
							automation_id: zod.string().uuid().or(zod.null()).optional(),
						}),
					)
					.or(
						zod.object({
							type: zod
								.string()
								.default(
									readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsOnResolveItemTypeDefaultOneone,
								),
							source: zod
								.enum(["selected", "inferred"])
								.default(
									readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsOnResolveItemSourceDefaultSix,
								),
							automation_id: zod.string().uuid().or(zod.null()).optional(),
						}),
					)
					.or(
						zod.object({
							type: zod
								.string()
								.default(
									readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsOnResolveItemTypeDefaultOnetwo,
								),
						}),
					)
					.or(
						zod.object({
							type: zod
								.string()
								.default(
									readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsOnResolveItemTypeDefaultOnethree,
								),
						}),
					)
					.or(
						zod.object({
							type: zod
								.string()
								.default(
									readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsOnResolveItemTypeDefaultOnefour,
								),
							source: zod
								.enum(["selected", "inferred"])
								.default(
									readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsOnResolveItemSourceDefaultSeven,
								),
							work_pool_id: zod.string().uuid().or(zod.null()).optional(),
						}),
					)
					.or(
						zod.object({
							type: zod
								.string()
								.default(
									readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsOnResolveItemTypeDefaultOnefive,
								),
							source: zod
								.enum(["selected", "inferred"])
								.default(
									readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseActionsOnResolveItemSourceDefaultEight,
								),
							work_pool_id: zod.string().uuid().or(zod.null()).optional(),
						}),
					),
			)
			.optional(),
		id: zod.string().uuid(),
		created: zod.string().datetime().or(zod.null()),
		updated: zod.string().datetime().or(zod.null()),
	});
export const readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponse =
	zod.array(
		readAutomationsRelatedToResourceAutomationsRelatedToResourceIdGetResponseItem,
	);

/**
 * @summary Delete Automations Owned By Resource
 */
export const deleteAutomationsOwnedByResourceAutomationsOwnedByResourceIdDeleteParams =
	zod.object({
		resource_id: zod.string(),
	});

export const deleteAutomationsOwnedByResourceAutomationsOwnedByResourceIdDeleteHeader =
	zod.object({
		"x-prefect-api-version": zod.string().optional(),
	});

/**
 * @summary Validate Template
 */
export const validateTemplateTemplatesValidatePostHeader = zod.object({
	"x-prefect-api-version": zod.string().optional(),
});

export const validateTemplateTemplatesValidatePostBodyDefault = "";

export const validateTemplateTemplatesValidatePostBody = zod
	.string()
	.optional();
