version: 2.1

references:
  workspace_root: &workspace_root /tmp/workspace
  attach_workspace: &attach_workspace
    attach_workspace:
      at: *workspace_root


jobs:
  # ----------------------------------
  # Check formatting
  # ----------------------------------

  check_black_formatting:
    docker:
      - image: python:3.6
    steps:
      - checkout

      - run:
          name: Install Black
          command: pip install black

      - run:
          name: Run Black
          command: black --check .

  check_mypy_typing:
    docker:
      - image: python:3.6
    steps:
      - checkout

      - run:
          name: Install mypy
          command: pip install mypy mypy_extensions

      - run:
          name: Run mypy
          command: mypy src/

  check_documentation:
    docker:
      - image: python:3.6
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Install prefect
          command: pip install -e ".[dev]"

      - run:
          name: Run documentation tests
          command: pytest -rfEsx -k "generate_docs"

  # test a standard install of prefect
  # is importable in python 3.5.2
  # there was a typing bug in 3.5.2 that this attempts to catch
  test_py352_import_prefect:
    docker:
      - image: python:3.5.2

    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Install vanilla prefect
          command: pip install .

      - run:
          name: Test Prefect imports cleanly
          command: python -c "import prefect"

  # test a standard install of prefect
  # with all requriements pinned to their lowest allowed versions
  # to ensure our requirements.txt file is accurate
  test_lower_prefect:
    docker:
      - image: python:3.5.2

    steps:
      - *attach_workspace
      - checkout
      - setup_remote_docker
      - run:
          name: Install zsh for tests
          command: apt-get update && apt-get install -y zsh

      - run:
          name: Create lower bound requirements file
          command: python lower_bounds.py

      - run:
          name: Install lower bounds
          command: pip install -r lower_requirements.txt

      - run:
          name: Install vanilla prefect
          command: pip install . --no-deps

      - run:
          name: Install testing packages
          command: pip install pytest pytest-cov pytest-env

      - run:
          name: Run tests
          command: pytest -rfEsx --skip-formatting --cov=prefect --cov-report=xml:/tmp/workspace/coverage/lower-coverage.xml .

      - persist_to_workspace:
          root: *workspace_root
          paths:
            - coverage

  # test a standard install of prefect
  # this ensures we correctly capture all ImportError sitautions
  # caused by many package dependency options
  test_vanilla_prefect:
    docker:
      - image: python:3.6

    steps:
      - *attach_workspace
      - checkout
      - setup_remote_docker
      - run:
          name: Install zsh for tests
          command: apt-get update && apt-get install -y zsh

      - run:
          name: Install vanilla prefect
          command: pip install .

      - run:
          name: Install testing packages
          command: pip install "pytest>=4.3,<5.0" pytest-cov pytest-env

      - run:
          name: Run tests
          command: pytest -rfEsx --skip-formatting --cov=prefect --cov-report=xml:/tmp/workspace/coverage/vanilla-coverage.xml .

      - persist_to_workspace:
          root: *workspace_root
          paths:
            - coverage

  # ----------------------------------
  # Run unit tests in Python 3.5-3.7
  # ----------------------------------

  test_35:
    docker:
      - image: python:3.5

    steps:
      - *attach_workspace
      - checkout
      - setup_remote_docker
      - run:
          name: Install zsh for tests
          command: apt-get update && apt-get install -y zsh

      - run:
          name: Install graphviz
          command: apt-get update && apt-get install -y graphviz

      - run:
          name: Install prefect
          command: pip install ".[all_extras]"

      - run:
          name: Run tests
          command: pytest -rfEsx --skip-formatting --cov=prefect --cov-report=xml:/tmp/workspace/coverage/python35-coverage.xml .

      - persist_to_workspace:
          root: *workspace_root
          paths:
            - coverage

  test_36:
    docker:
      - image: python:3.6
    steps:
      - *attach_workspace
      - checkout
      - setup_remote_docker
      - run:
          name: Install zsh for tests
          command: apt-get update && apt-get install -y zsh

      - run:
          name: Install graphviz
          command: apt-get update && apt-get install -y graphviz

      - run:
          name: Install prefect
          command: pip install ".[all_extras]"

      - run:
          name: Run tests
          command: pytest -rfEsx --skip-formatting --cov=prefect --cov-report=xml:/tmp/workspace/coverage/python36-coverage.xml .

      - persist_to_workspace:
          root: *workspace_root
          paths:
            - coverage

  test_37:
    docker:
      - image: python:3.7
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Install zsh for tests
          command: apt-get update && apt-get install -y zsh

      - run:
          name: Install graphviz
          command: apt-get update && apt-get install -y graphviz

      - run:
          name: Install prefect
          command: pip install ".[all_extras]"

      - run:
          name: Run tests
          command: pytest -rfEsx .

  test_airflow:
    docker:
      - image: continuumio/miniconda3:4.6.14
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Install gcc
          command: apt-get update && apt-get install -y gcc

      - run:
          name: Create Airflow conda environment
          command: conda create -n airflow python=3.6 pip -y

      - run:
          name: Install Airflow
          command: source activate airflow && SLUGIFY_USES_TEXT_UNIDECODE=yes pip install apache-airflow flask==1.0.4 && source deactivate

      - run:
          name: Install prefect
          command: pip install ".[all_extras]"

      - run:
          name: Run tests w/ airflow
          command: pytest -rfEsx --airflow --cov=prefect --cov-report=xml:/tmp/workspace/coverage/airflow-coverage.xml .

      - persist_to_workspace:
          root: *workspace_root
          paths:
            - coverage

  upload_coverage:
    docker:
      - image: python:3.6
    steps:
      - *attach_workspace
      - run:
          name: Upload Coverage
          command: bash <(curl -s https://codecov.io/bash) -cF python -s "/tmp/workspace/coverage/"

  build_docker_image:
    docker:
      - image: docker
    parameters:
      python_version:
        type: string
      tag_latest:
        type: boolean
        default: false
    environment:
      PYTHON_VERSION: << parameters.python_version >>
      PYTHON_TAG: python<< parameters.python_version >>
    steps:
      - checkout
      - run:
          # since this job is kicked off on *any* tag, we want to bail if this commit is not on master.
          # todo: is there a better way to ensure that this is a commit on master?
          name: Master branch check
          command: |
            apk add git
            if [[ $(git branch --contains $CIRCLE_SHA1 --points-at master | grep master | wc -l) -ne 1 ]]; then
              echo "commit $CIRCLE_SHA1 is not a member of the master branch"
              exit 1
            fi
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Build image
          command: |
            set -u
            docker build \
              --build-arg GIT_SHA=$CIRCLE_SHA1 \
              --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
              --build-arg PREFECT_VERSION=$CIRCLE_TAG \
              --build-arg PYTHON_VERSION=$PYTHON_VERSION \
              -t prefecthq/prefect:${CIRCLE_TAG}-${PYTHON_TAG} \
              -t prefecthq/prefect:latest-${PYTHON_TAG} \
              .
      - when:
          condition: << parameters.tag_latest >>
          steps:
            - run:
                name: Tag latest image
                command: |
                  docker tag prefecthq/prefect:${CIRCLE_TAG}-${PYTHON_TAG} prefecthq/prefect:latest
      - run:
          name: Test image
          command: |
            docker run -dit prefecthq/prefect /bin/bash -c 'curl -fL0 https://raw.githubusercontent.com/PrefectHQ/prefect/master/examples/retries_with_mapping.py | python'
      - run:
          name: Push versioned tags
          command: |
            docker login --username  $DOCKER_HUB_USER --password $DOCKER_HUB_PW
            docker push prefecthq/prefect:${CIRCLE_TAG}-${PYTHON_TAG}
            docker push prefecthq/prefect:latest-${PYTHON_TAG}
      - when:
          condition: << parameters.tag_latest >>
          steps:
            - run:
                name: Push latest tag
                command: |
                  docker login --username  $DOCKER_HUB_USER --password $DOCKER_HUB_PW
                  docker push prefecthq/prefect:latest

workflows:
  version: 2

  "Run tests":
    jobs:
      - test_35
      - test_36
      - test_37
      - test_lower_prefect
      - test_vanilla_prefect
      - test_py352_import_prefect
      - test_airflow
      - upload_coverage:
          requires:
            - test_35
            - test_36
            - test_vanilla_prefect
            - test_airflow

  "Check code style and docs":
    jobs:
      - check_black_formatting
      - check_mypy_typing
      - check_documentation

  "Build docker images":
    jobs:
      - build_docker_image:
          python_version: "3.5"
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^[0-9]+\.[0-9]+\.[0-9]+$/
      - build_docker_image:
          python_version: "3.6"
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^[0-9]+\.[0-9]+\.[0-9]+$/
      - build_docker_image:
          python_version: "3.7"
          tag_latest: true
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^[0-9]+\.[0-9]+\.[0-9]+$/
