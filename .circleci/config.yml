version: 2.1

references:
  workspace_root: &workspace_root /tmp/workspace
  attach_workspace: &attach_workspace
    attach_workspace:
      at: *workspace_root

commands:
  prep_server_database:
    description: 'Run Prefect Server database migrations'
    steps:
      - run:
          name: Run Prefect Server database migrations
          command: prefect-server database upgrade --yes
  prep_ui:
    steps:
      - checkout
      - restore_cache:
          keys:
            - npm-dependencies-{{ arch }}-{{ checksum "package.json" }}
            - npm-dependencies-{{ arch }}-
            - npm-dependencies-
      - run:
          name: Install utilities
          command: |
            apt-get update
            # official binaries for nodejs
            curl -sL https://deb.nodesource.com/setup_11.x | bash -
            apt-get install -y sudo nodejs netcat
      - run:
          name: NPM Install
          command: cd server/services/ui && npm install
      - save_cache:
          paths:
            - ./server/services/ui/node_modules
          key: npm-dependencies-{{ arch }}-{{ checksum "package.json" }}

executors:
  docker-prefect-server:
    docker:
      - image: python:3.7
        environment:
          PREFECT_SERVER__DATABASE__NAME: prefect_server
          PREFECT_SERVER__DATABASE__USERNAME: prefect
          PREFECT_SERVER__DATABASE__PASSWORD: test-password
          PREFECT_SERVER__HASURA__ADMIN_SECRET: 'hasura-secret-admin-secret'

      - image: 'postgres:11'
        environment:
          POSTGRES_USER: prefect
          POSTGRES_PASSWORD: test-password
          POSTGRES_DB: prefect_server
        command: postgres -c max_connections=150

      - image: 'hasura/graphql-engine:v1.1.0'
        command: /bin/sh -c "sleep 5 && graphql-engine serve"
        environment:
          HASURA_GRAPHQL_DATABASE_URL: postgres://prefect:prefect@localhost:5432/prefect_server
          HASURA_GRAPHQL_ENABLE_CONSOLE: 'true'
          HASURA_GRAPHQL_ADMIN_SECRET: 'hasura-secret-admin-secret'
          HASURA_GRAPHQL_SERVER_PORT: '3000'

jobs:
  # ----------------------------------
  # Check formatting
  # ----------------------------------

  check_static_analysis:
    docker:
      - image: python:3.7
    steps:
      - checkout

      - run:
          name: Install python packages for static analysis
          command: pip install black mypy mypy_extensions autoflake profimp

      - run:
          name: Quick installation of Prefect
          command: pip install -e .

      - run:
          name: Run Black
          command: black --check .

      - run:
          name: Run mypy
          command: mypy src/

      - run:
          name: Check for potentially unused imports
          command: |
            if [[ $(autoflake --remove-all-unused-imports -r --exclude __init__.py src | tee .unused-imports.txt | wc -c ) -ne 0 ]]; then
              echo "Potentially unused imports found"
              cat .unused-imports.txt
              exit 2
            fi

      - run:
          name: Ensure 'import prefect' is under 1 second
          command: |
            apt update && apt install jq bc -y

            # generate pycache
            python -c 'import prefect'

            if [[ $(echo "$(profimp 'import prefect'  | jq '.duration' | tee .import-time.txt ) < 1000" | bc -l) -ne 1 ]]; then
              echo "Prefect import time is too slow"
              cat .import-time.txt
              exit 3
            else
              echo "Prefect import time (ms):"
              cat .import-time.txt
            fi

  check_documentation:
    docker:
      - image: python:3.7
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Install Prefect
          command: pip install -e ".[dev,test]"

      - run:
          name: Run documentation tests
          command: pytest docs -vvrfEsx

  check_ui_formatting:
    docker:
      - image: node:10.16.3
    steps:
      - prep_ui
      - run:
          name: Lint
          command: cd server/services/ui && npm run lint:ci

  # test a standard install of prefect
  # with all requriements pinned to their lowest allowed versions
  # to ensure our requirements.txt file is accurate
  test_lower_prefect:
    docker:
      - image: python:3.6

    steps:
      - *attach_workspace
      - checkout
      - setup_remote_docker
      - run:
          name: Install zsh for tests
          command: apt-get update && apt-get install -y zsh

      - run:
          name: Create lower bound requirements file
          command: python lower_bounds.py

      - run:
          name: Install lower bounds
          command: pip install -r lower_requirements.txt

      - run:
          name: Install vanilla prefect
          command: pip install . --no-deps

      - run:
          name: Install testing packages
          command: pip install -r test-requirements.txt

      - run:
          name: Run tests
          command: pytest tests -vvrfEsx --cov=prefect --cov-report=xml:/tmp/workspace/coverage/lower-coverage.xml

      - persist_to_workspace:
          root: *workspace_root
          paths:
            - coverage

  # test a standard install of prefect
  # this ensures we correctly capture all ImportError sitautions
  # caused by many package dependency options
  test_vanilla_prefect:
    docker:
      - image: python:3.7

    steps:
      - *attach_workspace
      - checkout
      - setup_remote_docker
      - run:
          name: Install zsh for tests
          command: apt-get update && apt-get install -y zsh

      - run:
          name: Install vanilla prefect
          command: pip install .

      - run:
          name: Install testing packages
          command: pip install -r test-requirements.txt

      - run:
          name: Run tests
          command: pytest tests -vvrfEsx --cov=prefect --cov-report=xml:/tmp/workspace/coverage/vanilla-coverage.xml

      - persist_to_workspace:
          root: *workspace_root
          paths:
            - coverage

  # ----------------------------------
  # Run unit tests in Python 3.6-3.8
  # ----------------------------------

  test_36:
    docker:
      - image: python:3.6
    steps:
      - *attach_workspace
      - checkout
      - setup_remote_docker
      - run:
          name: Install zsh for tests
          command: apt-get update && apt-get install -y zsh

      - run:
          name: Install graphviz
          command: apt-get update && apt-get install -y graphviz

      - run:
          name: Upgrade pip
          command: pip install -U pip

      - run:
          name: Install Prefect
          command: pip install ".[all_extras]"

      - run:
          name: Run tests
          command: pytest tests -vvrfEsx --cov=prefect --cov-report=xml:/tmp/workspace/coverage/python36-coverage.xml

      - persist_to_workspace:
          root: *workspace_root
          paths:
            - coverage

  test_37:
    docker:
      - image: python:3.7
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Install zsh for tests
          command: apt-get update && apt-get install -y zsh

      - run:
          name: Install graphviz
          command: apt-get update && apt-get install -y graphviz

      - run:
          name: Upgrade pip
          command: pip install -U pip

      - run:
          name: Install Prefect
          command: pip install ".[all_extras]"

      - run:
          name: Run tests
          command: pytest tests -vvrfEsx

  test_38:
    docker:
      - image: python:3.8
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Install zsh for tests
          command: apt-get update && apt-get install -y zsh

      - run:
          name: Install graphviz
          command: apt-get update && apt-get install -y graphviz

      - run:
          name: Upgrade pip
          command: pip install -U pip

      - run:
          name: Install Prefect
          command: pip install ".[all_extras]"

      - run:
          name: Run tests
          command: pytest tests -vvrfEsx

  test_server:
    executor: docker-prefect-server
    steps:
      - checkout

      - run:
          name: Install base Prefect
          command: pip install .

      - run:
          name: Install Prefect Server (editable)
          command: pip install -e ./server

      - prep_server_database
      - prep_ui

      - run:
          name: Run server tests
          command: cd server && pytest -vvrfEsx .

  test_ui:
    docker:
      - image: node:10.16.3
    steps:
      - prep_ui
      - run:
          name: UI Unit Test
          command: cd server/services/ui && npm run test:unit

  upload_coverage:
    docker:
      - image: python:3.7
    steps:
      - *attach_workspace
      - run:
          name: Upload Coverage
          command: bash <(curl -s https://codecov.io/bash) -cF python -s "/tmp/workspace/coverage/"

  build_docker_image:
    docker:
      - image: docker
    parameters:
      python_version:
        type: string
      tag_latest:
        type: boolean
        default: false
    environment:
      PYTHON_VERSION: << parameters.python_version >>
      PYTHON_TAG: python<< parameters.python_version >>
    steps:
      - checkout
      - run:
          # since this job is kicked off on *any* tag, we want to bail if this commit is not on master.
          # todo: is there a better way to ensure that this is a commit on master?
          name: Master branch check
          command: |
            apk add git
            if [[ $(git branch --contains $CIRCLE_SHA1 --points-at master | grep master | wc -l) -ne 1 ]]; then
              echo "commit $CIRCLE_SHA1 is not a member of the master branch"
              exit 1
            fi
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Build image
          command: |
            set -u
            docker build \
              --build-arg GIT_SHA=$CIRCLE_SHA1 \
              --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
              --build-arg PREFECT_VERSION=$CIRCLE_TAG \
              --build-arg PYTHON_VERSION=$PYTHON_VERSION \
              -t prefecthq/prefect:${CIRCLE_TAG}-${PYTHON_TAG} \
              -t prefecthq/prefect:latest-${PYTHON_TAG} \
              .
      - when:
          condition: << parameters.tag_latest >>
          steps:
            - run:
                name: Tag latest image
                command: |
                  docker tag prefecthq/prefect:${CIRCLE_TAG}-${PYTHON_TAG} prefecthq/prefect:latest
      - run:
          name: Test image
          command: |
            docker run -dit prefecthq/prefect:${CIRCLE_TAG}-${PYTHON_TAG} /bin/bash -c 'curl -fL0 https://raw.githubusercontent.com/PrefectHQ/prefect/master/examples/retries_with_mapping.py | python'
      - run:
          name: Push versioned tags
          command: |
            docker login --username  $DOCKER_HUB_USER --password $DOCKER_HUB_PW
            docker push prefecthq/prefect:${CIRCLE_TAG}-${PYTHON_TAG}
            docker push prefecthq/prefect:latest-${PYTHON_TAG}
      - when:
          condition: << parameters.tag_latest >>
          steps:
            - run:
                name: Push latest tag
                command: |
                  docker login --username  $DOCKER_HUB_USER --password $DOCKER_HUB_PW
                  docker push prefecthq/prefect:latest

  build_master_docker_image:
    docker:
      - image: docker
    parameters:
      python_version:
        type: string
    environment:
      PYTHON_VERSION: << parameters.python_version >>
    steps:
      - checkout
      - run:
          name: Master branch check
          command: |
            apk add git
            if [[ $(git branch --contains $CIRCLE_SHA1 --points-at master | grep master | wc -l) -ne 1 ]]; then
              echo "commit $CIRCLE_SHA1 is not a member of the master branch"
              exit 1
            fi
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Build image
          command: |
            set -u
            docker build \
              --build-arg GIT_SHA=$CIRCLE_SHA1 \
              --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
              --build-arg PREFECT_VERSION=$CIRCLE_SHA1 \
              --build-arg PYTHON_VERSION=$PYTHON_VERSION \
              -t prefecthq/prefect:master \
              .
      - run:
          name: Test image
          command: |
            docker run -dit prefecthq/prefect:master /bin/bash -c 'curl -fL0 https://raw.githubusercontent.com/PrefectHQ/prefect/master/examples/retries_with_mapping.py | python'
      - run:
          name: Push master tag
          command: |
            docker login --username  $DOCKER_HUB_USER --password $DOCKER_HUB_PW
            docker push prefecthq/prefect:master

  build_all_extras_docker_image:
    docker:
      - image: docker
    parameters:
      python_version:
        type: string
      extras:
        type: string
      tag_latest:
        type: boolean
        default: false
    environment:
      PYTHON_VERSION: << parameters.python_version >>
      EXTRAS: << parameters.extras >>
    steps:
      - checkout
      - run:
          name: Master branch check
          command: |
            apk add git
            if [[ $(git branch --contains $CIRCLE_SHA1 --points-at master | grep master | wc -l) -ne 1 ]]; then
              echo "commit $CIRCLE_SHA1 is not a member of the master branch"
              exit 1
            fi
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Build all_extras image
          command: |
            set -u
            docker build \
              --build-arg GIT_SHA=$CIRCLE_SHA1 \
              --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
              --build-arg PREFECT_VERSION=$CIRCLE_TAG \
              --build-arg PYTHON_VERSION=$PYTHON_VERSION \
              --build-arg EXTRAS=$EXTRAS \
              -t prefecthq/prefect:all_extras-${CIRCLE_TAG} \
              -t prefecthq/prefect:all_extras \
              .
      - run:
          name: Test image
          command: |
            docker run -dit prefecthq/prefect:all_extras-${CIRCLE_TAG} /bin/bash -c 'curl -fL0 https://raw.githubusercontent.com/PrefectHQ/prefect/master/examples/retries_with_mapping.py | python'
      - run:
          name: Push all_extras tag
          command: |
            docker login --username  $DOCKER_HUB_USER --password $DOCKER_HUB_PW
            docker push prefecthq/prefect:all_extras-${CIRCLE_TAG}
      - when:
          condition: << parameters.tag_latest >>
          steps:
            - run:
                name: Push latest tag
                command: |
                  docker login --username  $DOCKER_HUB_USER --password $DOCKER_HUB_PW
                  docker push prefecthq/prefect:all_extras


  release_to_pypi:
    docker:
      - image: python:3.7
    steps:
      - checkout

      - run:
          # since this job is kicked off on *any* tag (that matches the version pattern), we want to bail if this
          # commit is not on master.
          # todo: is there a better way to ensure that this is a commit on master?
          name: Master branch check
          command: |
            if [[ $(git branch --contains $CIRCLE_SHA1 --points-at master | grep master | wc -l) -ne 1 ]]; then
              echo "commit $CIRCLE_SHA1 is not a member of the master branch"
              exit 1
            fi

      - run:
          name: Verify Package Version
          command: python setup.py verify_version

      - run:
          name: Install Twine
          command: pip install twine

      - run:
          name: Build Python Package
          command: |
            python setup.py sdist
            python setup.py bdist_wheel

      - run:
          name: Upload Package to PyPI
          command: twine upload dist/*

orbs:
  docker: circleci/docker@1.0.0

workflows:
  version: 2

  'Run tests':
    jobs:
      - test_36
      - test_37
      - test_38
      - test_lower_prefect
      - test_vanilla_prefect
      - test_server
      - test_ui
      - upload_coverage:
          requires:
            - test_36
            - test_37
            - test_38
            - test_vanilla_prefect

  'Check code style and docs':
    jobs:
      - check_static_analysis
      - check_documentation
      - check_ui_formatting

  'Build and publish development artifacts':
    jobs:
      - build_master_docker_image:
          python_version: '3.7'
          filters:
            branches:
              only: master

  'Build and publish release artifacts':
    jobs:
      - build_docker_image:
          python_version: '3.6'
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^[0-9]+\.[0-9]+\.[0-9]+$/
      - build_docker_image:
          python_version: '3.7'
          tag_latest: true
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^[0-9]+\.[0-9]+\.[0-9]+$/
      - build_docker_image:
          python_version: '3.8'
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^[0-9]+\.[0-9]+\.[0-9]+$/
      - release_to_pypi:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^[0-9]+\.[0-9]+\.[0-9]+$/
      - build_all_extras_docker_image:
          python_version: '3.8'
          extras: 'all_extras'
          tag_latest: true
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^[0-9]+\.[0-9]+\.[0-9]+$/

  'Build and publish development server artifacts':
    jobs:
      - docker/publish:
          docker-password: DOCKER_HUB_PW
          docker-username: DOCKER_HUB_USER
          image: 'prefecthq/apollo'
          path: 'server/services/apollo'
          tag: master
          filters:
            branches:
              only: master

      - docker/publish:
          docker-password: DOCKER_HUB_PW
          docker-username: DOCKER_HUB_USER
          image: 'prefecthq/server'
          path: 'server'
          tag: master
          filters:
            branches:
              only: master

      - docker/publish:
          docker-password: DOCKER_HUB_PW
          docker-username: DOCKER_HUB_USER
          image: 'prefecthq/ui'
          path: 'server/services/ui'
          tag: master
          filters:
            branches:
              only: master

  'Build and publish versioned server artifacts':
    jobs:
      - docker/publish:
          docker-password: DOCKER_HUB_PW
          docker-username: DOCKER_HUB_USER
          image: 'prefecthq/apollo'
          path: 'server/services/apollo'
          tag: $CIRCLE_TAG,latest
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^[0-9]+\.[0-9]+\.[0-9]+$/

      - docker/publish:
          docker-password: DOCKER_HUB_PW
          docker-username: DOCKER_HUB_USER
          image: 'prefecthq/server'
          path: 'server'
          tag: $CIRCLE_TAG,latest
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^[0-9]+\.[0-9]+\.[0-9]+$/

      - docker/publish:
          docker-password: DOCKER_HUB_PW
          docker-username: DOCKER_HUB_USER
          image: 'prefecthq/ui'
          path: 'server/services/ui'
          tag: $CIRCLE_TAG,latest
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^[0-9]+\.[0-9]+\.[0-9]+$/
