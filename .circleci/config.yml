version: 2.1

references:
  workspace_root: &workspace_root /tmp/workspace
  attach_workspace: &attach_workspace
    attach_workspace:
      at: *workspace_root

commands:
  promote_image:
    description: Promotes images by retagging them
    parameters:
      IMAGE_NAME:
        type: string
      VERSION:
        type: string
    steps:
      - run:
          name: Promote
          command: |
            IMAGE_NAME=<<parameters.IMAGE_NAME>> && VERSION=<<parameters.VERSION>>
            docker pull prefecthq/${IMAGE_NAME}:latest
            docker tag prefecthq/${IMAGE_NAME}:latest prefecthq/${IMAGE_NAME}:${VERSION}
            docker push prefecthq/${IMAGE_NAME}:${VERSION}

jobs:
  # ----------------------------------
  # Check formatting
  # ----------------------------------

  check_static_analysis:
    docker:
      - image: python:3.7
    steps:
      - checkout

      - run:
          name: Install python packages for static analysis
          command: pip install black mypy mypy_extensions flake8 profimp

      - run:
          name: Quick installation of Prefect
          command: pip install -e .

      - run:
          name: Run Black
          command: black --check .

      - run:
          name: Run mypy
          command: mypy src/

      - run:
          name: Run flake8
          command: flake8 src/

      - run:
          name: Lint changelog entries
          command: python update_changelog.py lint

      - run:
          name: Ensure 'import prefect' is under 1 second
          command: |
            apt update && apt install jq bc -y

            # generate pycache
            python -c 'import prefect'

            if [[ $(echo "$(profimp 'import prefect'  | jq '.duration' | tee .import-time.txt ) < 1000" | bc -l) -ne 1 ]]; then
              echo "Prefect import time is too slow"
              cat .import-time.txt
              exit 3
            else
              echo "Prefect import time (ms):"
              cat .import-time.txt
            fi

  check_documentation:
    docker:
      - image: python:3.7
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Install Prefect
          command: pip install -e ".[dev,test]"

      - run:
          name: Run documentation tests
          command: pytest docs -vvrfEsx

  # test a standard install of prefect
  # with all requriements pinned to their lowest allowed versions
  # to ensure our requirements.txt file is accurate
  test_lower_prefect:
    docker:
      - image: python:3.6

    steps:
      - *attach_workspace
      - checkout
      - setup_remote_docker
      - run:
          name: Install zsh for tests
          command: apt-get update && apt-get install -y zsh

      - run:
          name: Create lower bound requirements file
          command: python lower_bounds.py

      - run:
          name: Install lower bounds
          command: pip install -r lower_requirements.txt

      - run:
          name: Install vanilla prefect
          command: pip install . --no-deps

      - run:
          name: Install testing packages
          command: pip install -r test-requirements.txt

      - run:
          name: Run tests
          command: pytest tests -vvrfEsx --cov=prefect --cov-report=xml:/tmp/workspace/coverage/lower-coverage.xml

      - persist_to_workspace:
          root: *workspace_root
          paths:
            - coverage

  # test a standard install of prefect
  # this ensures we correctly capture all ImportError sitautions
  # caused by many package dependency options
  test_vanilla_prefect:
    docker:
      - image: python:3.7

    steps:
      - *attach_workspace
      - checkout
      - setup_remote_docker
      - run:
          name: Install zsh for tests
          command: apt-get update && apt-get install -y zsh

      - run:
          name: Install vanilla prefect
          command: pip install .

      - run:
          name: Install testing packages
          command: pip install -r test-requirements.txt

      - run:
          name: Run tests
          command: pytest tests -vvrfEsx --cov=prefect --cov-report=xml:/tmp/workspace/coverage/vanilla-coverage.xml

      - persist_to_workspace:
          root: *workspace_root
          paths:
            - coverage

  # ----------------------------------
  # Run unit tests in Python 3.6-3.8
  # ----------------------------------

  test_36:
    docker:
      - image: python:3.6
    steps:
      - *attach_workspace
      - checkout
      - setup_remote_docker
      - run:
          name: Install zsh for tests
          command: apt-get update && apt-get install -y zsh

      - run:
          name: Install graphviz
          command: apt-get update && apt-get install -y graphviz

      - run:
          name: Upgrade pip
          command: pip install -U pip

      - run:
          name: Install Prefect
          command: pip install ".[all_extras]"

      - run:
          name: Run tests
          command: pytest tests -vvrfEsx --cov=prefect --cov-report=xml:/tmp/workspace/coverage/python36-coverage.xml

      - persist_to_workspace:
          root: *workspace_root
          paths:
            - coverage

  test_37:
    docker:
      - image: python:3.7
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Install zsh for tests
          command: apt-get update && apt-get install -y zsh

      - run:
          name: Install graphviz
          command: apt-get update && apt-get install -y graphviz

      - run:
          name: Upgrade pip
          command: pip install -U pip

      - run:
          name: Install Prefect
          command: pip install ".[all_extras]"

      - run:
          name: Run tests
          command: pytest tests -vvrfEsx

  test_38:
    docker:
      - image: python:3.8
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Install zsh for tests
          command: apt-get update && apt-get install -y zsh

      - run:
          name: Install graphviz
          command: apt-get update && apt-get install -y graphviz

      - run:
          name: Upgrade pip
          command: pip install -U pip

      - run:
          name: Install Prefect
          command: pip install ".[all_extras]"

      - run:
          name: Run tests
          command: pytest tests -vvrfEsx

  upload_coverage:
    docker:
      - image: python:3.7
    steps:
      - *attach_workspace
      - run:
          name: Upload Coverage
          command: bash <(curl -s https://codecov.io/bash) -cF python -s "/tmp/workspace/coverage/"


  build_docker_image:
    docker:
      - image: docker
    parameters:
      python_version:
        type: string
      tag_latest:
        type: boolean
        default: false
    environment:
      PYTHON_VERSION: << parameters.python_version >>
      PYTHON_TAG: python<< parameters.python_version >>
    steps:
      - checkout
      - run:
          # since this job is kicked off on *any* tag, we want to bail if this commit is not on master.
          # todo: is there a better way to ensure that this is a commit on master?
          name: Master branch check
          command: |
            apk add git
            if [[ $(git branch --contains $CIRCLE_SHA1 --points-at master | grep master | wc -l) -ne 1 ]]; then
              echo "commit $CIRCLE_SHA1 is not a member of the master branch"
              exit 1
            fi
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Build image
          command: |
            set -u
            docker build \
              --build-arg GIT_SHA=$CIRCLE_SHA1 \
              --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
              --build-arg PREFECT_VERSION=$CIRCLE_TAG \
              --build-arg PYTHON_VERSION=$PYTHON_VERSION \
              -t prefecthq/prefect:${CIRCLE_TAG}-${PYTHON_TAG} \
              -t prefecthq/prefect:latest-${PYTHON_TAG} \
              .
      - when:
          condition: << parameters.tag_latest >>
          steps:
            - run:
                name: Tag latest image
                command: |
                  docker tag prefecthq/prefect:${CIRCLE_TAG}-${PYTHON_TAG} prefecthq/prefect:latest
      - run:
          name: Test image
          command: |
            docker run -dit prefecthq/prefect:${CIRCLE_TAG}-${PYTHON_TAG} /bin/bash -c 'curl -fL0 https://raw.githubusercontent.com/PrefectHQ/prefect/master/examples/retries_with_mapping.py | python'
      - run:
          name: Push versioned tags
          command: |
            docker login --username  $DOCKER_HUB_USER --password $DOCKER_HUB_PW
            docker push prefecthq/prefect:${CIRCLE_TAG}-${PYTHON_TAG}
            docker push prefecthq/prefect:latest-${PYTHON_TAG}
      - when:
          condition: << parameters.tag_latest >>
          steps:
            - run:
                name: Push latest tag
                command: |
                  docker login --username  $DOCKER_HUB_USER --password $DOCKER_HUB_PW
                  docker push prefecthq/prefect:latest

  build_master_docker_image:
    docker:
      - image: docker
    parameters:
      python_version:
        type: string
    environment:
      PYTHON_VERSION: << parameters.python_version >>
    steps:
      - checkout
      - run:
          name: Master branch check
          command: |
            apk add git
            if [[ $(git branch --contains $CIRCLE_SHA1 --points-at master | grep master | wc -l) -ne 1 ]]; then
              echo "commit $CIRCLE_SHA1 is not a member of the master branch"
              exit 1
            fi
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Build image
          command: |
            set -u
            docker build \
              --build-arg GIT_SHA=$CIRCLE_SHA1 \
              --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
              --build-arg PREFECT_VERSION=$CIRCLE_SHA1 \
              --build-arg PYTHON_VERSION=$PYTHON_VERSION \
              -t prefecthq/prefect:master \
              .
      - run:
          name: Test image
          command: |
            docker run -dit prefecthq/prefect:master /bin/bash -c 'curl -fL0 https://raw.githubusercontent.com/PrefectHQ/prefect/master/examples/retries_with_mapping.py | python'
      - run:
          name: Push master tag
          command: |
            docker login --username  $DOCKER_HUB_USER --password $DOCKER_HUB_PW
            docker push prefecthq/prefect:master

  build_all_extras_docker_image:
    docker:
      - image: docker
    parameters:
      python_version:
        type: string
      extras:
        type: string
      tag_latest:
        type: boolean
        default: false
    environment:
      PYTHON_VERSION: << parameters.python_version >>
      EXTRAS: << parameters.extras >>
    steps:
      - checkout
      - run:
          name: Master branch check
          command: |
            apk add git
            if [[ $(git branch --contains $CIRCLE_SHA1 --points-at master | grep master | wc -l) -ne 1 ]]; then
              echo "commit $CIRCLE_SHA1 is not a member of the master branch"
              exit 1
            fi
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Build all_extras image
          command: |
            set -u
            docker build \
              --build-arg GIT_SHA=$CIRCLE_SHA1 \
              --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
              --build-arg PREFECT_VERSION=$CIRCLE_TAG \
              --build-arg PYTHON_VERSION=$PYTHON_VERSION \
              --build-arg EXTRAS=$EXTRAS \
              -t prefecthq/prefect:all_extras-${CIRCLE_TAG} \
              -t prefecthq/prefect:all_extras \
              .
      - run:
          name: Test image
          command: |
            docker run -dit prefecthq/prefect:all_extras-${CIRCLE_TAG} /bin/bash -c 'curl -fL0 https://raw.githubusercontent.com/PrefectHQ/prefect/master/examples/retries_with_mapping.py | python'
      - run:
          name: Push all_extras tag
          command: |
            docker login --username  $DOCKER_HUB_USER --password $DOCKER_HUB_PW
            docker push prefecthq/prefect:all_extras-${CIRCLE_TAG}
      - when:
          condition: << parameters.tag_latest >>
          steps:
            - run:
                name: Push latest tag
                command: |
                  docker login --username  $DOCKER_HUB_USER --password $DOCKER_HUB_PW
                  docker push prefecthq/prefect:all_extras


  promote_server_artifacts:
    docker:
      - image: docker

    steps:
      - setup_remote_docker:
          version: 18.09.3
      - promote_image:
          IMAGE_NAME: apollo
          VERSION: core-${CIRCLE_TAG}
      - promote_image:
          IMAGE_NAME: server
          VERSION: core-${CIRCLE_TAG}
      - promote_image:
          IMAGE_NAME: ui
          VERSION: core-${CIRCLE_TAG}

  release_to_pypi:
    docker:
      - image: python:3.7
    steps:
      - checkout

      - run:
          # since this job is kicked off on *any* tag (that matches the version pattern), we want to bail if this
          # commit is not on master.
          # todo: is there a better way to ensure that this is a commit on master?
          name: Master branch check
          command: |
            if [[ $(git branch --contains $CIRCLE_SHA1 --points-at master | grep master | wc -l) -ne 1 ]]; then
              echo "commit $CIRCLE_SHA1 is not a member of the master branch"
              exit 1
            fi

      - run:
          name: Verify Package Version
          command: python setup.py verify_version

      - run:
          name: Install Twine
          command: pip install twine

      - run:
          name: Build Python Package
          command: |
            python setup.py sdist
            python setup.py bdist_wheel

      - run:
          name: Upload Package to PyPI
          command: twine upload dist/*

orbs:
  docker: circleci/docker@1.0.0

workflows:
  version: 2

  'Run tests':
    jobs:
      - test_36
      - test_37
      - test_38
      - test_lower_prefect
      - test_vanilla_prefect
      - upload_coverage:
          requires:
            - test_36
            - test_37
            - test_38
            - test_vanilla_prefect

  'Check code style and docs':
    jobs:
      - check_static_analysis
      - check_documentation

  'Build and publish development artifacts':
    jobs:
      - build_master_docker_image:
          python_version: '3.7'
          filters:
            branches:
              only: master

  'Build and publish release artifacts':
    jobs:
      - build_docker_image:
          python_version: '3.6'
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^[0-9]+\.[0-9]+\.[0-9]+$/
      - build_docker_image:
          python_version: '3.7'
          tag_latest: true
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^[0-9]+\.[0-9]+\.[0-9]+$/
      - build_docker_image:
          python_version: '3.8'
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^[0-9]+\.[0-9]+\.[0-9]+$/
      - release_to_pypi:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^[0-9]+\.[0-9]+\.[0-9]+$/
      - build_all_extras_docker_image:
          python_version: '3.8'
          extras: 'all_extras'
          tag_latest: true
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^[0-9]+\.[0-9]+\.[0-9]+$/
      - promote_server_artifacts:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^[0-9]+\.[0-9]+\.[0-9]+$/
