import jsonschema


def validate_schema(schema: dict):
    """
    Validate that the provided schema is a valid json schema.
    Raises:
        ValueError: If the provided schema is not a valid json schema.
    """
    try:
        if schema is not None:
            # Most closely matches the schemas generated by pydantic
            jsonschema.Draft4Validator.check_schema(schema)
    except jsonschema.SchemaError as exc:
        raise ValueError(
            "The provided schema is not a valid json schema. Schema error:"
            f" {exc.message}"
        ) from exc


def validate_values_conform_to_schema(values: dict, schema: dict):
    """
    Validate that the provided values conform to the provided json schema.
    Raises:
        ValueError: If the parameters do not conform to the schema.
    """
    try:
        if schema is not None and values is not None:
            jsonschema.validate(values, schema)
    except jsonschema.ValidationError as exc:
        raise ValueError(
            "The provided values do not conform to the provided schema. Validation"
            f" failed for field {exc.json_path.removeprefix('$.')!r}. Failure reason:"
            f" {exc.message}"
        ) from exc
    except jsonschema.SchemaError as exc:
        raise ValueError(
            "The provided schema is not a valid json schema. Schema error:"
            f" {exc.message}"
        ) from exc
