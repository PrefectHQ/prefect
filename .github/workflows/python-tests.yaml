name: Unit tests

# Note: Conda support for 3.11 is pending. See https://github.com/ContinuumIO/anaconda-issues/issues/13082

env:
  # enable colored output
  # https://github.com/pytest-dev/pytest/issues/7443
  PY_COLORS: 1

on:
  pull_request:
    paths:
      - .github/workflows/python-tests.yaml
      - "**/*.py"
      - requirements.txt
      - requirements-dev.txt
      - setup.cfg
      - Dockerfile
  push:
    branches:
      - main

permissions:
  contents: read

# Limit concurrency by workflow/branch combination.
#
# For pull request builds, pushing additional changes to the
# branch will cancel prior in-progress and pending builds.
#
# For builds triggered on a branch push, additional changes
# will wait for prior builds to complete before starting.
#
# https://docs.github.com/en/actions/using-jobs/using-concurrency
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

jobs:
  run-tests:
    name: python:${{ matrix.python-version }}, ${{ matrix.database }}, ${{ matrix.pytest-options }}

    strategy:
      matrix:
        database:
          - "postgres:13"
          - "postgres:14"
          - "sqlite"
        os:
          - ubuntu-latest
        python-version:
          - "3.7"
          - "3.8"
          - "3.9"
          - "3.10"
          - "3.11"
        pytest-options:
          - "--exclude-services"
          - "--only-services"

        include:
          # Run 3.7 tests with lower bound pins
          - python-version: "3.7"
            lower-bound-requirements: true

          # Include Docker image builds on the service test run, and disallow the test
          # suite from building images automaticlly in fixtures
          - pytest-options: "--only-services"
            build-docker-images: true

        exclude:
          # Do not run service tests with postgres
          - database: "postgres:13"
            pytest-options: "--only-services"

          # Do not run service tests with postgres
          - database: "postgres:14"
            pytest-options: "--only-services"


      fail-fast: false

    runs-on: ${{ matrix.os }}
    timeout-minutes: 45

    steps:
      - name: Display current test matrix
        run: echo '${{ toJSON(matrix) }}'

      - uses: actions/checkout@v3
        with:
          persist-credentials: false
          fetch-depth: 0

      - name: Set up Docker Buildx
        if: ${{ matrix.build-docker-images }}
        uses: docker/setup-buildx-action@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"
          cache-dependency-path: "requirements*.txt"

      - name: Pin requirements to lower bounds
        if: ${{ matrix.lower-bound-requirements }}
        # Creates lower bound files then replaces the input files so we can do a normal install
        run: |
          ./scripts/generate-lower-bounds.py requirements.txt > requirements-lower.txt
          ./scripts/generate-lower-bounds.py requirements-dev.txt > requirements-dev-lower.txt
          mv requirements-lower.txt requirements.txt
          mv requirements-dev-lower.txt requirements-dev.txt

      - name: Build test image
        if: ${{ matrix.build-docker-images }}
        uses: docker/build-push-action@v4
        with:
          context: .
          # TODO: We do not need the UI in these tests and we may want to add a build-arg to disable building it
          #       so that CI test runs are faster
          build-args: |
            PYTHON_VERSION=${{ matrix.python-version }}
            PREFECT_EXTRAS=[dev]
          tags: prefecthq/prefect:dev-python${{ matrix.python-version }}
          outputs: type=docker,dest=/tmp/image.tar
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        if: ${{ matrix.build-docker-images }}
        run: |
          docker load --input /tmp/image.tar
          docker run --rm prefecthq/prefect:dev-python${{ matrix.python-version }} prefect version

      - name: Build Conda flavored test image
        # Not yet supported for 3.11, see note at top
        if: ${{ matrix.build-docker-images && matrix.python-version != '3.11' }}
        uses: docker/build-push-action@v4
        with:
          context: .
          build-args: |
            PYTHON_VERSION=${{ matrix.python-version }}
            BASE_IMAGE=prefect-conda
            PREFECT_EXTRAS=[dev]
          tags: prefecthq/prefect:dev-python${{ matrix.python-version }}-conda
          outputs: type=docker,dest=/tmp/image-conda.tar
          cache-from: type=gha
          # We do not cache Conda image layers because they very big and slow to upload
          # cache-to: type=gha,mode=max

      - name: Test Conda flavored Docker image
        # Not yet supported for 3.11, see note at top
        if: ${{ matrix.build-docker-images && matrix.python-version != '3.11' }}
        run: |
          docker load --input /tmp/image-conda.tar
          docker run --rm prefecthq/prefect:dev-python${{ matrix.python-version }}-conda prefect version
          docker run --rm prefecthq/prefect:dev-python${{ matrix.python-version }}-conda conda --version

      - name: Install packages
        run: |
          python -m pip install pip==23.0.1
          # If using not using lower bounds, upgrade eagerly to get the latest versions despite caching
          pip install ${{ ! matrix.lower-bound-requirements && '--upgrade --upgrade-strategy eager' || ''}} -e .[dev]

      - name: Start database container
        if: ${{ startsWith(matrix.database, 'postgres') }}
        run: >
          docker run
          --name "postgres"
          --detach
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          --publish 5432:5432
          --tmpfs /var/lib/postgresql/data
          --env POSTGRES_USER="prefect"
          --env POSTGRES_PASSWORD="prefect"
          --env POSTGRES_DB="prefect"
          --env LANG="C.UTF-8"
          --env LANGUAGE="C.UTF-8"
          --env LC_ALL="C.UTF-8"
          --env LC_COLLATE="C.UTF-8"
          --env LC_CTYPE="C.UTF-8"
          ${{ matrix.database }}

          ./scripts/wait-for-healthy-container.sh postgres 30

          echo "PREFECT_API_DATABASE_CONNECTION_URL=postgresql+asyncpg://prefect:prefect@localhost/prefect" >> $GITHUB_ENV

      - name: Run tests
        run: |
          # Parallelize tests by scope to reduce expensive service fixture duplication
          # Do not allow the test suite to build images, as we want the prebuilt images to be tested
          # Do not run Kubernetes service tests, we do not have a cluster available
          pytest tests -vvv --numprocesses auto --dist loadscope --disable-docker-image-builds --exclude-service kubernetes --durations=25 --cov=src/ --cov=tests/ --no-cov-on-fail --cov-report=term --cov-config=setup.cfg ${{ matrix.pytest-options }}

      - name: Check database container
        # Only applicable for Postgres, but we want this to run even when tests fail
        if: always()
        run: >
          docker container inspect postgres
          && docker container logs postgres
          || echo "Ignoring bad exit code"