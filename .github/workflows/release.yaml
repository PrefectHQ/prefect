name: Release prefect

# Note: Conda support for 3.11 is pending. See https://github.com/ContinuumIO/anaconda-issues/issues/13082

on:
  release:
    types: [released, prereleased]  # push pypi dists and docker images when a Github release is (pre)released
  push:
    branches: main  # push only sha pattern and branch pattern docker images for commits on main
  workflow_dispatch:  # push only sha pattern and branch pattern docker images when running manually from the Actions tab
jobs:
  build-pypi-dists:
    name: Build Python package
    if: github.event_name == 'release'

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          # Versioneer only generates correct versions with a full fetch
          fetch-depth: 0
          persist-credentials: false

      - name: Set up Python 3.8
        uses: actions/setup-python@v4
        with:
          python-version: "3.8"
          cache: "pip"
          cache-dependency-path: "requirements*.txt"

      - uses: actions/setup-node@v3
        with:
          node-version-file: ".nvmrc"
          cache-dependency-path: "**/package-lock.json"

      - name: Install python packages
        run: |
          python -m pip install -U pip setuptools wheel
          pip install -U -e .[dev]

      - name: Build orion-ui
        run: |
          prefect dev build-ui

      - name: Build a binary wheel and a source tarball
        run: |
          python setup.py sdist bdist_wheel

      - name: Publish build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: pypi-dists
          path: "./dist"

  publish-docker-images:
    name: Build Docker images
    runs-on: ubuntu-latest
    strategy:
      matrix:
        flavor:
          - ""
          - "-conda"
        python-version:
          - "3.7"
          - "3.8"
          - "3.9"
          - "3.10"
          - "3.11"
        exclude:
          # Not yet supported, see note at top
          - flavor: "-conda"
            python-version: "3.11"

    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Export CURRENT_BRANCH env var
        # can't use github.ref_name because that will be e.g. '2.6.9' on tag push, and we want to cache-from main branch on release
        run: echo "CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD | sed 's/\//-/g')" >> $GITHUB_ENV

      - name: Generate image metadata
        id: metadata
        uses: docker/metadata-action@v4
        with:
          images: prefecthq/prefect
          # list CURRENT_BRANCH first, to use as CACHE_IMAGE below
          tags: |
            type=raw,value=${{ env.CURRENT_BRANCH }},suffix=-python${{ matrix.python-version }}${{ matrix.flavor }}
            type=sha,suffix=-python${{ matrix.python-version }}${{ matrix.flavor }}
            type=raw,enable=${{ github.event_name == 'release' && matrix.python-version == '3.10' }},value=2-latest${{ matrix.flavor }}
            type=pep440,enable=${{ github.event_name == 'release' }},pattern={{version}},suffix=-python${{ matrix.python-version }}${{ matrix.flavor }}
            type=pep440,enable=${{ github.event_name == 'release' }},pattern={{major}}.{{minor}},suffix=-python${{ matrix.python-version }}${{ matrix.flavor }}
            type=pep440,enable=${{ github.event_name == 'release' }},pattern={{major}},suffix=-python${{ matrix.python-version }}${{ matrix.flavor }}
          flavor: |
            latest=false

      - name: Export CACHE_IMAGE env var
        run: echo "CACHE_IMAGE=$(echo '${{ steps.metadata.outputs.json }}' | jq -r '.tags[0]')" >> $GITHUB_ENV

      - name: Build image
        uses: docker/build-push-action@v3
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          build-args: |
            PYTHON_VERSION=${{ matrix.python-version }}
            ${{ ( endsWith(matrix.flavor, 'conda') && 'BASE_IMAGE=prefect-conda' ) || '' }}
          tags: ${{ steps.metadata.outputs.tags }}
          labels: ${{ steps.metadata.outputs.labels }}
          push: true
          # cache images need additional suffix because they are not usable for runtime
          cache-from: type=registry,ref=${{ env.CACHE_IMAGE }}-buildcache
          cache-to: type=registry,ref=${{ env.CACHE_IMAGE }}-buildcache,mode=max

      - name: Test docker image
        run: docker run --rm ${{ env.CACHE_IMAGE }} prefect version

  publish-docs:
    name: Publish documentation
    needs: [build-pypi-dists]
    environment: "prod"
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Checkout current docs
        run: git checkout docs-deploy --

      - name: Create a temporary branch
        # the release tag is parsed from the ref
        run: git checkout -b "docs-for-release-${GITHUB_REF#refs/*/}"

      - name: Merge with main
        run: git merge origin/main --no-ff -m "Merge branch 'main' into temporary docs branch"

      - name: Push and open PR
        run: |
          git push --set-upstream origin HEAD
          gh pr create \
            --title "Publish docs from release ${GITHUB_REF#refs/*/}" \
            --body '_automatically created with `gh` cli on release_' \
            --base docs-deploy
          gh pr merge --rebase --delete-branch
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-pypi-dists:
    name: Publish to PyPI
    environment: "prod"
    needs: [build-pypi-dists]
    runs-on: ubuntu-latest

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: pypi-dists
          path: "./dist"

      - name: Publish distribution to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          name: ci
